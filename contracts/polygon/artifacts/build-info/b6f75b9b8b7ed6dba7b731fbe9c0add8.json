{
	"id": "b6f75b9b8b7ed6dba7b731fbe9c0add8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/polygon/cattus.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\nimport \"./quickswapV3.sol\";\n\n\n\n\ncontract cattus is ERC20  {\n\n  address constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\n  address constant DAI = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\n  address constant axlUSDC = 0x750e4C4984a9e0f12978eA6742Bc1c5D248f40ed;\n  address constant BOB = 0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B;\n  address constant QUICKSWAP_ROUTER = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;\n  //address constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n  //address constant WBTC = 0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6;\n  //address constant WETH = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\n  address constant NF_POSITION_MANAGER = 0x8eF88E4c7CfbbaC1C163f7eddd4B578792201de6;\n  address constant QUICKSWAP_V3_SWAPPER = 0xf5b509bB0909a69B1c207E495f687a596C168E12;\n  //address constant Pool_USDC_WETH = 0x55CAaBB0d2b704FD0eF8192A7E35D8837e678207;\n\n  address public admin_address;\n\n  uint24 public constant poolFee = 3000;\n\n  bool public initialized;\n\n  \n    constructor() ERC20(\"Gold\", \"GLD\") {\n      admin_address = msg.sender;\n      initialized = false;\n    }\n\n    function initialize(uint256 _initialAmount) external {\n      require(msg.sender == admin_address, \"Must be called by contract admin\");\n      require(initialized == false, \"Contract has already been initialized\");\n      initialized = true;\n      TransferHelper.safeTransferFrom(USDC, msg.sender, address(this), _initialAmount);\n      TransferHelper.safeApprove(USDC, QUICKSWAP_V3_SWAPPER, _initialAmount);\n      uint256 fraction = _initialAmount/3;\n\n      iQuickswapSwapper.ExactInputSingleParams memory params;\n      params = iQuickswapSwapper.ExactInputSingleParams({\n                tokenIn: USDC,\n                tokenOut: DAI,\n                recipient: address(this),\n                deadline: block.timestamp,\n                amountIn: fraction/2,\n                amountOutMinimum: 1,\n                limitSqrtPrice: 0\n          });\n      uint256 amount_dai = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params);\n      params.tokenOut = axlUSDC;\n      uint256 amount_axlUsdc = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params);\n      params.tokenOut = BOB;\n      uint256 amount_bob = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params);\n\n      TransferHelper.safeApprove(USDC, NF_POSITION_MANAGER, fraction);\n      TransferHelper.safeApprove(DAI, NF_POSITION_MANAGER, amount_dai);\n\n      iNFTPositionManager.MintParams memory mint_params;\n      mint_params = iNFTPositionManager.MintParams({\n              token0: DAI,\n              token1: USDC,\n              tickLower: 266322,\n              tickUpper: 286322,\n              amount0Desired: amount_dai,\n              amount1Desired: fraction/2,\n              amount0Min: 1,\n              amount1Min: 1,\n              recipient: \taddress(this),\n              deadline: block.timestamp\n          });\n      iNFTPositionManager(NF_POSITION_MANAGER).mint(mint_params);\n\n\n    }\n\n\n\n/*     function mint(uint256 _amount, uint deadline) external returns(uint256, uint256, uint256, uint256) {\n        ERC20(USDC).transferFrom(msg.sender, address(this), _amount);\n        address[] memory path = new address[](2);\n        path[0] = USDC;\n        path[1] = WETH;\n        ERC20(USDC).approve(QUICKSWAP_ROUTER, _amount);\n        ISwapRouter(QUICKSWAP_ROUTER).swapExactTokensForTokens(_amount/3, 1, path, address(this), deadline);\n        path[1] = DAI;\n        ISwapRouter(QUICKSWAP_ROUTER).swapExactTokensForTokens(_amount/6, 1, path, address(this), deadline);\n        path[1] = WBTC;\n        ISwapRouter (QUICKSWAP_ROUTER).swapExactTokensForTokens(_amount/6, 1, path, address(this), deadline);\n        uint256 _amount_usdc = ERC20(USDC).balanceOf(address(this));\n        uint256 _amount_weth = ERC20(WETH).balanceOf(address(this));\n        uint256 _amount_dai = ERC20(DAI).balanceOf(address(this));\n        uint256 _amount_wbtc = ERC20(WBTC).balanceOf(address(this));\n\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0;\n        uint256 amount1;\n\n        // Approve the position manager\n        ERC20(USDC).approve(NFTPositionManager, _amount_usdc);\n        ERC20(DAI).approve(NFTPositionManager, _amount_dai); */\n\n/*         MintParams memory params = MintParams({\n                token0: DAI,\n                token1: USDC,\n                tickLower: TickMath.MIN_TICK,\n                tickUpper: TickMath.MAX_TICK,\n                amount0Desired: 256323,\n                amount1Desired: 296323,\n                amount0Min: 1,\n                amount1Min: 1,\n                recipient: \taddress(this),\n                deadline: block.timestamp\n            }); */\n\n\n        //iNFTPositionManager(NFTPositionManager).mint(params);\n\n    //}\n}\n"
			},
			"contracts/polygon/quickswapV3.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface iQuickswapSwapper {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 limitSqrtPrice;\r\n    }\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n}\r\n\r\ninterface iNFTPositionManager {\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n    function mint(MintParams calldata params)\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 tokenId,\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
			},
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/SafeMath.sol\":622:7216  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":622:7216  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 DUP16 0xA5 CALLDATACOPY SIGNEXTEND 0xB0 0xB9 0xB5 MLOAD STOP NUMBER SUB 0xF9 0xF8 DUP6 0xCE PUSH29 0x5EFE78235932A802743F9AE264B98E64736F6C63430007060033000000 ",
							"sourceMap": "622:6594:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 DUP16 0xA5 CALLDATACOPY SIGNEXTEND 0xB0 0xB9 0xB5 MLOAD STOP NUMBER SUB 0xF9 0xF8 DUP6 0xCE PUSH29 0x5EFE78235932A802743F9AE264B98E64736F6C63430007060033000000 ",
							"sourceMap": "622:6594:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033",
									".code": [
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f\",\"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1313:10780  contract ERC20 is Context, IERC20 {... */\n  mstore(0x40, 0x80)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x40\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  mload(0x40)\n  swap4\n  swap3\n  swap2\n  swap1\n  dup5\n  0x0100000000\n  dup3\n  gt\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  dup4\n  dup3\n  add\n  swap2\n  pop\n  0x20\n  dup3\n  add\n  dup6\n  dup2\n  gt\n  iszero\n  tag_4\n  jumpi\n  0x00\n  dup1\n  revert\ntag_4:\n  dup3\n  mload\n  dup7\n  0x01\n  dup3\n  mul\n  dup4\n  add\n  gt\n  0x0100000000\n  dup3\n  gt\n  or\n  iszero\n  tag_5\n  jumpi\n  0x00\n  dup1\n  revert\ntag_5:\n  dup1\n  dup4\n  mstore\n  0x20\n  dup4\n  add\n  swap3\n  pop\n  pop\n  pop\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  dup1\n  dup4\n  dup4\n  0x00\ntag_6:\n  dup4\n  dup2\n  lt\n  iszero\n  tag_8\n  jumpi\n  dup1\n  dup3\n  add\n  mload\n  dup2\n  dup5\n  add\n  mstore\n  0x20\n  dup2\n  add\n  swap1\n  pop\n  jump(tag_6)\ntag_8:\n  pop\n  pop\n  pop\n  pop\n  swap1\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  0x1f\n  and\n  dup1\n  iszero\n  tag_9\n  jumpi\n  dup1\n  dup3\n  sub\n  dup1\n  mload\n  0x01\n  dup4\n  0x20\n  sub\n  0x0100\n  exp\n  sub\n  not\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap2\n  pop\ntag_9:\n  pop\n  0x40\n  mstore\n  0x20\n  add\n  dup1\n  mload\n  mload(0x40)\n  swap4\n  swap3\n  swap2\n  swap1\n  dup5\n  0x0100000000\n  dup3\n  gt\n  iszero\n  tag_10\n  jumpi\n  0x00\n  dup1\n  revert\ntag_10:\n  dup4\n  dup3\n  add\n  swap2\n  pop\n  0x20\n  dup3\n  add\n  dup6\n  dup2\n  gt\n  iszero\n  tag_11\n  jumpi\n  0x00\n  dup1\n  revert\ntag_11:\n  dup3\n  mload\n  dup7\n  0x01\n  dup3\n  mul\n  dup4\n  add\n  gt\n  0x0100000000\n  dup3\n  gt\n  or\n  iszero\n  tag_12\n  jumpi\n  0x00\n  dup1\n  revert\ntag_12:\n  dup1\n  dup4\n  mstore\n  0x20\n  dup4\n  add\n  swap3\n  pop\n  pop\n  pop\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  dup1\n  dup4\n  dup4\n  0x00\ntag_13:\n  dup4\n  dup2\n  lt\n  iszero\n  tag_15\n  jumpi\n  dup1\n  dup3\n  add\n  mload\n  dup2\n  dup5\n  add\n  mstore\n  0x20\n  dup2\n  add\n  swap1\n  pop\n  jump(tag_13)\ntag_15:\n  pop\n  pop\n  pop\n  pop\n  swap1\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  0x1f\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\n  dup1\n  dup3\n  sub\n  dup1\n  mload\n  0x01\n  dup4\n  0x20\n  sub\n  0x0100\n  exp\n  sub\n  not\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap2\n  pop\ntag_16:\n  pop\n  0x40\n  mstore\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2025:2030  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2022  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2030  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_19\n  swap3\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_19:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2050:2057  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2047  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2057  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_21\n  swap3\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_21:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2079:2081  18 */\n  0x12\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2076  _decimals */\n  0x05\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2081  _decimals = 18 */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1313:10780  contract ERC20 is Context, IERC20 {... */\n  jump(tag_22)\ntag_20:\n  dup3\n  dup1\n  sload\n  0x01\n  dup2\n  0x01\n  and\n  iszero\n  0x0100\n  mul\n  sub\n  and\n  0x02\n  swap1\n  div\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_24\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_23)\ntag_24:\n  dup3\n  0x1f\n  lt\n  tag_25\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_23)\ntag_25:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_23\n  jumpi\n  swap2\n  dup3\n  add\ntag_26:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_27\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_26)\ntag_27:\ntag_23:\n  pop\n  swap1\n  pop\n  tag_28\n  swap2\n  swap1\n  tag_29\n  jump\t// in\ntag_28:\n  pop\n  swap1\n  jump\t// out\ntag_29:\ntag_30:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_31\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_30)\ntag_31:\n  pop\n  swap1\n  jump\t// out\ntag_22:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1313:10780  contract ERC20 is Context, IERC20 {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_17:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_19\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_17)\n    tag_19:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_20\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_20:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_23\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_28\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      dup3\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_33\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_36\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_10:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_39:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_41\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_39)\n    tag_41:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_42\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_42:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_45\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_46\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_48\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_51\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2198:2211  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2230:2235  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2223:2235  return _name */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_53\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_54\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_53)\n    tag_54:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_55:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_55\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_53:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_23:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4312:4316  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      tag_57\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      tag_58\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4347  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      jump\t// in\n    tag_58:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4351:4358  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4360:4366  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4336  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_57:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4384:4388  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4377:4388  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3281:3288  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3307:3319  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3300:3319  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_28:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4968:4972  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4994:5000  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5002:5011  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5013:5019  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:4993  _transfer */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_63:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_65\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5045  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      tag_66\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5057  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      jump\t// in\n    tag_66:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_67\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5099:5105  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5072  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5073:5079  sender */\n      dup12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      tag_68\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5091  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      jump\t// in\n    tag_68:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5098  _allowances[sender][_msgSender()].sub */\n      tag_69\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_67:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5038  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_65:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5168:5172  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5161:5172  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_30:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3120:3125  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3153  _decimals */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3137:3153  return _decimals */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_33:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5662:5666  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      tag_73\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5697  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5701:5708  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5749:5759  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5721  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      tag_75\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5732  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      jump\t// in\n    tag_75:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5736:5743  spender */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5748  _allowances[_msgSender()][spender].add */\n      tag_76\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_74:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5686  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      jump\t// in\n    tag_72:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5778:5782  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5771:5782  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3458:3465  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3493  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3494:3501  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3477:3502  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2402:2415  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2434:2441  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2427:2441  return _symbol */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_79\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_80\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_79)\n    tag_80:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_81:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_81\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_79:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6369:6373  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_83\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      tag_84\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6404  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6408:6415  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_85\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6456:6471  subtractedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6428  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      tag_86\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6439  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6443:6450  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6455  _allowances[_msgSender()][spender].sub */\n      tag_69\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_85:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6393  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      jump\t// in\n    tag_83:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6531:6535  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6524:6535  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3798:3802  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      tag_88\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      tag_89\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3834  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      jump\t// in\n    tag_89:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3838:3847  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3849:3855  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3823  _transfer */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n    tag_88:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3873:3877  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3866:3877  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_51:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4031:4038  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4068  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4069:4074  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4076:4083  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4050:4084  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_59:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":651:666  address payable */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":678:695  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_60:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9458:9459  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9446  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9433:9501  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_93\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_93:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9538:9539  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9526  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9511:9579  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_94\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029\n      0x22\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_94:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9620:9626  amount */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9601  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9602:9607  owner */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9609:9616  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9626  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9657:9664  spender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9650:9655  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9666:9672  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n    tag_64:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7139:7140  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7127  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7113:7183  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea\n      0x25\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7222:7223  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7210  recipient */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7193:7264  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x23\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f\n      0x23\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      tag_98\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7296:7302  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7304:7313  recipient */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7315:7321  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7295  _beforeTokenTransfer */\n      tag_99\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7375:7381  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7362  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7363:7369  sender */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7374  _balances[sender].sub */\n      tag_69\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_100:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7342  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7343:7349  sender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7424  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      tag_101\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7482:7488  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7466  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7467:7476  recipient */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7481  _balances[recipient].add */\n      tag_76\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_101:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7443  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7444:7453  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7489  _balances[recipient] = _balances[recipient].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7521:7530  recipient */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7513:7519  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7532:7538  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_69:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5510:5517  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5542:5543  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5538  b */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5543  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5545:5557  errorMessage */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5529:5558  require(b <= a, errorMessage) */\n      swap1\n      tag_103\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_104:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_106\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_104)\n    tag_106:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_107\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_107:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_103:\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5579:5580  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5576  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5580  a - b */\n      sub\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5568:5580  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2740:2747  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2768  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2775:2776  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2772  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2776  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2776  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2799:2800  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2795  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2800  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2786:2832  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2849:2850  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2842:2850  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10686:10778  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } */\n    tag_99:\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f 45524332303a207472616e7366657220746f20746865207a65726f2061646472657373\n    data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029 45524332303a20617070726f766520746f20746865207a65726f2061646472657373\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea 45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373\n    data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208 45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620013af380380620013af833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b506040525050508160039080519060200190620001cd9291906200020b565b508060049080519060200190620001e69291906200020b565b506012600560006101000a81548160ff021916908360ff1602179055505050620002c1565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024357600085556200028f565b82601f106200025e57805160ff19168380011785556200028f565b828001600101855582156200028f579182015b828111156200028e57825182559160200191906001019062000271565b5b5090506200029e9190620002a2565b5090565b5b80821115620002bd576000816000905550600101620002a3565b5090565b6110de80620002d16000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025857806370a08231146102bc57806395d89b4114610314578063a457c2d714610397578063a9059cbb146103fb578063dd62ed3e1461045f576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019557806323b872dd146101b3578063313ce56714610237575b600080fd5b6100b66104d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610579565b60405180821515815260200191505060405180910390f35b61019d610597565b6040518082815260200191505060405180910390f35b61021f600480360360608110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a1565b60405180821515815260200191505060405180910390f35b61023f61067a565b604051808260ff16815260200191505060405180910390f35b6102a46004803603604081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610691565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610744565b6040518082815260200191505060405180910390f35b61031c61078c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103e3600480360360408110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082e565b60405180821515815260200191505060405180910390f35b6104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108fb565b60405180821515815260200191505060405180910390f35b6104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610919565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058d6105866109a0565b84846109a8565b6001905092915050565b6000600254905090565b60006105ae848484610b9f565b61066f846105ba6109a0565b61066a8560405180606001604052806028815260200161101360289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106206109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b600190509392505050565b6000600560009054906101000a900460ff16905090565b600061073a61069e6109a0565b8461073585600160006106af6109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6109a8565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b60006108f161083b6109a0565b846108ec8560405180606001604052806025815260200161108460259139600160006108656109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b6001905092915050565b600061090f6109086109a0565b8484610b9f565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110606024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fcb6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061103b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fa86023913960400191505060405180910390fd5b610cb6838383610fa2565b610d2181604051806060016040528060268152602001610fed602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610db4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ed2578082015181840152602081019050610eb7565b50505050905090810190601f168015610eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015610f98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x13AF CODESIZE SUB DUP1 PUSH3 0x13AF DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH3 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0xA6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0xF1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH3 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x180 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x163 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x1AE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1CD SWAP3 SWAP2 SWAP1 PUSH3 0x20B JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1E6 SWAP3 SWAP2 SWAP1 PUSH3 0x20B JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x2C1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x243 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x28F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x25E JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x28F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x28F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x28E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x271 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x29E SWAP2 SWAP1 PUSH3 0x2A2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x2BD JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x2A3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x10DE DUP1 PUSH3 0x2D1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x45F JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x237 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x544 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x586 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP5 DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x66F DUP5 PUSH2 0x5BA PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x66A DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x620 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73A PUSH2 0x69E PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x735 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6AF PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F1 PUSH2 0x83B PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x8EC DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1084 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x865 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90F PUSH2 0x908 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1060 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFCB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x103B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFA8 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB6 DUP4 DUP4 DUP4 PUSH2 0xFA2 JUMP JUMPDEST PUSH2 0xD21 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFED PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDB4 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEFF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220893F DUP10 BALANCE OR 0x26 PUSH8 0xF95A5793784509C3 DUP14 MOD 0x4F 0xFB 0xAC 0xB7 AND MLOAD CALLDATALOAD PUSH30 0x503091F9FC5F8364736F6C63430007060033000000000000000000000000 ",
							"sourceMap": "1313:9467:2:-:0;;;1950:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2025:5;2017;:13;;;;;;;;;;;;:::i;:::-;;2050:7;2040;:17;;;;;;;;;;;;:::i;:::-;;2079:2;2067:9;;:14;;;;;;;;;;;;;;;;;;1950:138;;1313:9467;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025857806370a08231146102bc57806395d89b4114610314578063a457c2d714610397578063a9059cbb146103fb578063dd62ed3e1461045f576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019557806323b872dd146101b3578063313ce56714610237575b600080fd5b6100b66104d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610579565b60405180821515815260200191505060405180910390f35b61019d610597565b6040518082815260200191505060405180910390f35b61021f600480360360608110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a1565b60405180821515815260200191505060405180910390f35b61023f61067a565b604051808260ff16815260200191505060405180910390f35b6102a46004803603604081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610691565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610744565b6040518082815260200191505060405180910390f35b61031c61078c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103e3600480360360408110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082e565b60405180821515815260200191505060405180910390f35b6104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108fb565b60405180821515815260200191505060405180910390f35b6104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610919565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058d6105866109a0565b84846109a8565b6001905092915050565b6000600254905090565b60006105ae848484610b9f565b61066f846105ba6109a0565b61066a8560405180606001604052806028815260200161101360289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106206109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b600190509392505050565b6000600560009054906101000a900460ff16905090565b600061073a61069e6109a0565b8461073585600160006106af6109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6109a8565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b60006108f161083b6109a0565b846108ec8560405180606001604052806025815260200161108460259139600160006108656109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b6001905092915050565b600061090f6109086109a0565b8484610b9f565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110606024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fcb6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061103b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fa86023913960400191505060405180910390fd5b610cb6838383610fa2565b610d2181604051806060016040528060268152602001610fed602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610db4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ed2578082015181840152602081019050610eb7565b50505050905090810190601f168015610eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015610f98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x45F JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x237 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x544 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x586 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP5 DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x66F DUP5 PUSH2 0x5BA PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x66A DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x620 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73A PUSH2 0x69E PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x735 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6AF PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F1 PUSH2 0x83B PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x8EC DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1084 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x865 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90F PUSH2 0x908 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1060 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFCB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x103B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFA8 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB6 DUP4 DUP4 DUP4 PUSH2 0xFA2 JUMP JUMPDEST PUSH2 0xD21 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFED PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDB4 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEFF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220893F DUP10 BALANCE OR 0x26 PUSH8 0xF95A5793784509C3 DUP14 MOD 0x4F 0xFB 0xAC 0xB7 AND MLOAD CALLDATALOAD PUSH30 0x503091F9FC5F8364736F6C63430007060033000000000000000000000000 ",
							"sourceMap": "1313:9467:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4229:166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3220:106;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4862:317;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3071:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5574:215;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3384:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2355:93;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6276:266;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3712:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3942:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2153:89;2198:13;2230:5;2223:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89;:::o;4229:166::-;4312:4;4328:39;4337:12;:10;:12::i;:::-;4351:7;4360:6;4328:8;:39::i;:::-;4384:4;4377:11;;4229:166;;;;:::o;3220:106::-;3281:7;3307:12;;3300:19;;3220:106;:::o;4862:317::-;4968:4;4984:36;4994:6;5002:9;5013:6;4984:9;:36::i;:::-;5030:121;5039:6;5047:12;:10;:12::i;:::-;5061:89;5099:6;5061:89;;;;;;;;;;;;;;;;;:11;:19;5073:6;5061:19;;;;;;;;;;;;;;;:33;5081:12;:10;:12::i;:::-;5061:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;5030:8;:121::i;:::-;5168:4;5161:11;;4862:317;;;;;:::o;3071:89::-;3120:5;3144:9;;;;;;;;;;;3137:16;;3071:89;:::o;5574:215::-;5662:4;5678:83;5687:12;:10;:12::i;:::-;5701:7;5710:50;5749:10;5710:11;:25;5722:12;:10;:12::i;:::-;5710:25;;;;;;;;;;;;;;;:34;5736:7;5710:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;5678:8;:83::i;:::-;5778:4;5771:11;;5574:215;;;;:::o;3384:125::-;3458:7;3484:9;:18;3494:7;3484:18;;;;;;;;;;;;;;;;3477:25;;3384:125;;;:::o;2355:93::-;2402:13;2434:7;2427:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2355:93;:::o;6276:266::-;6369:4;6385:129;6394:12;:10;:12::i;:::-;6408:7;6417:96;6456:15;6417:96;;;;;;;;;;;;;;;;;:11;:25;6429:12;:10;:12::i;:::-;6417:25;;;;;;;;;;;;;;;:34;6443:7;6417:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;6385:8;:129::i;:::-;6531:4;6524:11;;6276:266;;;;:::o;3712:172::-;3798:4;3814:42;3824:12;:10;:12::i;:::-;3838:9;3849:6;3814:9;:42::i;:::-;3873:4;3866:11;;3712:172;;;;:::o;3942:149::-;4031:7;4057:11;:18;4069:5;4057:18;;;;;;;;;;;;;;;:27;4076:7;4057:27;;;;;;;;;;;;;;;;4050:34;;3942:149;;;;:::o;598:104:8:-;651:15;685:10;678:17;;598:104;:::o;9340:340:2:-;9458:1;9441:19;;:5;:19;;;;9433:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9538:1;9519:21;;:7;:21;;;;9511:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9620:6;9590:11;:18;9602:5;9590:18;;;;;;;;;;;;;;;:27;9609:7;9590:27;;;;;;;;;;;;;;;:36;;;;9657:7;9641:32;;9650:5;9641:32;;;9666:6;9641:32;;;;;;;;;;;;;;;;;;9340:340;;;:::o;7016:530::-;7139:1;7121:20;;:6;:20;;;;7113:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7222:1;7201:23;;:9;:23;;;;7193:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7275:47;7296:6;7304:9;7315:6;7275:20;:47::i;:::-;7353:71;7375:6;7353:71;;;;;;;;;;;;;;;;;:9;:17;7363:6;7353:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;7333:9;:17;7343:6;7333:17;;;;;;;;;;;;;;;:91;;;;7457:32;7482:6;7457:9;:20;7467:9;7457:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;7434:9;:20;7444:9;7434:20;;;;;;;;;;;;;;;:55;;;;7521:9;7504:35;;7513:6;7504:35;;;7532:6;7504:35;;;;;;;;;;;;;;;;;;7016:530;;;:::o;5424:163:1:-;5510:7;5542:1;5537;:6;;5545:12;5529:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5579:1;5575;:5;5568:12;;5424:163;;;;;:::o;2682:175::-;2740:7;2759:9;2775:1;2771;:5;2759:17;;2799:1;2794;:6;;2786:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:1;2842:8;;;2682:175;;;;:::o;10686:92:2:-;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "863600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "1431",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1218",
								"decimals()": "1144",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1058",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_setupDecimals(uint8)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2025,
									"end": 2030,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2022,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "tag",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2050,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2047,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "tag",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2079,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "25"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "25"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "26"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "26"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "28"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "28"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "30"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "30"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033",
									".code": [
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2198,
											"end": 2211,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4312,
											"end": 4316,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 4337,
											"end": 4347,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4360,
											"end": 4366,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4328,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4384,
											"end": 4388,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3281,
											"end": 3288,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4968,
											"end": 4972,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 4994,
											"end": 5000,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5002,
											"end": 5011,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4984,
											"end": 4993,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 5039,
											"end": 5045,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5047,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 5099,
											"end": 5105,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH data",
											"source": 2,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5072,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5073,
											"end": 5079,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 5081,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5168,
											"end": 5172,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5662,
											"end": 5666,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 5687,
											"end": 5697,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5701,
											"end": 5708,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5749,
											"end": 5759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5721,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 5722,
											"end": 5732,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5736,
											"end": 5743,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5678,
											"end": 5686,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5778,
											"end": 5782,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3458,
											"end": 3465,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3493,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2402,
											"end": 2415,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2434,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6369,
											"end": 6373,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 6394,
											"end": 6404,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6408,
											"end": 6415,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 6456,
											"end": 6471,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH data",
											"source": 2,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6428,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6429,
											"end": 6439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6443,
											"end": 6450,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6385,
											"end": 6393,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6531,
											"end": 6535,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3798,
											"end": 3802,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3824,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3838,
											"end": 3847,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3849,
											"end": 3855,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3814,
											"end": 3823,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3873,
											"end": 3877,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4031,
											"end": 4038,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4068,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4083,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 651,
											"end": 666,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 678,
											"end": 695,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 678,
											"end": 695,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9458,
											"end": 9459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH data",
											"source": 2,
											"value": "C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9538,
											"end": 9539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9526,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH data",
											"source": 2,
											"value": "24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9620,
											"end": 9626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9601,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9602,
											"end": 9607,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9609,
											"end": 9616,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9657,
											"end": 9664,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9650,
											"end": 9655,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9666,
											"end": 9672,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7139,
											"end": 7140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7127,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH data",
											"source": 2,
											"value": "BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7222,
											"end": 7223,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7210,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH data",
											"source": 2,
											"value": "557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 7296,
											"end": 7302,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7304,
											"end": 7313,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7315,
											"end": 7321,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7375,
											"end": 7381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH data",
											"source": 2,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7363,
											"end": 7369,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7342,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7343,
											"end": 7349,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 7482,
											"end": 7488,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7466,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7476,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7443,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7444,
											"end": 7453,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7521,
											"end": 7530,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7513,
											"end": 7519,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7532,
											"end": 7538,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5510,
											"end": 5517,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5542,
											"end": 5543,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5538,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5545,
											"end": 5557,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5579,
											"end": 5580,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5576,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5580,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "tag",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2740,
											"end": 2747,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2768,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2772,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2776,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2799,
											"end": 2800,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "1B"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2849,
											"end": 2850,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									],
									".data": {
										"24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
										"C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f\",\"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccbd79e8d556aa7011babb0e5d1e55a966add74853e7ba0274ff184bd96ef002\",\"dweb:/ipfs/QmV28ozNRUFDiDUMvCwcFmLTQPG6nfvgeKr4cmbHWoegtH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 383,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 389,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 391,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 393,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 395,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_decimals",
								"offset": 0,
								"slot": "5",
								"type": "t_uint8"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a8a7fd1043372336ecccdbcbcf4962c6df8958dc9c7c7f8361fc2b3dd23570cc\",\"dweb:/ipfs/QmYHKgZxnanBfu7Q8ZicVhDDuB7XRGxuwvmCjfQQ1E5j39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP2 SSTORE 0xD9 PUSH5 0xD43A73867F 0xB8 PUSH25 0xDDD461135A55C36CCCA22AC587972E02302871A164736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP2 SSTORE 0xD9 PUSH5 0xD43A73867F 0xB8 PUSH25 0xDDD461135A55C36CCCA22AC587972E02302871A164736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220088155d964d43a73867fb878ddd461135a55c36ccca22ac587972e02302871a164736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":167:1819  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":167:1819  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 SWAP9 0xCD SWAP9 PUSH17 0x54A00A6F463B25D9D688CC9588EAD5AAAF 0xEA 0x5C CREATE2 PUSH24 0x9E9F31C7319164736F6C6343000706003300000000000000 ",
							"sourceMap": "167:1652:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 SWAP9 0xCD SWAP9 PUSH17 0x54A00A6F463B25D9D688CC9588EAD5AAAF 0xEA 0x5C CREATE2 PUSH24 0x9E9F31C7319164736F6C6343000706003300000000000000 ",
							"sourceMap": "167:1652:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "INVALID",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033",
									".code": [
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dfefdc75dfdbad341bd4d9c6b364419218d04447e979a7b1da0a4e10b4dad8c464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dfefdc75dfdbad341bd4d9c6b364419218d04447e979a7b1da0a4e10b4dad8c464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF 0xEF 0xDC PUSH22 0xDFDBAD341BD4D9C6B364419218D04447E979A7B1DA0A 0x4E LT 0xB4 0xDA 0xD8 0xC4 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "129:2408:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dfefdc75dfdbad341bd4d9c6b364419218d04447e979a7b1da0a4e10b4dad8c464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF 0xEF 0xDC PUSH22 0xDFDBAD341BD4D9C6B364419218D04447E979A7B1DA0A 0x4E LT 0xB4 0xDA 0xD8 0xC4 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "129:2408:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "INVALID",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dfefdc75dfdbad341bd4d9c6b364419218d04447e979a7b1da0a4e10b4dad8c464736f6c63430007060033",
									".code": [
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/cattus.sol": {
				"cattus": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "admin_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_initialAmount",
									"type": "uint256"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/polygon/cattus.sol\":450:5184  contract cattus is ERC20  {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/polygon/cattus.sol\":1424:1527  constructor() ERC20(\"Gold\", \"GLD\") {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  0x476f6c6400000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  0x474c440000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2025:2030  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2022  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2030  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_5\n  swap3\n  swap2\n  swap1\n  tag_6\n  jump\t// in\ntag_5:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2050:2057  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2047  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2057  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_7\n  swap3\n  swap2\n  swap1\n  tag_6\n  jump\t// in\ntag_7:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2079:2081  18 */\n  0x12\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2076  _decimals */\n  0x05\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2081  _decimals = 18 */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"contracts/polygon/cattus.sol\":1483:1493  msg.sender */\n  caller\n    /* \"contracts/polygon/cattus.sol\":1467:1480  admin_address */\n  0x05\n  0x01\n    /* \"contracts/polygon/cattus.sol\":1467:1493  admin_address = msg.sender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/polygon/cattus.sol\":1515:1520  false */\n  0x00\n    /* \"contracts/polygon/cattus.sol\":1501:1512  initialized */\n  0x05\n  0x15\n    /* \"contracts/polygon/cattus.sol\":1501:1520  initialized = false */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/polygon/cattus.sol\":450:5184  contract cattus is ERC20  {... */\n  jump(tag_9)\ntag_6:\n  dup3\n  dup1\n  sload\n  0x01\n  dup2\n  0x01\n  and\n  iszero\n  0x0100\n  mul\n  sub\n  and\n  0x02\n  swap1\n  div\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_11\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_10)\ntag_11:\n  dup3\n  0x1f\n  lt\n  tag_12\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_10)\ntag_12:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_10\n  jumpi\n  swap2\n  dup3\n  add\ntag_13:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_14\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_13)\ntag_14:\ntag_10:\n  pop\n  swap1\n  pop\n  tag_15\n  swap2\n  swap1\n  tag_16\n  jump\t// in\ntag_15:\n  pop\n  swap1\n  jump\t// out\ntag_16:\ntag_17:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_18\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_17)\ntag_18:\n  pop\n  swap1\n  jump\t// out\ntag_9:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/polygon/cattus.sol\":450:5184  contract cattus is ERC20  {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xa9059cbb\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xf2e62772\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xfe4b84df\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_19:\n      dup1\n      0x39509351\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_18:\n      dup1\n      0x158ef93e\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x158ef93e\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x089fe6aa\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/polygon/cattus.sol\":1349:1386  uint24 public constant poolFee = 3000 */\n    tag_4:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_5:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/polygon/cattus.sol\":1391:1414  bool public initialized */\n    tag_6:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      tag_37\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_7:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_40\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_8:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_9:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_10:\n      tag_51\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_52\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_54\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_11:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_56:\n      tag_58\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_59\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_12:\n      tag_60\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_13:\n      tag_63\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_64\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_64:\n      tag_65\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      tag_66\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_14:\n      tag_67\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_68\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_68:\n      tag_69\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_70\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_70:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_15:\n      tag_71\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_72\n      swap2\n      swap1\n      tag_73\n      jump\t// in\n    tag_72:\n      tag_74\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      tag_75\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/polygon/cattus.sol\":1316:1344  address public admin_address */\n    tag_16:\n      tag_76\n      tag_77\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      tag_78\n      swap2\n      swap1\n      tag_79\n      jump\t// in\n    tag_78:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/polygon/cattus.sol\":1533:3403  function initialize(uint256 _initialAmount) external {... */\n    tag_17:\n      tag_80\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_81\n      swap2\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      tag_83\n      jump\t// in\n    tag_80:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2198:2211  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2230:2235  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2223:2235  return _name */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_85\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_86\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_85)\n    tag_86:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_87:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_87\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_85:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/polygon/cattus.sol\":1349:1386  uint24 public constant poolFee = 3000 */\n    tag_26:\n        /* \"contracts/polygon/cattus.sol\":1382:1386  3000 */\n      0x0bb8\n        /* \"contracts/polygon/cattus.sol\":1349:1386  uint24 public constant poolFee = 3000 */\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_32:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4312:4316  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      tag_89\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      tag_90\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4347  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      jump\t// in\n    tag_90:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4351:4358  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4360:4366  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4336  _approve */\n      tag_92\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_89:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4384:4388  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4377:4388  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/polygon/cattus.sol\":1391:1414  bool public initialized */\n    tag_36:\n      0x05\n      0x15\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_39:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3281:3288  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3307:3319  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3300:3319  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4968:4972  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      tag_95\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4994:5000  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5002:5011  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5013:5019  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:4993  _transfer */\n      tag_96\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_95:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_97\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5045  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      tag_98\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5057  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_99\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5099:5105  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5072  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5073:5079  sender */\n      dup12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      tag_100\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5091  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      jump\t// in\n    tag_100:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5098  _allowances[sender][_msgSender()].sub */\n      tag_101\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_99:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5038  _approve */\n      tag_92\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_97:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5168:5172  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5161:5172  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3120:3125  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3153  _decimals */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3137:3153  return _decimals */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_53:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5662:5666  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_104\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      tag_105\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5697  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      jump\t// in\n    tag_105:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5701:5708  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_106\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5749:5759  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5721  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      tag_107\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5732  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      jump\t// in\n    tag_107:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5736:5743  spender */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5748  _allowances[_msgSender()][spender].add */\n      tag_108\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_106:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5686  _approve */\n      tag_92\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      jump\t// in\n    tag_104:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5778:5782  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5771:5782  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_58:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3458:3465  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3493  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3494:3501  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3477:3502  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_61:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2402:2415  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2434:2441  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2427:2441  return _symbol */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_111\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_112\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_111)\n    tag_112:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_113:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_113\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_111:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6369:6373  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_115\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      tag_116\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6404  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      jump\t// in\n    tag_116:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6408:6415  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_117\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6456:6471  subtractedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6428  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      tag_118\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6439  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      jump\t// in\n    tag_118:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6443:6450  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6455  _allowances[_msgSender()][spender].sub */\n      tag_101\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6393  _approve */\n      tag_92\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      jump\t// in\n    tag_115:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6531:6535  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6524:6535  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_69:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3798:3802  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      tag_120\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      tag_121\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3834  _msgSender */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      jump\t// in\n    tag_121:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3838:3847  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3849:3855  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3823  _transfer */\n      tag_96\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n    tag_120:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3873:3877  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3866:3877  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4031:4038  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4068  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4069:4074  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4076:4083  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4050:4084  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/polygon/cattus.sol\":1316:1344  address public admin_address */\n    tag_77:\n      0x05\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/polygon/cattus.sol\":1533:3403  function initialize(uint256 _initialAmount) external {... */\n    tag_83:\n        /* \"contracts/polygon/cattus.sol\":1616:1629  admin_address */\n      0x05\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/polygon/cattus.sol\":1602:1629  msg.sender == admin_address */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/polygon/cattus.sol\":1602:1612  msg.sender */\n      caller\n        /* \"contracts/polygon/cattus.sol\":1602:1629  msg.sender == admin_address */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/polygon/cattus.sol\":1594:1666  require(msg.sender == admin_address, \"Must be called by contract admin\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_125\n      swap1\n      tag_126\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"contracts/polygon/cattus.sol\":1697:1702  false */\n      0x00\n        /* \"contracts/polygon/cattus.sol\":1682:1702  initialized == false */\n      iszero\n      iszero\n        /* \"contracts/polygon/cattus.sol\":1682:1693  initialized */\n      0x05\n      0x15\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/polygon/cattus.sol\":1682:1702  initialized == false */\n      iszero\n      iszero\n      eq\n        /* \"contracts/polygon/cattus.sol\":1674:1744  require(initialized == false, \"Contract has already been initialized\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"contracts/polygon/cattus.sol\":1766:1770  true */\n      0x01\n        /* \"contracts/polygon/cattus.sol\":1752:1763  initialized */\n      0x05\n      0x15\n        /* \"contracts/polygon/cattus.sol\":1752:1770  initialized = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/polygon/cattus.sol\":1778:1858  TransferHelper.safeTransferFrom(USDC, msg.sender, address(this), _initialAmount) */\n      tag_130\n        /* \"contracts/polygon/cattus.sol\":505:547  0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174 */\n      0x2791bca1f2de4661ed88a30c99a7a9449aa84174\n        /* \"contracts/polygon/cattus.sol\":1816:1826  msg.sender */\n      caller\n        /* \"contracts/polygon/cattus.sol\":1836:1840  this */\n      address\n        /* \"contracts/polygon/cattus.sol\":1843:1857  _initialAmount */\n      dup5\n        /* \"contracts/polygon/cattus.sol\":1778:1809  TransferHelper.safeTransferFrom */\n      tag_131\n        /* \"contracts/polygon/cattus.sol\":1778:1858  TransferHelper.safeTransferFrom(USDC, msg.sender, address(this), _initialAmount) */\n      jump\t// in\n    tag_130:\n        /* \"contracts/polygon/cattus.sol\":1866:1936  TransferHelper.safeApprove(USDC, QUICKSWAP_V3_SWAPPER, _initialAmount) */\n      tag_132\n        /* \"contracts/polygon/cattus.sol\":505:547  0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174 */\n      0x2791bca1f2de4661ed88a30c99a7a9449aa84174\n        /* \"contracts/polygon/cattus.sol\":1187:1229  0xf5b509bB0909a69B1c207E495f687a596C168E12 */\n      0xf5b509bb0909a69b1c207e495f687a596c168e12\n        /* \"contracts/polygon/cattus.sol\":1921:1935  _initialAmount */\n      dup4\n        /* \"contracts/polygon/cattus.sol\":1866:1892  TransferHelper.safeApprove */\n      tag_133\n        /* \"contracts/polygon/cattus.sol\":1866:1936  TransferHelper.safeApprove(USDC, QUICKSWAP_V3_SWAPPER, _initialAmount) */\n      jump\t// in\n    tag_132:\n        /* \"contracts/polygon/cattus.sol\":1944:1960  uint256 fraction */\n      0x00\n        /* \"contracts/polygon/cattus.sol\":1978:1979  3 */\n      0x03\n        /* \"contracts/polygon/cattus.sol\":1963:1977  _initialAmount */\n      dup3\n        /* \"contracts/polygon/cattus.sol\":1963:1979  _initialAmount/3 */\n      dup2\n      tag_134\n      jumpi\n      invalid\n    tag_134:\n      div\n        /* \"contracts/polygon/cattus.sol\":1944:1979  uint256 fraction = _initialAmount/3 */\n      swap1\n      pop\n        /* \"contracts/polygon/cattus.sol\":1988:2042  iQuickswapSwapper.ExactInputSingleParams memory params */\n      tag_135\n      tag_136\n      jump\t// in\n    tag_135:\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/polygon/cattus.sol\":505:547  0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174 */\n      0x2791bca1f2de4661ed88a30c99a7a9449aa84174\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":574:616  0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063 */\n      0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":2199:2203  this */\n      address\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":2232:2247  block.timestamp */\n      timestamp\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":2284:2285  2 */\n      0x02\n        /* \"contracts/polygon/cattus.sol\":2275:2283  fraction */\n      dup5\n        /* \"contracts/polygon/cattus.sol\":2275:2285  fraction/2 */\n      dup2\n      tag_137\n      jumpi\n      invalid\n    tag_137:\n      div\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":2321:2322  1 */\n      0x01\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":2356:2357  0 */\n      0x00\n        /* \"contracts/polygon/cattus.sol\":2059:2370  iQuickswapSwapper.ExactInputSingleParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/polygon/cattus.sol\":2050:2370  params = iQuickswapSwapper.ExactInputSingleParams({... */\n      swap1\n      pop\n        /* \"contracts/polygon/cattus.sol\":2378:2396  uint256 amount_dai */\n      0x00\n        /* \"contracts/polygon/cattus.sol\":1187:1229  0xf5b509bB0909a69B1c207E495f687a596C168E12 */\n      0xf5b509bb0909a69b1c207e495f687a596c168e12\n        /* \"contracts/polygon/cattus.sol\":2399:2455  iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xbc651188\n        /* \"contracts/polygon/cattus.sol\":2456:2462  params */\n      dup4\n        /* \"contracts/polygon/cattus.sol\":2399:2463  iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_138\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_138:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_140\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_140:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_142\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_142:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_143\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_143:\n        /* \"contracts/polygon/cattus.sol\":2378:2463  uint256 amount_dai = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params) */\n      swap1\n      pop\n        /* \"contracts/polygon/cattus.sol\":647:689  0x750e4C4984a9e0f12978eA6742Bc1c5D248f40ed */\n      0x750e4c4984a9e0f12978ea6742bc1c5d248f40ed\n        /* \"contracts/polygon/cattus.sol\":2471:2477  params */\n      dup3\n        /* \"contracts/polygon/cattus.sol\":2471:2486  params.tokenOut */\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":2471:2496  params.tokenOut = axlUSDC */\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/polygon/cattus.sol\":2504:2526  uint256 amount_axlUsdc */\n      0x00\n        /* \"contracts/polygon/cattus.sol\":1187:1229  0xf5b509bB0909a69B1c207E495f687a596C168E12 */\n      0xf5b509bb0909a69b1c207e495f687a596c168e12\n        /* \"contracts/polygon/cattus.sol\":2529:2585  iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xbc651188\n        /* \"contracts/polygon/cattus.sol\":2586:2592  params */\n      dup5\n        /* \"contracts/polygon/cattus.sol\":2529:2593  iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_145\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_145:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_148\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_148:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_149\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_149:\n        /* \"contracts/polygon/cattus.sol\":2504:2593  uint256 amount_axlUsdc = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params) */\n      swap1\n      pop\n        /* \"contracts/polygon/cattus.sol\":716:758  0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B */\n      0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b\n        /* \"contracts/polygon/cattus.sol\":2601:2607  params */\n      dup4\n        /* \"contracts/polygon/cattus.sol\":2601:2616  params.tokenOut */\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":2601:2622  params.tokenOut = BOB */\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/polygon/cattus.sol\":2630:2648  uint256 amount_bob */\n      0x00\n        /* \"contracts/polygon/cattus.sol\":1187:1229  0xf5b509bB0909a69B1c207E495f687a596C168E12 */\n      0xf5b509bb0909a69b1c207e495f687a596c168e12\n        /* \"contracts/polygon/cattus.sol\":2651:2707  iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xbc651188\n        /* \"contracts/polygon/cattus.sol\":2708:2714  params */\n      dup6\n        /* \"contracts/polygon/cattus.sol\":2651:2715  iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_150\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_150:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_151\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_151:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_153\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_153:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_154\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_154:\n        /* \"contracts/polygon/cattus.sol\":2630:2715  uint256 amount_bob = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params) */\n      swap1\n      pop\n        /* \"contracts/polygon/cattus.sol\":2724:2787  TransferHelper.safeApprove(USDC, NF_POSITION_MANAGER, fraction) */\n      tag_155\n        /* \"contracts/polygon/cattus.sol\":505:547  0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174 */\n      0x2791bca1f2de4661ed88a30c99a7a9449aa84174\n        /* \"contracts/polygon/cattus.sol\":1101:1143  0x8eF88E4c7CfbbaC1C163f7eddd4B578792201de6 */\n      0x8ef88e4c7cfbbac1c163f7eddd4b578792201de6\n        /* \"contracts/polygon/cattus.sol\":2778:2786  fraction */\n      dup8\n        /* \"contracts/polygon/cattus.sol\":2724:2750  TransferHelper.safeApprove */\n      tag_133\n        /* \"contracts/polygon/cattus.sol\":2724:2787  TransferHelper.safeApprove(USDC, NF_POSITION_MANAGER, fraction) */\n      jump\t// in\n    tag_155:\n        /* \"contracts/polygon/cattus.sol\":2795:2859  TransferHelper.safeApprove(DAI, NF_POSITION_MANAGER, amount_dai) */\n      tag_156\n        /* \"contracts/polygon/cattus.sol\":574:616  0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063 */\n      0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\n        /* \"contracts/polygon/cattus.sol\":1101:1143  0x8eF88E4c7CfbbaC1C163f7eddd4B578792201de6 */\n      0x8ef88e4c7cfbbac1c163f7eddd4b578792201de6\n        /* \"contracts/polygon/cattus.sol\":2848:2858  amount_dai */\n      dup6\n        /* \"contracts/polygon/cattus.sol\":2795:2821  TransferHelper.safeApprove */\n      tag_133\n        /* \"contracts/polygon/cattus.sol\":2795:2859  TransferHelper.safeApprove(DAI, NF_POSITION_MANAGER, amount_dai) */\n      jump\t// in\n    tag_156:\n        /* \"contracts/polygon/cattus.sol\":2868:2917  iNFTPositionManager.MintParams memory mint_params */\n      tag_157\n      tag_158\n      jump\t// in\n    tag_157:\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      mload(0x40)\n      dup1\n      0x0140\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/polygon/cattus.sol\":574:616  0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063 */\n      0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":505:547  0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174 */\n      0x2791bca1f2de4661ed88a30c99a7a9449aa84174\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3052:3058  266322 */\n      0x041052\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      0x02\n      signextend\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3085:3091  286322 */\n      0x045e72\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      0x02\n      signextend\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3123:3133  amount_dai */\n      dup6\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3174:3175  2 */\n      0x02\n        /* \"contracts/polygon/cattus.sol\":3165:3173  fraction */\n      dup9\n        /* \"contracts/polygon/cattus.sol\":3165:3175  fraction/2 */\n      dup2\n      tag_159\n      jumpi\n      invalid\n    tag_159:\n      div\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3203:3204  1 */\n      0x01\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3232:3233  1 */\n      0x01\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3269:3273  this */\n      address\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/polygon/cattus.sol\":3300:3315  block.timestamp */\n      timestamp\n        /* \"contracts/polygon/cattus.sol\":2939:3328  iNFTPositionManager.MintParams({... */\n      dup2\n      mstore\n      pop\n        /* \"contracts/polygon/cattus.sol\":2925:3328  mint_params = iNFTPositionManager.MintParams({... */\n      swap1\n      pop\n        /* \"contracts/polygon/cattus.sol\":1101:1143  0x8eF88E4c7CfbbaC1C163f7eddd4B578792201de6 */\n      0x8ef88e4c7cfbbac1c163f7eddd4b578792201de6\n        /* \"contracts/polygon/cattus.sol\":3336:3381  iNFTPositionManager(NF_POSITION_MANAGER).mint */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x9cc1a283\n        /* \"contracts/polygon/cattus.sol\":3382:3393  mint_params */\n      dup3\n        /* \"contracts/polygon/cattus.sol\":3336:3394  iNFTPositionManager(NF_POSITION_MANAGER).mint(mint_params) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_160\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_160:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_162\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_162:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_164\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_164:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_165\n      swap2\n      swap1\n      tag_166\n      jump\t// in\n    tag_165:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/polygon/cattus.sol\":1533:3403  function initialize(uint256 _initialAmount) external {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_91:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":651:666  address payable */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":678:695  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_92:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9458:9459  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9446  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9433:9501  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_169:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9538:9539  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9526  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9511:9579  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_170\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029\n      0x22\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_170:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9620:9626  amount */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9601  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9602:9607  owner */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9609:9616  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9626  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9657:9664  spender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9650:9655  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9666:9672  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7139:7140  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7127  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7113:7183  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea\n      0x25\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_172:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7222:7223  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7210  recipient */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7193:7264  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_173\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x23\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f\n      0x23\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_173:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      tag_174\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7296:7302  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7304:7313  recipient */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7315:7321  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7295  _beforeTokenTransfer */\n      tag_175\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      jump\t// in\n    tag_174:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_176\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7375:7381  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7362  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7363:7369  sender */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7374  _balances[sender].sub */\n      tag_101\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_176:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7342  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7343:7349  sender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7424  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      tag_177\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7482:7488  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7466  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7467:7476  recipient */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7481  _balances[recipient].add */\n      tag_108\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_177:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7443  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7444:7453  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7489  _balances[recipient] = _balances[recipient].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7521:7530  recipient */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7513:7519  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7532:7538  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_101:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5510:5517  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5542:5543  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5538  b */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5543  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5545:5557  errorMessage */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5529:5558  require(b <= a, errorMessage) */\n      swap1\n      tag_179\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_180:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_182\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_180)\n    tag_182:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_183\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_183:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_179:\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5579:5580  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5576  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5580  a - b */\n      sub\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5568:5580  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_108:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2740:2747  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2768  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2775:2776  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2772  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2776  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2776  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2799:2800  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2795  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2800  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2786:2832  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_185\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_185:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2849:2850  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2842:2850  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":561:919  function safeTransferFrom(... */\n    tag_131:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":701:713  bool success */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":715:732  bytes memory data */\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":748:753  token */\n      dup6\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":748:758  token.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":782:810  IERC20.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":812:816  from */\n      dup7\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":818:820  to */\n      dup7\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":822:827  value */\n      dup7\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":748:829  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_187:\n      0x20\n      dup4\n      lt\n      tag_189\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      0x20\n      dup4\n      sub\n      swap3\n      pop\n      jump(tag_187)\n    tag_189:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_192\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_191)\n    tag_192:\n      0x60\n      swap2\n      pop\n    tag_191:\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":700:829  (bool success, bytes memory data) =... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":847:854  success */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":847:904  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_193\n      jumpi\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":874:875  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:863  data */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:870  data.length */\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:875  data.length == 0 */\n      eq\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n      dup1\n      tag_194\n      jumpi\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":890:894  data */\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_195\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_195:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n    tag_194:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":847:904  success && (data.length == 0 || abi.decode(data, (bool))) */\n    tag_193:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":839:912  require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF') */\n      tag_196\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x03\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5354460000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_196:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":561:919  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1873:2180  function safeApprove(... */\n    tag_133:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1986:1998  bool success */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2000:2017  bytes memory data */\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2021:2026  token */\n      dup5\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2021:2031  token.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2055:2078  IERC20.approve.selector */\n      shl(0xe0, 0x095ea7b3)\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2080:2082  to */\n      dup6\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2084:2089  value */\n      dup6\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2032:2090  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2021:2091  token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_198:\n      0x20\n      dup4\n      lt\n      tag_200\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      0x20\n      dup4\n      sub\n      swap3\n      pop\n      jump(tag_198)\n    tag_200:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_203\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_202)\n    tag_203:\n      0x60\n      swap2\n      pop\n    tag_202:\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1985:2091  (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2109:2116  success */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2109:2166  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_204\n      jumpi\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2136:2137  0 */\n      0x00\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2125  data */\n      dup2\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2132  data.length */\n      mload\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2137  data.length == 0 */\n      eq\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2165  data.length == 0 || abi.decode(data, (bool)) */\n      dup1\n      tag_205\n      jumpi\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2152:2156  data */\n      dup1\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2141:2165  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_206\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_206:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2121:2165  data.length == 0 || abi.decode(data, (bool)) */\n    tag_205:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2109:2166  success && (data.length == 0 || abi.decode(data, (bool))) */\n    tag_204:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":2101:2173  require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA') */\n      tag_207\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x02\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5341000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_207:\n        /* \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":1873:2180  function safeApprove(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10686:10778  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } */\n    tag_175:\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_136:\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n    tag_158:\n      mload(0x40)\n      dup1\n      0x0140\n      add\n      0x40\n      mstore\n      dup1\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      signextend(0x02, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      signextend(0x02, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_210:\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_212\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_213\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":59:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:295   */\n    tag_214:\n      0x00\n        /* \"#utility.yul\":240:246   */\n      dup2\n        /* \"#utility.yul\":234:247   */\n      mload\n        /* \"#utility.yul\":225:247   */\n      swap1\n      pop\n        /* \"#utility.yul\":256:289   */\n      tag_216\n        /* \"#utility.yul\":283:288   */\n      dup2\n        /* \"#utility.yul\":256:289   */\n      tag_217\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":215:295   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":301:440   */\n    tag_218:\n      0x00\n        /* \"#utility.yul\":385:391   */\n      dup2\n        /* \"#utility.yul\":372:392   */\n      calldataload\n        /* \"#utility.yul\":363:392   */\n      swap1\n      pop\n        /* \"#utility.yul\":401:434   */\n      tag_220\n        /* \"#utility.yul\":428:433   */\n      dup2\n        /* \"#utility.yul\":401:434   */\n      tag_221\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":353:440   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":446:589   */\n    tag_222:\n      0x00\n        /* \"#utility.yul\":534:540   */\n      dup2\n        /* \"#utility.yul\":528:541   */\n      mload\n        /* \"#utility.yul\":519:541   */\n      swap1\n      pop\n        /* \"#utility.yul\":550:583   */\n      tag_224\n        /* \"#utility.yul\":577:582   */\n      dup2\n        /* \"#utility.yul\":550:583   */\n      tag_221\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":509:589   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":595:857   */\n    tag_57:\n      0x00\n        /* \"#utility.yul\":703:705   */\n      0x20\n        /* \"#utility.yul\":691:700   */\n      dup3\n        /* \"#utility.yul\":682:689   */\n      dup5\n        /* \"#utility.yul\":678:701   */\n      sub\n        /* \"#utility.yul\":674:706   */\n      slt\n        /* \"#utility.yul\":671:673   */\n      iszero\n      tag_226\n      jumpi\n        /* \"#utility.yul\":719:720   */\n      0x00\n        /* \"#utility.yul\":716:717   */\n      dup1\n        /* \"#utility.yul\":709:721   */\n      revert\n        /* \"#utility.yul\":671:673   */\n    tag_226:\n        /* \"#utility.yul\":762:763   */\n      0x00\n        /* \"#utility.yul\":787:840   */\n      tag_227\n        /* \"#utility.yul\":832:839   */\n      dup5\n        /* \"#utility.yul\":823:829   */\n      dup3\n        /* \"#utility.yul\":812:821   */\n      dup6\n        /* \"#utility.yul\":808:830   */\n      add\n        /* \"#utility.yul\":787:840   */\n      tag_210\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":777:840   */\n      swap2\n      pop\n        /* \"#utility.yul\":733:850   */\n      pop\n        /* \"#utility.yul\":661:857   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":863:1270   */\n    tag_73:\n      0x00\n      dup1\n        /* \"#utility.yul\":988:990   */\n      0x40\n        /* \"#utility.yul\":976:985   */\n      dup4\n        /* \"#utility.yul\":967:974   */\n      dup6\n        /* \"#utility.yul\":963:986   */\n      sub\n        /* \"#utility.yul\":959:991   */\n      slt\n        /* \"#utility.yul\":956:958   */\n      iszero\n      tag_229\n      jumpi\n        /* \"#utility.yul\":1004:1005   */\n      0x00\n        /* \"#utility.yul\":1001:1002   */\n      dup1\n        /* \"#utility.yul\":994:1006   */\n      revert\n        /* \"#utility.yul\":956:958   */\n    tag_229:\n        /* \"#utility.yul\":1047:1048   */\n      0x00\n        /* \"#utility.yul\":1072:1125   */\n      tag_230\n        /* \"#utility.yul\":1117:1124   */\n      dup6\n        /* \"#utility.yul\":1108:1114   */\n      dup3\n        /* \"#utility.yul\":1097:1106   */\n      dup7\n        /* \"#utility.yul\":1093:1115   */\n      add\n        /* \"#utility.yul\":1072:1125   */\n      tag_210\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":1062:1125   */\n      swap3\n      pop\n        /* \"#utility.yul\":1018:1135   */\n      pop\n        /* \"#utility.yul\":1174:1176   */\n      0x20\n        /* \"#utility.yul\":1200:1253   */\n      tag_231\n        /* \"#utility.yul\":1245:1252   */\n      dup6\n        /* \"#utility.yul\":1236:1242   */\n      dup3\n        /* \"#utility.yul\":1225:1234   */\n      dup7\n        /* \"#utility.yul\":1221:1243   */\n      add\n        /* \"#utility.yul\":1200:1253   */\n      tag_210\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":1190:1253   */\n      swap2\n      pop\n        /* \"#utility.yul\":1145:1263   */\n      pop\n        /* \"#utility.yul\":946:1270   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1276:1828   */\n    tag_44:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1418:1420   */\n      0x60\n        /* \"#utility.yul\":1406:1415   */\n      dup5\n        /* \"#utility.yul\":1397:1404   */\n      dup7\n        /* \"#utility.yul\":1393:1416   */\n      sub\n        /* \"#utility.yul\":1389:1421   */\n      slt\n        /* \"#utility.yul\":1386:1388   */\n      iszero\n      tag_233\n      jumpi\n        /* \"#utility.yul\":1434:1435   */\n      0x00\n        /* \"#utility.yul\":1431:1432   */\n      dup1\n        /* \"#utility.yul\":1424:1436   */\n      revert\n        /* \"#utility.yul\":1386:1388   */\n    tag_233:\n        /* \"#utility.yul\":1477:1478   */\n      0x00\n        /* \"#utility.yul\":1502:1555   */\n      tag_234\n        /* \"#utility.yul\":1547:1554   */\n      dup7\n        /* \"#utility.yul\":1538:1544   */\n      dup3\n        /* \"#utility.yul\":1527:1536   */\n      dup8\n        /* \"#utility.yul\":1523:1545   */\n      add\n        /* \"#utility.yul\":1502:1555   */\n      tag_210\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":1492:1555   */\n      swap4\n      pop\n        /* \"#utility.yul\":1448:1565   */\n      pop\n        /* \"#utility.yul\":1604:1606   */\n      0x20\n        /* \"#utility.yul\":1630:1683   */\n      tag_235\n        /* \"#utility.yul\":1675:1682   */\n      dup7\n        /* \"#utility.yul\":1666:1672   */\n      dup3\n        /* \"#utility.yul\":1655:1664   */\n      dup8\n        /* \"#utility.yul\":1651:1673   */\n      add\n        /* \"#utility.yul\":1630:1683   */\n      tag_210\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":1620:1683   */\n      swap3\n      pop\n        /* \"#utility.yul\":1575:1693   */\n      pop\n        /* \"#utility.yul\":1732:1734   */\n      0x40\n        /* \"#utility.yul\":1758:1811   */\n      tag_236\n        /* \"#utility.yul\":1803:1810   */\n      dup7\n        /* \"#utility.yul\":1794:1800   */\n      dup3\n        /* \"#utility.yul\":1783:1792   */\n      dup8\n        /* \"#utility.yul\":1779:1801   */\n      add\n        /* \"#utility.yul\":1758:1811   */\n      tag_218\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":1748:1811   */\n      swap2\n      pop\n        /* \"#utility.yul\":1703:1821   */\n      pop\n        /* \"#utility.yul\":1376:1828   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1834:2241   */\n    tag_31:\n      0x00\n      dup1\n        /* \"#utility.yul\":1959:1961   */\n      0x40\n        /* \"#utility.yul\":1947:1956   */\n      dup4\n        /* \"#utility.yul\":1938:1945   */\n      dup6\n        /* \"#utility.yul\":1934:1957   */\n      sub\n        /* \"#utility.yul\":1930:1962   */\n      slt\n        /* \"#utility.yul\":1927:1929   */\n      iszero\n      tag_238\n      jumpi\n        /* \"#utility.yul\":1975:1976   */\n      0x00\n        /* \"#utility.yul\":1972:1973   */\n      dup1\n        /* \"#utility.yul\":1965:1977   */\n      revert\n        /* \"#utility.yul\":1927:1929   */\n    tag_238:\n        /* \"#utility.yul\":2018:2019   */\n      0x00\n        /* \"#utility.yul\":2043:2096   */\n      tag_239\n        /* \"#utility.yul\":2088:2095   */\n      dup6\n        /* \"#utility.yul\":2079:2085   */\n      dup3\n        /* \"#utility.yul\":2068:2077   */\n      dup7\n        /* \"#utility.yul\":2064:2086   */\n      add\n        /* \"#utility.yul\":2043:2096   */\n      tag_210\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":2033:2096   */\n      swap3\n      pop\n        /* \"#utility.yul\":1989:2106   */\n      pop\n        /* \"#utility.yul\":2145:2147   */\n      0x20\n        /* \"#utility.yul\":2171:2224   */\n      tag_240\n        /* \"#utility.yul\":2216:2223   */\n      dup6\n        /* \"#utility.yul\":2207:2213   */\n      dup3\n        /* \"#utility.yul\":2196:2205   */\n      dup7\n        /* \"#utility.yul\":2192:2214   */\n      add\n        /* \"#utility.yul\":2171:2224   */\n      tag_218\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":2161:2224   */\n      swap2\n      pop\n        /* \"#utility.yul\":2116:2234   */\n      pop\n        /* \"#utility.yul\":1917:2241   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2247:2509   */\n    tag_82:\n      0x00\n        /* \"#utility.yul\":2355:2357   */\n      0x20\n        /* \"#utility.yul\":2343:2352   */\n      dup3\n        /* \"#utility.yul\":2334:2341   */\n      dup5\n        /* \"#utility.yul\":2330:2353   */\n      sub\n        /* \"#utility.yul\":2326:2358   */\n      slt\n        /* \"#utility.yul\":2323:2325   */\n      iszero\n      tag_242\n      jumpi\n        /* \"#utility.yul\":2371:2372   */\n      0x00\n        /* \"#utility.yul\":2368:2369   */\n      dup1\n        /* \"#utility.yul\":2361:2373   */\n      revert\n        /* \"#utility.yul\":2323:2325   */\n    tag_242:\n        /* \"#utility.yul\":2414:2415   */\n      0x00\n        /* \"#utility.yul\":2439:2492   */\n      tag_243\n        /* \"#utility.yul\":2484:2491   */\n      dup5\n        /* \"#utility.yul\":2475:2481   */\n      dup3\n        /* \"#utility.yul\":2464:2473   */\n      dup6\n        /* \"#utility.yul\":2460:2482   */\n      add\n        /* \"#utility.yul\":2439:2492   */\n      tag_218\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":2429:2492   */\n      swap2\n      pop\n        /* \"#utility.yul\":2385:2502   */\n      pop\n        /* \"#utility.yul\":2313:2509   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2515:2799   */\n    tag_144:\n      0x00\n        /* \"#utility.yul\":2634:2636   */\n      0x20\n        /* \"#utility.yul\":2622:2631   */\n      dup3\n        /* \"#utility.yul\":2613:2620   */\n      dup5\n        /* \"#utility.yul\":2609:2632   */\n      sub\n        /* \"#utility.yul\":2605:2637   */\n      slt\n        /* \"#utility.yul\":2602:2604   */\n      iszero\n      tag_245\n      jumpi\n        /* \"#utility.yul\":2650:2651   */\n      0x00\n        /* \"#utility.yul\":2647:2648   */\n      dup1\n        /* \"#utility.yul\":2640:2652   */\n      revert\n        /* \"#utility.yul\":2602:2604   */\n    tag_245:\n        /* \"#utility.yul\":2693:2694   */\n      0x00\n        /* \"#utility.yul\":2718:2782   */\n      tag_246\n        /* \"#utility.yul\":2774:2781   */\n      dup5\n        /* \"#utility.yul\":2765:2771   */\n      dup3\n        /* \"#utility.yul\":2754:2763   */\n      dup6\n        /* \"#utility.yul\":2750:2772   */\n      add\n        /* \"#utility.yul\":2718:2782   */\n      tag_222\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":2708:2782   */\n      swap2\n      pop\n        /* \"#utility.yul\":2664:2792   */\n      pop\n        /* \"#utility.yul\":2592:2799   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2805:3558   */\n    tag_166:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":2975:2978   */\n      0x80\n        /* \"#utility.yul\":2963:2972   */\n      dup6\n        /* \"#utility.yul\":2954:2961   */\n      dup8\n        /* \"#utility.yul\":2950:2973   */\n      sub\n        /* \"#utility.yul\":2946:2979   */\n      slt\n        /* \"#utility.yul\":2943:2945   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":2992:2993   */\n      0x00\n        /* \"#utility.yul\":2989:2990   */\n      dup1\n        /* \"#utility.yul\":2982:2994   */\n      revert\n        /* \"#utility.yul\":2943:2945   */\n    tag_248:\n        /* \"#utility.yul\":3035:3036   */\n      0x00\n        /* \"#utility.yul\":3060:3124   */\n      tag_249\n        /* \"#utility.yul\":3116:3123   */\n      dup8\n        /* \"#utility.yul\":3107:3113   */\n      dup3\n        /* \"#utility.yul\":3096:3105   */\n      dup9\n        /* \"#utility.yul\":3092:3114   */\n      add\n        /* \"#utility.yul\":3060:3124   */\n      tag_222\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":3050:3124   */\n      swap5\n      pop\n        /* \"#utility.yul\":3006:3134   */\n      pop\n        /* \"#utility.yul\":3173:3175   */\n      0x20\n        /* \"#utility.yul\":3199:3263   */\n      tag_250\n        /* \"#utility.yul\":3255:3262   */\n      dup8\n        /* \"#utility.yul\":3246:3252   */\n      dup3\n        /* \"#utility.yul\":3235:3244   */\n      dup9\n        /* \"#utility.yul\":3231:3253   */\n      add\n        /* \"#utility.yul\":3199:3263   */\n      tag_214\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":3189:3263   */\n      swap4\n      pop\n        /* \"#utility.yul\":3144:3273   */\n      pop\n        /* \"#utility.yul\":3312:3314   */\n      0x40\n        /* \"#utility.yul\":3338:3402   */\n      tag_251\n        /* \"#utility.yul\":3394:3401   */\n      dup8\n        /* \"#utility.yul\":3385:3391   */\n      dup3\n        /* \"#utility.yul\":3374:3383   */\n      dup9\n        /* \"#utility.yul\":3370:3392   */\n      add\n        /* \"#utility.yul\":3338:3402   */\n      tag_222\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":3328:3402   */\n      swap3\n      pop\n        /* \"#utility.yul\":3283:3412   */\n      pop\n        /* \"#utility.yul\":3451:3453   */\n      0x60\n        /* \"#utility.yul\":3477:3541   */\n      tag_252\n        /* \"#utility.yul\":3533:3540   */\n      dup8\n        /* \"#utility.yul\":3524:3530   */\n      dup3\n        /* \"#utility.yul\":3513:3522   */\n      dup9\n        /* \"#utility.yul\":3509:3531   */\n      add\n        /* \"#utility.yul\":3477:3541   */\n      tag_222\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":3467:3541   */\n      swap2\n      pop\n        /* \"#utility.yul\":3422:3551   */\n      pop\n        /* \"#utility.yul\":2933:3558   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3564:3672   */\n    tag_253:\n        /* \"#utility.yul\":3641:3665   */\n      tag_255\n        /* \"#utility.yul\":3659:3664   */\n      dup2\n        /* \"#utility.yul\":3641:3665   */\n      tag_256\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":3636:3639   */\n      dup3\n        /* \"#utility.yul\":3629:3666   */\n      mstore\n        /* \"#utility.yul\":3619:3672   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3678:3796   */\n    tag_257:\n        /* \"#utility.yul\":3765:3789   */\n      tag_259\n        /* \"#utility.yul\":3783:3788   */\n      dup2\n        /* \"#utility.yul\":3765:3789   */\n      tag_256\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":3760:3763   */\n      dup3\n        /* \"#utility.yul\":3753:3790   */\n      mstore\n        /* \"#utility.yul\":3743:3796   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3802:3911   */\n    tag_260:\n        /* \"#utility.yul\":3883:3904   */\n      tag_262\n        /* \"#utility.yul\":3898:3903   */\n      dup2\n        /* \"#utility.yul\":3883:3904   */\n      tag_263\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":3878:3881   */\n      dup3\n        /* \"#utility.yul\":3871:3905   */\n      mstore\n        /* \"#utility.yul\":3861:3911   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3917:4019   */\n    tag_264:\n        /* \"#utility.yul\":3990:4012   */\n      tag_266\n        /* \"#utility.yul\":4006:4011   */\n      dup2\n        /* \"#utility.yul\":3990:4012   */\n      tag_267\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":3985:3988   */\n      dup3\n        /* \"#utility.yul\":3978:4013   */\n      mstore\n        /* \"#utility.yul\":3968:4019   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4025:4389   */\n    tag_268:\n      0x00\n        /* \"#utility.yul\":4141:4180   */\n      tag_270\n        /* \"#utility.yul\":4174:4179   */\n      dup3\n        /* \"#utility.yul\":4141:4180   */\n      tag_271\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":4196:4267   */\n      tag_272\n        /* \"#utility.yul\":4260:4266   */\n      dup2\n        /* \"#utility.yul\":4255:4258   */\n      dup6\n        /* \"#utility.yul\":4196:4267   */\n      tag_273\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":4189:4267   */\n      swap4\n      pop\n        /* \"#utility.yul\":4276:4328   */\n      tag_274\n        /* \"#utility.yul\":4321:4327   */\n      dup2\n        /* \"#utility.yul\":4316:4319   */\n      dup6\n        /* \"#utility.yul\":4309:4313   */\n      0x20\n        /* \"#utility.yul\":4302:4307   */\n      dup7\n        /* \"#utility.yul\":4298:4314   */\n      add\n        /* \"#utility.yul\":4276:4328   */\n      tag_275\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":4353:4382   */\n      tag_276\n        /* \"#utility.yul\":4375:4381   */\n      dup2\n        /* \"#utility.yul\":4353:4382   */\n      tag_277\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":4348:4351   */\n      dup5\n        /* \"#utility.yul\":4344:4383   */\n      add\n        /* \"#utility.yul\":4337:4383   */\n      swap2\n      pop\n        /* \"#utility.yul\":4117:4389   */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4395:4764   */\n    tag_278:\n      0x00\n        /* \"#utility.yul\":4558:4625   */\n      tag_280\n        /* \"#utility.yul\":4622:4624   */\n      0x25\n        /* \"#utility.yul\":4617:4620   */\n      dup4\n        /* \"#utility.yul\":4558:4625   */\n      tag_273\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":4551:4625   */\n      swap2\n      pop\n        /* \"#utility.yul\":4655:4689   */\n      0x436f6e74726163742068617320616c7265616479206265656e20696e69746961\n        /* \"#utility.yul\":4651:4652   */\n      0x00\n        /* \"#utility.yul\":4646:4649   */\n      dup4\n        /* \"#utility.yul\":4642:4653   */\n      add\n        /* \"#utility.yul\":4635:4690   */\n      mstore\n        /* \"#utility.yul\":4721:4728   */\n      0x6c697a6564000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4716:4718   */\n      0x20\n        /* \"#utility.yul\":4711:4714   */\n      dup4\n        /* \"#utility.yul\":4707:4719   */\n      add\n        /* \"#utility.yul\":4700:4729   */\n      mstore\n        /* \"#utility.yul\":4755:4757   */\n      0x40\n        /* \"#utility.yul\":4750:4753   */\n      dup3\n        /* \"#utility.yul\":4746:4758   */\n      add\n        /* \"#utility.yul\":4739:4758   */\n      swap1\n      pop\n        /* \"#utility.yul\":4541:4764   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4770:5100   */\n    tag_281:\n      0x00\n        /* \"#utility.yul\":4933:5000   */\n      tag_283\n        /* \"#utility.yul\":4997:4999   */\n      0x20\n        /* \"#utility.yul\":4992:4995   */\n      dup4\n        /* \"#utility.yul\":4933:5000   */\n      tag_273\n      jump\t// in\n    tag_283:\n        /* \"#utility.yul\":4926:5000   */\n      swap2\n      pop\n        /* \"#utility.yul\":5030:5064   */\n      0x4d7573742062652063616c6c656420627920636f6e74726163742061646d696e\n        /* \"#utility.yul\":5026:5027   */\n      0x00\n        /* \"#utility.yul\":5021:5024   */\n      dup4\n        /* \"#utility.yul\":5017:5028   */\n      add\n        /* \"#utility.yul\":5010:5065   */\n      mstore\n        /* \"#utility.yul\":5091:5093   */\n      0x20\n        /* \"#utility.yul\":5086:5089   */\n      dup3\n        /* \"#utility.yul\":5082:5094   */\n      add\n        /* \"#utility.yul\":5075:5094   */\n      swap1\n      pop\n        /* \"#utility.yul\":4916:5100   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5212:6661   */\n    tag_284:\n        /* \"#utility.yul\":5389:5393   */\n      0xe0\n        /* \"#utility.yul\":5384:5387   */\n      dup3\n        /* \"#utility.yul\":5380:5394   */\n      add\n        /* \"#utility.yul\":5479:5483   */\n      0x00\n        /* \"#utility.yul\":5472:5477   */\n      dup3\n        /* \"#utility.yul\":5468:5484   */\n      add\n        /* \"#utility.yul\":5462:5485   */\n      mload\n        /* \"#utility.yul\":5498:5561   */\n      tag_286\n        /* \"#utility.yul\":5555:5559   */\n      0x00\n        /* \"#utility.yul\":5550:5553   */\n      dup6\n        /* \"#utility.yul\":5546:5560   */\n      add\n        /* \"#utility.yul\":5532:5544   */\n      dup3\n        /* \"#utility.yul\":5498:5561   */\n      tag_253\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":5404:5571   */\n      pop\n        /* \"#utility.yul\":5657:5661   */\n      0x20\n        /* \"#utility.yul\":5650:5655   */\n      dup3\n        /* \"#utility.yul\":5646:5662   */\n      add\n        /* \"#utility.yul\":5640:5663   */\n      mload\n        /* \"#utility.yul\":5676:5739   */\n      tag_287\n        /* \"#utility.yul\":5733:5737   */\n      0x20\n        /* \"#utility.yul\":5728:5731   */\n      dup6\n        /* \"#utility.yul\":5724:5738   */\n      add\n        /* \"#utility.yul\":5710:5722   */\n      dup3\n        /* \"#utility.yul\":5676:5739   */\n      tag_253\n      jump\t// in\n    tag_287:\n        /* \"#utility.yul\":5581:5749   */\n      pop\n        /* \"#utility.yul\":5836:5840   */\n      0x40\n        /* \"#utility.yul\":5829:5834   */\n      dup3\n        /* \"#utility.yul\":5825:5841   */\n      add\n        /* \"#utility.yul\":5819:5842   */\n      mload\n        /* \"#utility.yul\":5855:5918   */\n      tag_288\n        /* \"#utility.yul\":5912:5916   */\n      0x40\n        /* \"#utility.yul\":5907:5910   */\n      dup6\n        /* \"#utility.yul\":5903:5917   */\n      add\n        /* \"#utility.yul\":5889:5901   */\n      dup3\n        /* \"#utility.yul\":5855:5918   */\n      tag_253\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":5759:5928   */\n      pop\n        /* \"#utility.yul\":6014:6018   */\n      0x60\n        /* \"#utility.yul\":6007:6012   */\n      dup3\n        /* \"#utility.yul\":6003:6019   */\n      add\n        /* \"#utility.yul\":5997:6020   */\n      mload\n        /* \"#utility.yul\":6033:6096   */\n      tag_289\n        /* \"#utility.yul\":6090:6094   */\n      0x60\n        /* \"#utility.yul\":6085:6088   */\n      dup6\n        /* \"#utility.yul\":6081:6095   */\n      add\n        /* \"#utility.yul\":6067:6079   */\n      dup3\n        /* \"#utility.yul\":6033:6096   */\n      tag_290\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":5938:6106   */\n      pop\n        /* \"#utility.yul\":6192:6196   */\n      0x80\n        /* \"#utility.yul\":6185:6190   */\n      dup3\n        /* \"#utility.yul\":6181:6197   */\n      add\n        /* \"#utility.yul\":6175:6198   */\n      mload\n        /* \"#utility.yul\":6211:6274   */\n      tag_291\n        /* \"#utility.yul\":6268:6272   */\n      0x80\n        /* \"#utility.yul\":6263:6266   */\n      dup6\n        /* \"#utility.yul\":6259:6273   */\n      add\n        /* \"#utility.yul\":6245:6257   */\n      dup3\n        /* \"#utility.yul\":6211:6274   */\n      tag_290\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":6116:6284   */\n      pop\n        /* \"#utility.yul\":6378:6382   */\n      0xa0\n        /* \"#utility.yul\":6371:6376   */\n      dup3\n        /* \"#utility.yul\":6367:6383   */\n      add\n        /* \"#utility.yul\":6361:6384   */\n      mload\n        /* \"#utility.yul\":6397:6460   */\n      tag_292\n        /* \"#utility.yul\":6454:6458   */\n      0xa0\n        /* \"#utility.yul\":6449:6452   */\n      dup6\n        /* \"#utility.yul\":6445:6459   */\n      add\n        /* \"#utility.yul\":6431:6443   */\n      dup3\n        /* \"#utility.yul\":6397:6460   */\n      tag_290\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":6294:6470   */\n      pop\n        /* \"#utility.yul\":6562:6566   */\n      0xc0\n        /* \"#utility.yul\":6555:6560   */\n      dup3\n        /* \"#utility.yul\":6551:6567   */\n      add\n        /* \"#utility.yul\":6545:6568   */\n      mload\n        /* \"#utility.yul\":6581:6644   */\n      tag_293\n        /* \"#utility.yul\":6638:6642   */\n      0xc0\n        /* \"#utility.yul\":6633:6636   */\n      dup6\n        /* \"#utility.yul\":6629:6643   */\n      add\n        /* \"#utility.yul\":6615:6627   */\n      dup3\n        /* \"#utility.yul\":6581:6644   */\n      tag_294\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":6480:6654   */\n      pop\n        /* \"#utility.yul\":5358:6661   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6753:8715   */\n    tag_295:\n        /* \"#utility.yul\":6906:6912   */\n      0x0140\n        /* \"#utility.yul\":6901:6904   */\n      dup3\n        /* \"#utility.yul\":6897:6913   */\n      add\n        /* \"#utility.yul\":6997:7001   */\n      0x00\n        /* \"#utility.yul\":6990:6995   */\n      dup3\n        /* \"#utility.yul\":6986:7002   */\n      add\n        /* \"#utility.yul\":6980:7003   */\n      mload\n        /* \"#utility.yul\":7016:7079   */\n      tag_297\n        /* \"#utility.yul\":7073:7077   */\n      0x00\n        /* \"#utility.yul\":7068:7071   */\n      dup6\n        /* \"#utility.yul\":7064:7078   */\n      add\n        /* \"#utility.yul\":7050:7062   */\n      dup3\n        /* \"#utility.yul\":7016:7079   */\n      tag_253\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":6923:7089   */\n      pop\n        /* \"#utility.yul\":7173:7177   */\n      0x20\n        /* \"#utility.yul\":7166:7171   */\n      dup3\n        /* \"#utility.yul\":7162:7178   */\n      add\n        /* \"#utility.yul\":7156:7179   */\n      mload\n        /* \"#utility.yul\":7192:7255   */\n      tag_298\n        /* \"#utility.yul\":7249:7253   */\n      0x20\n        /* \"#utility.yul\":7244:7247   */\n      dup6\n        /* \"#utility.yul\":7240:7254   */\n      add\n        /* \"#utility.yul\":7226:7238   */\n      dup3\n        /* \"#utility.yul\":7192:7255   */\n      tag_253\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":7099:7265   */\n      pop\n        /* \"#utility.yul\":7352:7356   */\n      0x40\n        /* \"#utility.yul\":7345:7350   */\n      dup3\n        /* \"#utility.yul\":7341:7357   */\n      add\n        /* \"#utility.yul\":7335:7358   */\n      mload\n        /* \"#utility.yul\":7371:7430   */\n      tag_299\n        /* \"#utility.yul\":7424:7428   */\n      0x40\n        /* \"#utility.yul\":7419:7422   */\n      dup6\n        /* \"#utility.yul\":7415:7429   */\n      add\n        /* \"#utility.yul\":7401:7413   */\n      dup3\n        /* \"#utility.yul\":7371:7430   */\n      tag_264\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":7275:7440   */\n      pop\n        /* \"#utility.yul\":7527:7531   */\n      0x60\n        /* \"#utility.yul\":7520:7525   */\n      dup3\n        /* \"#utility.yul\":7516:7532   */\n      add\n        /* \"#utility.yul\":7510:7533   */\n      mload\n        /* \"#utility.yul\":7546:7605   */\n      tag_300\n        /* \"#utility.yul\":7599:7603   */\n      0x60\n        /* \"#utility.yul\":7594:7597   */\n      dup6\n        /* \"#utility.yul\":7590:7604   */\n      add\n        /* \"#utility.yul\":7576:7588   */\n      dup3\n        /* \"#utility.yul\":7546:7605   */\n      tag_264\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":7450:7615   */\n      pop\n        /* \"#utility.yul\":7707:7711   */\n      0x80\n        /* \"#utility.yul\":7700:7705   */\n      dup3\n        /* \"#utility.yul\":7696:7712   */\n      add\n        /* \"#utility.yul\":7690:7713   */\n      mload\n        /* \"#utility.yul\":7726:7789   */\n      tag_301\n        /* \"#utility.yul\":7783:7787   */\n      0x80\n        /* \"#utility.yul\":7778:7781   */\n      dup6\n        /* \"#utility.yul\":7774:7788   */\n      add\n        /* \"#utility.yul\":7760:7772   */\n      dup3\n        /* \"#utility.yul\":7726:7789   */\n      tag_290\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":7625:7799   */\n      pop\n        /* \"#utility.yul\":7891:7895   */\n      0xa0\n        /* \"#utility.yul\":7884:7889   */\n      dup3\n        /* \"#utility.yul\":7880:7896   */\n      add\n        /* \"#utility.yul\":7874:7897   */\n      mload\n        /* \"#utility.yul\":7910:7973   */\n      tag_302\n        /* \"#utility.yul\":7967:7971   */\n      0xa0\n        /* \"#utility.yul\":7962:7965   */\n      dup6\n        /* \"#utility.yul\":7958:7972   */\n      add\n        /* \"#utility.yul\":7944:7956   */\n      dup3\n        /* \"#utility.yul\":7910:7973   */\n      tag_290\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":7809:7983   */\n      pop\n        /* \"#utility.yul\":8071:8075   */\n      0xc0\n        /* \"#utility.yul\":8064:8069   */\n      dup3\n        /* \"#utility.yul\":8060:8076   */\n      add\n        /* \"#utility.yul\":8054:8077   */\n      mload\n        /* \"#utility.yul\":8090:8153   */\n      tag_303\n        /* \"#utility.yul\":8147:8151   */\n      0xc0\n        /* \"#utility.yul\":8142:8145   */\n      dup6\n        /* \"#utility.yul\":8138:8152   */\n      add\n        /* \"#utility.yul\":8124:8136   */\n      dup3\n        /* \"#utility.yul\":8090:8153   */\n      tag_290\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":7993:8163   */\n      pop\n        /* \"#utility.yul\":8251:8255   */\n      0xe0\n        /* \"#utility.yul\":8244:8249   */\n      dup3\n        /* \"#utility.yul\":8240:8256   */\n      add\n        /* \"#utility.yul\":8234:8257   */\n      mload\n        /* \"#utility.yul\":8270:8333   */\n      tag_304\n        /* \"#utility.yul\":8327:8331   */\n      0xe0\n        /* \"#utility.yul\":8322:8325   */\n      dup6\n        /* \"#utility.yul\":8318:8332   */\n      add\n        /* \"#utility.yul\":8304:8316   */\n      dup3\n        /* \"#utility.yul\":8270:8333   */\n      tag_290\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":8173:8343   */\n      pop\n        /* \"#utility.yul\":8430:8436   */\n      0x0100\n        /* \"#utility.yul\":8423:8428   */\n      dup3\n        /* \"#utility.yul\":8419:8437   */\n      add\n        /* \"#utility.yul\":8413:8438   */\n      mload\n        /* \"#utility.yul\":8451:8516   */\n      tag_305\n        /* \"#utility.yul\":8508:8514   */\n      0x0100\n        /* \"#utility.yul\":8503:8506   */\n      dup6\n        /* \"#utility.yul\":8499:8515   */\n      add\n        /* \"#utility.yul\":8485:8497   */\n      dup3\n        /* \"#utility.yul\":8451:8516   */\n      tag_253\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":8353:8526   */\n      pop\n        /* \"#utility.yul\":8612:8618   */\n      0x0120\n        /* \"#utility.yul\":8605:8610   */\n      dup3\n        /* \"#utility.yul\":8601:8619   */\n      add\n        /* \"#utility.yul\":8595:8620   */\n      mload\n        /* \"#utility.yul\":8633:8698   */\n      tag_306\n        /* \"#utility.yul\":8690:8696   */\n      0x0120\n        /* \"#utility.yul\":8685:8688   */\n      dup6\n        /* \"#utility.yul\":8681:8697   */\n      add\n        /* \"#utility.yul\":8667:8679   */\n      dup3\n        /* \"#utility.yul\":8633:8698   */\n      tag_290\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":8536:8708   */\n      pop\n        /* \"#utility.yul\":6875:8715   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8721:8829   */\n    tag_294:\n        /* \"#utility.yul\":8798:8822   */\n      tag_308\n        /* \"#utility.yul\":8816:8821   */\n      dup2\n        /* \"#utility.yul\":8798:8822   */\n      tag_309\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":8793:8796   */\n      dup3\n        /* \"#utility.yul\":8786:8823   */\n      mstore\n        /* \"#utility.yul\":8776:8829   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8835:8950   */\n    tag_310:\n        /* \"#utility.yul\":8920:8943   */\n      tag_312\n        /* \"#utility.yul\":8937:8942   */\n      dup2\n        /* \"#utility.yul\":8920:8943   */\n      tag_313\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":8915:8918   */\n      dup3\n        /* \"#utility.yul\":8908:8944   */\n      mstore\n        /* \"#utility.yul\":8898:8950   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8956:9064   */\n    tag_290:\n        /* \"#utility.yul\":9033:9057   */\n      tag_315\n        /* \"#utility.yul\":9051:9056   */\n      dup2\n        /* \"#utility.yul\":9033:9057   */\n      tag_316\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":9028:9031   */\n      dup3\n        /* \"#utility.yul\":9021:9058   */\n      mstore\n        /* \"#utility.yul\":9011:9064   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9070:9188   */\n    tag_317:\n        /* \"#utility.yul\":9157:9181   */\n      tag_319\n        /* \"#utility.yul\":9175:9180   */\n      dup2\n        /* \"#utility.yul\":9157:9181   */\n      tag_316\n      jump\t// in\n    tag_319:\n        /* \"#utility.yul\":9152:9155   */\n      dup3\n        /* \"#utility.yul\":9145:9182   */\n      mstore\n        /* \"#utility.yul\":9135:9188   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9194:9306   */\n    tag_320:\n        /* \"#utility.yul\":9277:9299   */\n      tag_322\n        /* \"#utility.yul\":9293:9298   */\n      dup2\n        /* \"#utility.yul\":9277:9299   */\n      tag_323\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":9272:9275   */\n      dup3\n        /* \"#utility.yul\":9265:9300   */\n      mstore\n        /* \"#utility.yul\":9255:9306   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9312:9534   */\n    tag_79:\n      0x00\n        /* \"#utility.yul\":9443:9445   */\n      0x20\n        /* \"#utility.yul\":9432:9441   */\n      dup3\n        /* \"#utility.yul\":9428:9446   */\n      add\n        /* \"#utility.yul\":9420:9446   */\n      swap1\n      pop\n        /* \"#utility.yul\":9456:9527   */\n      tag_325\n        /* \"#utility.yul\":9524:9525   */\n      0x00\n        /* \"#utility.yul\":9513:9522   */\n      dup4\n        /* \"#utility.yul\":9509:9526   */\n      add\n        /* \"#utility.yul\":9500:9506   */\n      dup5\n        /* \"#utility.yul\":9456:9527   */\n      tag_257\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":9410:9534   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9540:9750   */\n    tag_34:\n      0x00\n        /* \"#utility.yul\":9665:9667   */\n      0x20\n        /* \"#utility.yul\":9654:9663   */\n      dup3\n        /* \"#utility.yul\":9650:9668   */\n      add\n        /* \"#utility.yul\":9642:9668   */\n      swap1\n      pop\n        /* \"#utility.yul\":9678:9743   */\n      tag_327\n        /* \"#utility.yul\":9740:9741   */\n      0x00\n        /* \"#utility.yul\":9729:9738   */\n      dup4\n        /* \"#utility.yul\":9725:9742   */\n      add\n        /* \"#utility.yul\":9716:9722   */\n      dup5\n        /* \"#utility.yul\":9678:9743   */\n      tag_260\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":9632:9750   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9756:10069   */\n    tag_24:\n      0x00\n        /* \"#utility.yul\":9907:9909   */\n      0x20\n        /* \"#utility.yul\":9896:9905   */\n      dup3\n        /* \"#utility.yul\":9892:9910   */\n      add\n        /* \"#utility.yul\":9884:9910   */\n      swap1\n      pop\n        /* \"#utility.yul\":9956:9965   */\n      dup2\n        /* \"#utility.yul\":9950:9954   */\n      dup2\n        /* \"#utility.yul\":9946:9966   */\n      sub\n        /* \"#utility.yul\":9942:9943   */\n      0x00\n        /* \"#utility.yul\":9931:9940   */\n      dup4\n        /* \"#utility.yul\":9927:9944   */\n      add\n        /* \"#utility.yul\":9920:9967   */\n      mstore\n        /* \"#utility.yul\":9984:10062   */\n      tag_329\n        /* \"#utility.yul\":10057:10061   */\n      dup2\n        /* \"#utility.yul\":10048:10054   */\n      dup5\n        /* \"#utility.yul\":9984:10062   */\n      tag_268\n      jump\t// in\n    tag_329:\n        /* \"#utility.yul\":9976:10062   */\n      swap1\n      pop\n        /* \"#utility.yul\":9874:10069   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10075:10494   */\n    tag_129:\n      0x00\n        /* \"#utility.yul\":10279:10281   */\n      0x20\n        /* \"#utility.yul\":10268:10277   */\n      dup3\n        /* \"#utility.yul\":10264:10282   */\n      add\n        /* \"#utility.yul\":10256:10282   */\n      swap1\n      pop\n        /* \"#utility.yul\":10328:10337   */\n      dup2\n        /* \"#utility.yul\":10322:10326   */\n      dup2\n        /* \"#utility.yul\":10318:10338   */\n      sub\n        /* \"#utility.yul\":10314:10315   */\n      0x00\n        /* \"#utility.yul\":10303:10312   */\n      dup4\n        /* \"#utility.yul\":10299:10316   */\n      add\n        /* \"#utility.yul\":10292:10339   */\n      mstore\n        /* \"#utility.yul\":10356:10487   */\n      tag_331\n        /* \"#utility.yul\":10482:10486   */\n      dup2\n        /* \"#utility.yul\":10356:10487   */\n      tag_278\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":10348:10487   */\n      swap1\n      pop\n        /* \"#utility.yul\":10246:10494   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10500:10919   */\n    tag_126:\n      0x00\n        /* \"#utility.yul\":10704:10706   */\n      0x20\n        /* \"#utility.yul\":10693:10702   */\n      dup3\n        /* \"#utility.yul\":10689:10707   */\n      add\n        /* \"#utility.yul\":10681:10707   */\n      swap1\n      pop\n        /* \"#utility.yul\":10753:10762   */\n      dup2\n        /* \"#utility.yul\":10747:10751   */\n      dup2\n        /* \"#utility.yul\":10743:10763   */\n      sub\n        /* \"#utility.yul\":10739:10740   */\n      0x00\n        /* \"#utility.yul\":10728:10737   */\n      dup4\n        /* \"#utility.yul\":10724:10741   */\n      add\n        /* \"#utility.yul\":10717:10764   */\n      mstore\n        /* \"#utility.yul\":10781:10912   */\n      tag_333\n        /* \"#utility.yul\":10907:10911   */\n      dup2\n        /* \"#utility.yul\":10781:10912   */\n      tag_281\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":10773:10912   */\n      swap1\n      pop\n        /* \"#utility.yul\":10671:10919   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10925:11308   */\n    tag_139:\n      0x00\n        /* \"#utility.yul\":11136:11139   */\n      0xe0\n        /* \"#utility.yul\":11125:11134   */\n      dup3\n        /* \"#utility.yul\":11121:11140   */\n      add\n        /* \"#utility.yul\":11113:11140   */\n      swap1\n      pop\n        /* \"#utility.yul\":11150:11301   */\n      tag_335\n        /* \"#utility.yul\":11298:11299   */\n      0x00\n        /* \"#utility.yul\":11287:11296   */\n      dup4\n        /* \"#utility.yul\":11283:11300   */\n      add\n        /* \"#utility.yul\":11274:11280   */\n      dup5\n        /* \"#utility.yul\":11150:11301   */\n      tag_284\n      jump\t// in\n    tag_335:\n        /* \"#utility.yul\":11103:11308   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11314:11649   */\n    tag_161:\n      0x00\n        /* \"#utility.yul\":11501:11504   */\n      0x0140\n        /* \"#utility.yul\":11490:11499   */\n      dup3\n        /* \"#utility.yul\":11486:11505   */\n      add\n        /* \"#utility.yul\":11478:11505   */\n      swap1\n      pop\n        /* \"#utility.yul\":11515:11642   */\n      tag_337\n        /* \"#utility.yul\":11639:11640   */\n      0x00\n        /* \"#utility.yul\":11628:11637   */\n      dup4\n        /* \"#utility.yul\":11624:11641   */\n      add\n        /* \"#utility.yul\":11615:11621   */\n      dup5\n        /* \"#utility.yul\":11515:11642   */\n      tag_295\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":11468:11649   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11655:11873   */\n    tag_28:\n      0x00\n        /* \"#utility.yul\":11784:11786   */\n      0x20\n        /* \"#utility.yul\":11773:11782   */\n      dup3\n        /* \"#utility.yul\":11769:11787   */\n      add\n        /* \"#utility.yul\":11761:11787   */\n      swap1\n      pop\n        /* \"#utility.yul\":11797:11866   */\n      tag_339\n        /* \"#utility.yul\":11863:11864   */\n      0x00\n        /* \"#utility.yul\":11852:11861   */\n      dup4\n        /* \"#utility.yul\":11848:11865   */\n      add\n        /* \"#utility.yul\":11839:11845   */\n      dup5\n        /* \"#utility.yul\":11797:11866   */\n      tag_310\n      jump\t// in\n    tag_339:\n        /* \"#utility.yul\":11751:11873   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11879:12101   */\n    tag_41:\n      0x00\n        /* \"#utility.yul\":12010:12012   */\n      0x20\n        /* \"#utility.yul\":11999:12008   */\n      dup3\n        /* \"#utility.yul\":11995:12013   */\n      add\n        /* \"#utility.yul\":11987:12013   */\n      swap1\n      pop\n        /* \"#utility.yul\":12023:12094   */\n      tag_341\n        /* \"#utility.yul\":12091:12092   */\n      0x00\n        /* \"#utility.yul\":12080:12089   */\n      dup4\n        /* \"#utility.yul\":12076:12093   */\n      add\n        /* \"#utility.yul\":12067:12073   */\n      dup5\n        /* \"#utility.yul\":12023:12094   */\n      tag_317\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":11977:12101   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12107:12321   */\n    tag_50:\n      0x00\n        /* \"#utility.yul\":12234:12236   */\n      0x20\n        /* \"#utility.yul\":12223:12232   */\n      dup3\n        /* \"#utility.yul\":12219:12237   */\n      add\n        /* \"#utility.yul\":12211:12237   */\n      swap1\n      pop\n        /* \"#utility.yul\":12247:12314   */\n      tag_343\n        /* \"#utility.yul\":12311:12312   */\n      0x00\n        /* \"#utility.yul\":12300:12309   */\n      dup4\n        /* \"#utility.yul\":12296:12313   */\n      add\n        /* \"#utility.yul\":12287:12293   */\n      dup5\n        /* \"#utility.yul\":12247:12314   */\n      tag_320\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":12201:12321   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12327:12426   */\n    tag_271:\n      0x00\n        /* \"#utility.yul\":12413:12418   */\n      dup2\n        /* \"#utility.yul\":12407:12419   */\n      mload\n        /* \"#utility.yul\":12397:12419   */\n      swap1\n      pop\n        /* \"#utility.yul\":12386:12426   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12432:12601   */\n    tag_273:\n      0x00\n        /* \"#utility.yul\":12550:12556   */\n      dup3\n        /* \"#utility.yul\":12545:12548   */\n      dup3\n        /* \"#utility.yul\":12538:12557   */\n      mstore\n        /* \"#utility.yul\":12590:12594   */\n      0x20\n        /* \"#utility.yul\":12585:12588   */\n      dup3\n        /* \"#utility.yul\":12581:12595   */\n      add\n        /* \"#utility.yul\":12566:12595   */\n      swap1\n      pop\n        /* \"#utility.yul\":12528:12601   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12607:12703   */\n    tag_256:\n      0x00\n        /* \"#utility.yul\":12673:12697   */\n      tag_347\n        /* \"#utility.yul\":12691:12696   */\n      dup3\n        /* \"#utility.yul\":12673:12697   */\n      tag_309\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":12662:12697   */\n      swap1\n      pop\n        /* \"#utility.yul\":12652:12703   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12709:12799   */\n    tag_263:\n      0x00\n        /* \"#utility.yul\":12786:12791   */\n      dup2\n        /* \"#utility.yul\":12779:12792   */\n      iszero\n        /* \"#utility.yul\":12772:12793   */\n      iszero\n        /* \"#utility.yul\":12761:12793   */\n      swap1\n      pop\n        /* \"#utility.yul\":12751:12799   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12805:12895   */\n    tag_267:\n      0x00\n        /* \"#utility.yul\":12883:12888   */\n      dup2\n        /* \"#utility.yul\":12880:12881   */\n      0x02\n        /* \"#utility.yul\":12869:12889   */\n      signextend\n        /* \"#utility.yul\":12858:12889   */\n      swap1\n      pop\n        /* \"#utility.yul\":12848:12895   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12901:13019   */\n    tag_350:\n      0x00\n        /* \"#utility.yul\":12978:13012   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":12971:12976   */\n      dup3\n        /* \"#utility.yul\":12967:13013   */\n      and\n        /* \"#utility.yul\":12956:13013   */\n      swap1\n      pop\n        /* \"#utility.yul\":12946:13019   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13025:13151   */\n    tag_309:\n      0x00\n        /* \"#utility.yul\":13102:13144   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":13095:13100   */\n      dup3\n        /* \"#utility.yul\":13091:13145   */\n      and\n        /* \"#utility.yul\":13080:13145   */\n      swap1\n      pop\n        /* \"#utility.yul\":13070:13151   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13157:13248   */\n    tag_313:\n      0x00\n        /* \"#utility.yul\":13233:13241   */\n      0xffffff\n        /* \"#utility.yul\":13226:13231   */\n      dup3\n        /* \"#utility.yul\":13222:13242   */\n      and\n        /* \"#utility.yul\":13211:13242   */\n      swap1\n      pop\n        /* \"#utility.yul\":13201:13248   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13254:13331   */\n    tag_316:\n      0x00\n        /* \"#utility.yul\":13320:13325   */\n      dup2\n        /* \"#utility.yul\":13309:13325   */\n      swap1\n      pop\n        /* \"#utility.yul\":13299:13331   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13337:13423   */\n    tag_323:\n      0x00\n        /* \"#utility.yul\":13412:13416   */\n      0xff\n        /* \"#utility.yul\":13405:13410   */\n      dup3\n        /* \"#utility.yul\":13401:13417   */\n      and\n        /* \"#utility.yul\":13390:13417   */\n      swap1\n      pop\n        /* \"#utility.yul\":13380:13423   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13429:13736   */\n    tag_275:\n        /* \"#utility.yul\":13497:13498   */\n      0x00\n        /* \"#utility.yul\":13507:13620   */\n    tag_357:\n        /* \"#utility.yul\":13521:13527   */\n      dup4\n        /* \"#utility.yul\":13518:13519   */\n      dup2\n        /* \"#utility.yul\":13515:13528   */\n      lt\n        /* \"#utility.yul\":13507:13620   */\n      iszero\n      tag_359\n      jumpi\n        /* \"#utility.yul\":13606:13607   */\n      dup1\n        /* \"#utility.yul\":13601:13604   */\n      dup3\n        /* \"#utility.yul\":13597:13608   */\n      add\n        /* \"#utility.yul\":13591:13609   */\n      mload\n        /* \"#utility.yul\":13587:13588   */\n      dup2\n        /* \"#utility.yul\":13582:13585   */\n      dup5\n        /* \"#utility.yul\":13578:13589   */\n      add\n        /* \"#utility.yul\":13571:13610   */\n      mstore\n        /* \"#utility.yul\":13543:13545   */\n      0x20\n        /* \"#utility.yul\":13540:13541   */\n      dup2\n        /* \"#utility.yul\":13536:13546   */\n      add\n        /* \"#utility.yul\":13531:13546   */\n      swap1\n      pop\n        /* \"#utility.yul\":13507:13620   */\n      jump(tag_357)\n    tag_359:\n        /* \"#utility.yul\":13638:13644   */\n      dup4\n        /* \"#utility.yul\":13635:13636   */\n      dup2\n        /* \"#utility.yul\":13632:13645   */\n      gt\n        /* \"#utility.yul\":13629:13631   */\n      iszero\n      tag_360\n      jumpi\n        /* \"#utility.yul\":13718:13719   */\n      0x00\n        /* \"#utility.yul\":13709:13715   */\n      dup5\n        /* \"#utility.yul\":13704:13707   */\n      dup5\n        /* \"#utility.yul\":13700:13716   */\n      add\n        /* \"#utility.yul\":13693:13720   */\n      mstore\n        /* \"#utility.yul\":13629:13631   */\n    tag_360:\n        /* \"#utility.yul\":13478:13736   */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13742:13844   */\n    tag_277:\n      0x00\n        /* \"#utility.yul\":13834:13836   */\n      0x1f\n        /* \"#utility.yul\":13830:13837   */\n      not\n        /* \"#utility.yul\":13825:13827   */\n      0x1f\n        /* \"#utility.yul\":13818:13823   */\n      dup4\n        /* \"#utility.yul\":13814:13828   */\n      add\n        /* \"#utility.yul\":13810:13838   */\n      and\n        /* \"#utility.yul\":13800:13838   */\n      swap1\n      pop\n        /* \"#utility.yul\":13790:13844   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13850:13972   */\n    tag_213:\n        /* \"#utility.yul\":13923:13947   */\n      tag_363\n        /* \"#utility.yul\":13941:13946   */\n      dup2\n        /* \"#utility.yul\":13923:13947   */\n      tag_256\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":13916:13921   */\n      dup2\n        /* \"#utility.yul\":13913:13948   */\n      eq\n        /* \"#utility.yul\":13903:13905   */\n      tag_364\n      jumpi\n        /* \"#utility.yul\":13962:13963   */\n      0x00\n        /* \"#utility.yul\":13959:13960   */\n      dup1\n        /* \"#utility.yul\":13952:13964   */\n      revert\n        /* \"#utility.yul\":13903:13905   */\n    tag_364:\n        /* \"#utility.yul\":13893:13972   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13978:14100   */\n    tag_217:\n        /* \"#utility.yul\":14051:14075   */\n      tag_366\n        /* \"#utility.yul\":14069:14074   */\n      dup2\n        /* \"#utility.yul\":14051:14075   */\n      tag_350\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":14044:14049   */\n      dup2\n        /* \"#utility.yul\":14041:14076   */\n      eq\n        /* \"#utility.yul\":14031:14033   */\n      tag_367\n      jumpi\n        /* \"#utility.yul\":14090:14091   */\n      0x00\n        /* \"#utility.yul\":14087:14088   */\n      dup1\n        /* \"#utility.yul\":14080:14092   */\n      revert\n        /* \"#utility.yul\":14031:14033   */\n    tag_367:\n        /* \"#utility.yul\":14021:14100   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14106:14228   */\n    tag_221:\n        /* \"#utility.yul\":14179:14203   */\n      tag_369\n        /* \"#utility.yul\":14197:14202   */\n      dup2\n        /* \"#utility.yul\":14179:14203   */\n      tag_316\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":14172:14177   */\n      dup2\n        /* \"#utility.yul\":14169:14204   */\n      eq\n        /* \"#utility.yul\":14159:14161   */\n      tag_370\n      jumpi\n        /* \"#utility.yul\":14218:14219   */\n      0x00\n        /* \"#utility.yul\":14215:14216   */\n      dup1\n        /* \"#utility.yul\":14208:14220   */\n      revert\n        /* \"#utility.yul\":14159:14161   */\n    tag_370:\n        /* \"#utility.yul\":14149:14228   */\n      pop\n      jump\t// out\n    stop\n    data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f 45524332303a207472616e7366657220746f20746865207a65726f2061646472657373\n    data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029 45524332303a20617070726f766520746f20746865207a65726f2061646472657373\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea 45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373\n    data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208 45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa2646970667358221220da198d312af2344e713af94273152e102c4c89417f6055910a93a2406af9c74764736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x476F6C6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x474C440000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x96 SWAP3 SWAP2 SWAP1 PUSH3 0x130 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xAF SWAP3 SWAP2 SWAP1 PUSH3 0x130 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP CALLER PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x15 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x1E6 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x168 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x1B4 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x183 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1B4 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1B4 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1B3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x196 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x1C3 SWAP2 SWAP1 PUSH3 0x1C7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x1E2 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x1C8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x226B DUP1 PUSH3 0x1F6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0xF2E62772 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0xFE4B84DF EQ PUSH2 0x31C JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x26E JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x158EF93E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1D2 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x136 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x3DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12D SWAP2 SWAP1 PUSH2 0x1FB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x150 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14B SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16E PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17B SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18C PUSH2 0x411 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B7 SWAP2 SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH2 0x41B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DA PUSH2 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x1FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x205 SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x50B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x1A7D JUMP JUMPDEST PUSH2 0x5BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 PUSH2 0x606 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x1AA6 JUMP JUMPDEST PUSH2 0x793 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F5 SWAP2 SWAP1 PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x306 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x313 SWAP2 SWAP1 PUSH2 0x1EE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x336 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x331 SWAP2 SWAP1 PUSH2 0x1B6D JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBB8 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4 PUSH2 0x3ED PUSH2 0xED1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x428 DUP5 DUP5 DUP5 PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0x4E9 DUP5 PUSH2 0x434 PUSH2 0xED1 JUMP JUMPDEST PUSH2 0x4E4 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21A0 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x49A PUSH2 0xED1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1391 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B4 PUSH2 0x518 PUSH2 0xED1 JUMP JUMPDEST DUP5 PUSH2 0x5AF DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x529 PUSH2 0xED1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x144B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x69E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x673 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x69E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x681 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76B PUSH2 0x6B5 PUSH2 0xED1 JUMP JUMPDEST DUP5 PUSH2 0x766 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2211 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x6DF PUSH2 0xED1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1391 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x789 PUSH2 0x782 PUSH2 0xED1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C7 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x5 PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x926 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x91D SWAP1 PUSH2 0x1F3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x15 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x961 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 CALLER ADDRESS DUP5 PUSH2 0x14D3 JUMP JUMPDEST PUSH2 0x994 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 DUP4 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 DUP2 PUSH2 0x9A0 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x9AB PUSH2 0x18F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x8F3CF7AD23CD3CADBD9735AFF958023239C6A063 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP5 DUP2 PUSH2 0xA42 JUMPI INVALID JUMPDEST DIV DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC651188 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABB SWAP2 SWAP1 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB0D SWAP2 SWAP1 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH20 0x750E4C4984A9E0F12978EA6742BC1C5D248F40ED DUP3 PUSH1 0x20 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC651188 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBAA SWAP2 SWAP1 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBD8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBFC SWAP2 SWAP1 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH20 0xB0B195AEFA3650A6908F15CDAC7D92F8A5791B0B DUP4 PUSH1 0x20 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC651188 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC99 SWAP2 SWAP1 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCEB SWAP2 SWAP1 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH2 0xD20 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0x8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6 DUP8 PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0xD53 PUSH20 0x8F3CF7AD23CD3CADBD9735AFF958023239C6A063 PUSH20 0x8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6 DUP6 PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0xD5B PUSH2 0x198E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH20 0x8F3CF7AD23CD3CADBD9735AFF958023239C6A063 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x41052 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x45E72 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP9 DUP2 PUSH2 0xDEF JUMPI INVALID JUMPDEST DIV DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH20 0x8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9CC1A283 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE72 SWAP2 SWAP1 PUSH2 0x1F95 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEC4 SWAP2 SWAP1 PUSH2 0x1BBF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x21ED PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2158 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1156 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x21C8 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2135 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11E7 DUP4 DUP4 DUP4 PUSH2 0x18F4 JUMP JUMPDEST PUSH2 0x1252 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x217A PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1391 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x12E5 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x144B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x143E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1403 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13E8 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1430 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x14C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x15D2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x15AF JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1634 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1639 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1679 JUMPI POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1678 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP JUMPDEST JUMPDEST PUSH2 0x16EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5354460000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x17D4 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x17B1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1836 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x183B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x187B JUMPI POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x187A JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP JUMPDEST JUMPDEST PUSH2 0x18ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5341000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A38 DUP2 PUSH2 0x20EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1A4D DUP2 PUSH2 0x2106 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A62 DUP2 PUSH2 0x211D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1A77 DUP2 PUSH2 0x211D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1A9D DUP5 DUP3 DUP6 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1AC7 DUP6 DUP3 DUP7 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AD8 DUP6 DUP3 DUP7 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B05 DUP7 DUP3 DUP8 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B16 DUP7 DUP3 DUP8 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B27 DUP7 DUP3 DUP8 ADD PUSH2 0x1A53 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B52 DUP6 DUP3 DUP7 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B63 DUP6 DUP3 DUP7 ADD PUSH2 0x1A53 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B8D DUP5 DUP3 DUP6 ADD PUSH2 0x1A53 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BB6 DUP5 DUP3 DUP6 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BE3 DUP8 DUP3 DUP9 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1BF4 DUP8 DUP3 DUP9 ADD PUSH2 0x1A3E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1C05 DUP8 DUP3 DUP9 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1C16 DUP8 DUP3 DUP9 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x1C2B DUP2 PUSH2 0x201E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C3A DUP2 PUSH2 0x201E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C49 DUP2 PUSH2 0x2030 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C58 DUP2 PUSH2 0x203C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C69 DUP3 PUSH2 0x2002 JUMP JUMPDEST PUSH2 0x1C73 DUP2 DUP6 PUSH2 0x200D JUMP JUMPDEST SWAP4 POP PUSH2 0x1C83 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x20AB JUMP JUMPDEST PUSH2 0x1C8C DUP2 PUSH2 0x20DE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA4 PUSH1 0x25 DUP4 PUSH2 0x200D JUMP JUMPDEST SWAP2 POP PUSH32 0x436F6E74726163742068617320616C7265616479206265656E20696E69746961 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6C697A6564000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D0A PUSH1 0x20 DUP4 PUSH2 0x200D JUMP JUMPDEST SWAP2 POP PUSH32 0x4D7573742062652063616C6C656420627920636F6E74726163742061646D696E PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1D53 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1D66 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1D79 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1D8C PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1D9F PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1DB2 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x1DC5 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1E97 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x140 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1DE2 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1DF5 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1E08 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1C4F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1E1B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1C4F JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1E2E PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1E41 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x1E54 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x1E67 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x1E7C PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0x1E91 PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1EA0 DUP2 PUSH2 0x2065 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1EAF DUP2 PUSH2 0x2085 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1EBE DUP2 PUSH2 0x2094 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1ECD DUP2 PUSH2 0x2094 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1EDC DUP2 PUSH2 0x209E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EF7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F12 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C40 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F32 DUP2 DUP5 PUSH2 0x1C5E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F53 DUP2 PUSH2 0x1C97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F73 DUP2 PUSH2 0x1CFD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x1F8F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D3D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP3 ADD SWAP1 POP PUSH2 0x1FAB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1DCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FC6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1EA6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FE1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1EC4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FFC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1ED3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2029 DUP3 PUSH2 0x2065 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20C9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x20AE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x20D8 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20F8 DUP2 PUSH2 0x201E JUMP JUMPDEST DUP2 EQ PUSH2 0x2103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x210F DUP2 PUSH2 0x2049 JUMP JUMPDEST DUP2 EQ PUSH2 0x211A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2126 DUP2 PUSH2 0x2094 JUMP JUMPDEST DUP2 EQ PUSH2 0x2131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220DA19 DUP14 BALANCE 0x2A CALLCODE CALLVALUE 0x4E PUSH18 0x3AF94273152E102C4C89417F6055910A93A2 BLOCKHASH PUSH11 0xF9C74764736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "450:4734:17:-:0;;;1424:103;;;;;;;;;;1950:138:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2025:5;2017;:13;;;;;;;;;;;;:::i;:::-;;2050:7;2040;:17;;;;;;;;;;;;:::i;:::-;;2079:2;2067:9;;:14;;;;;;;;;;;;;;;;;;1950:138;;1483:10:17::1;1467:13;;:26;;;;;;;;;;;;;;;;;;1515:5;1501:11;;:19;;;;;;;;;;;;;;;;;;450:4734:::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:14231:19",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:19"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:19"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:19",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:19",
														"type": ""
													}
												],
												"src": "7:139:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "215:80:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "225:22:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "240:6:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "234:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "234:13:19"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "225:5:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "283:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "256:26:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "256:33:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "256:33:19"
														}
													]
												},
												"name": "abi_decode_t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "193:6:19",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "201:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "209:5:19",
														"type": ""
													}
												],
												"src": "152:143:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "353:87:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "363:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "385:6:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "372:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "372:20:19"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "363:5:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "428:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "401:26:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "401:33:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "401:33:19"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "331:6:19",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "339:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "347:5:19",
														"type": ""
													}
												],
												"src": "301:139:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "509:80:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "519:22:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "534:6:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "528:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "528:13:19"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "519:5:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "577:5:19"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "550:26:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "550:33:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "550:33:19"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "487:6:19",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "495:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "503:5:19",
														"type": ""
													}
												],
												"src": "446:143:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "661:196:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "707:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "716:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "719:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "709:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "709:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "709:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "682:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "691:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "678:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "678:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "703:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "674:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "674:32:19"
															},
															"nodeType": "YulIf",
															"src": "671:2:19"
														},
														{
															"nodeType": "YulBlock",
															"src": "733:117:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "748:15:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "762:1:19",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "752:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "777:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "812:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "823:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "808:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "808:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "832:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "787:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "787:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "777:6:19"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "631:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "642:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "654:6:19",
														"type": ""
													}
												],
												"src": "595:262:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "946:324:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "992:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1001:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1004:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "994:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "994:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "994:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "967:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "976:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "963:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "963:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "988:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "959:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "959:32:19"
															},
															"nodeType": "YulIf",
															"src": "956:2:19"
														},
														{
															"nodeType": "YulBlock",
															"src": "1018:117:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1033:15:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1047:1:19",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1037:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1062:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1097:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1108:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1093:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1093:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1117:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1072:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1072:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1062:6:19"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1145:118:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1160:16:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1174:2:19",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1164:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1190:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1225:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1236:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1221:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1221:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1245:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1200:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1200:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1190:6:19"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "908:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "919:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "931:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "939:6:19",
														"type": ""
													}
												],
												"src": "863:407:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1376:452:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1422:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1431:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1434:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1424:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1424:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1424:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1397:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1406:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1393:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1393:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1418:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1389:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1389:32:19"
															},
															"nodeType": "YulIf",
															"src": "1386:2:19"
														},
														{
															"nodeType": "YulBlock",
															"src": "1448:117:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1463:15:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1477:1:19",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1467:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1492:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1527:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1538:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1523:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1523:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1547:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1502:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1502:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1492:6:19"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1575:118:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1590:16:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1604:2:19",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1594:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1620:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1655:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1666:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1651:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1651:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1675:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1630:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1630:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1620:6:19"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1703:118:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1718:16:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1732:2:19",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1722:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1748:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1783:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1794:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1779:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1779:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1803:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1758:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1758:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1748:6:19"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1330:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1341:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1353:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1361:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1369:6:19",
														"type": ""
													}
												],
												"src": "1276:552:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1917:324:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1963:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1972:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1975:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1965:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1965:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1965:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1938:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1947:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1934:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1934:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1959:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1930:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1930:32:19"
															},
															"nodeType": "YulIf",
															"src": "1927:2:19"
														},
														{
															"nodeType": "YulBlock",
															"src": "1989:117:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2004:15:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2018:1:19",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2008:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2033:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2068:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2079:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2064:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2064:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2088:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2043:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2043:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2033:6:19"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2116:118:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2131:16:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2145:2:19",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2135:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2161:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2196:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2207:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2192:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2192:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2216:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2171:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2171:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2161:6:19"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1879:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1890:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1902:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1910:6:19",
														"type": ""
													}
												],
												"src": "1834:407:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2313:196:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2359:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2368:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2371:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2361:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2361:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2361:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2334:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2343:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2330:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2330:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2355:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2326:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2326:32:19"
															},
															"nodeType": "YulIf",
															"src": "2323:2:19"
														},
														{
															"nodeType": "YulBlock",
															"src": "2385:117:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2400:15:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2414:1:19",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2404:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2429:63:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2464:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2475:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2460:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2460:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2484:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2439:20:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2439:53:19"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2429:6:19"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2283:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2294:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2306:6:19",
														"type": ""
													}
												],
												"src": "2247:262:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2592:207:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2638:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2647:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2650:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2640:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2640:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2640:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2613:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2622:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2609:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2609:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2634:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2605:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2605:32:19"
															},
															"nodeType": "YulIf",
															"src": "2602:2:19"
														},
														{
															"nodeType": "YulBlock",
															"src": "2664:128:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2679:15:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2693:1:19",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2683:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2708:74:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2754:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2765:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2750:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2750:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2774:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "2718:31:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2718:64:19"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2708:6:19"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2562:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2573:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2585:6:19",
														"type": ""
													}
												],
												"src": "2515:284:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2933:625:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2980:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2989:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2992:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2982:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2982:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2982:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2954:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2963:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2950:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2950:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2975:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2946:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2946:33:19"
															},
															"nodeType": "YulIf",
															"src": "2943:2:19"
														},
														{
															"nodeType": "YulBlock",
															"src": "3006:128:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3021:15:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3035:1:19",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3025:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3050:74:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3096:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3107:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3092:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3092:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3116:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3060:31:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3060:64:19"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3050:6:19"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3144:129:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3159:16:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3173:2:19",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3163:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3189:74:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3235:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3246:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3231:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3231:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3255:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3199:31:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3199:64:19"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3189:6:19"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3283:129:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3298:16:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3312:2:19",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3302:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3328:74:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3374:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3385:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3370:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3370:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3394:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3338:31:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3338:64:19"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "3328:6:19"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3422:129:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3437:16:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3451:2:19",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3441:6:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3467:74:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3513:9:19"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3524:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3509:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3509:22:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3533:7:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3477:31:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3477:64:19"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "3467:6:19"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2879:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2890:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2902:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2910:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2918:6:19",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2926:6:19",
														"type": ""
													}
												],
												"src": "2805:753:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3619:53:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3636:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3659:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3641:17:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3641:24:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3629:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3629:37:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3629:37:19"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3607:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3614:3:19",
														"type": ""
													}
												],
												"src": "3564:108:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3743:53:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3760:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3783:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3765:17:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3765:24:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3753:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3753:37:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3753:37:19"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3731:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3738:3:19",
														"type": ""
													}
												],
												"src": "3678:118:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3861:50:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3878:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3898:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3883:14:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3883:21:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3871:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3871:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3871:34:19"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3849:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3856:3:19",
														"type": ""
													}
												],
												"src": "3802:109:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3968:51:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3985:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4006:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "3990:15:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3990:22:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3978:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3978:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3978:35:19"
														}
													]
												},
												"name": "abi_encode_t_int24_to_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3956:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3963:3:19",
														"type": ""
													}
												],
												"src": "3917:102:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4117:272:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4127:53:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4174:5:19"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "4141:32:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4141:39:19"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4131:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4189:78:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4255:3:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4260:6:19"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4196:58:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4196:71:19"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4189:3:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4302:5:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4309:4:19",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4298:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4298:16:19"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4316:3:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4321:6:19"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4276:21:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4276:52:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4276:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4337:46:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4348:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4375:6:19"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "4353:21:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4353:29:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4344:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4344:39:19"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4337:3:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4098:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4105:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4113:3:19",
														"type": ""
													}
												],
												"src": "4025:364:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4541:223:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4551:74:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4617:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4622:2:19",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4558:58:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4558:67:19"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4551:3:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4646:3:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4651:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4642:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4642:11:19"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4655:34:19",
																		"type": "",
																		"value": "Contract has already been initia"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4635:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4635:55:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4635:55:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4711:3:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4716:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4707:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4707:12:19"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4721:7:19",
																		"type": "",
																		"value": "lized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4700:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4700:29:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4700:29:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4739:19:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4750:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4755:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4746:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4746:12:19"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4739:3:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4529:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4537:3:19",
														"type": ""
													}
												],
												"src": "4395:369:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4916:184:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4926:74:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4992:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4997:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4933:58:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4933:67:19"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4926:3:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5021:3:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5026:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5017:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5017:11:19"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5030:34:19",
																		"type": "",
																		"value": "Must be called by contract admin"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5010:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5010:55:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5010:55:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5075:19:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5086:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5091:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5082:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5082:12:19"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5075:3:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4904:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4912:3:19",
														"type": ""
													}
												],
												"src": "4770:330:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5358:1303:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5368:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5384:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5389:4:19",
																		"type": "",
																		"value": "0xe0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5380:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:14:19"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "5372:4:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5404:167:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5442:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5472:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5479:4:19",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5468:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5468:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5462:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5462:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "5446:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "5532:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "5550:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5555:4:19",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5546:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5546:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5498:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5498:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5498:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5581:168:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5620:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5650:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5657:4:19",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5646:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5646:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5640:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5640:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "5624:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "5710:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "5728:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5733:4:19",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5724:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5724:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5676:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5676:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5676:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5759:169:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5799:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5829:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5836:4:19",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5825:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5825:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5819:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5819:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "5803:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "5889:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "5907:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5912:4:19",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5903:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5903:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5855:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5855:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5855:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5938:168:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5977:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6007:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6014:4:19",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6003:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6003:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5997:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5997:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "5981:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6067:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6085:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6090:4:19",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6081:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6081:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6033:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6033:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6116:168:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6155:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6185:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6192:4:19",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6181:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6181:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6175:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6175:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6159:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6245:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6263:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6268:4:19",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6259:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6259:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6211:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6211:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6211:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6294:176:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6341:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6371:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6378:4:19",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6367:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6367:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6361:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6361:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6345:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6431:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6449:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6454:4:19",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6445:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6445:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6397:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6397:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6397:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6480:174:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6525:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6555:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6562:4:19",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6551:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6551:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6545:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6545:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6529:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6615:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6633:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6638:4:19",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6629:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6629:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint160_to_t_uint160",
																			"nodeType": "YulIdentifier",
																			"src": "6581:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6581:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6581:63:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_ExactInputSingleParams_$2491_memory_ptr_to_t_struct$_ExactInputSingleParams_$2491_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5345:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5352:3:19",
														"type": ""
													}
												],
												"src": "5212:1449:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6875:1840:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6885:28:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6901:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6906:6:19",
																		"type": "",
																		"value": "0x0140"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6897:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6897:16:19"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "6889:4:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6923:166:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6960:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6990:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6997:4:19",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6986:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6986:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6980:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6980:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6964:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7050:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7068:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7073:4:19",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7064:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7064:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "7016:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7016:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7016:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7099:166:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7136:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7166:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7173:4:19",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7162:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7162:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7156:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7156:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7140:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7226:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7244:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7249:4:19",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7240:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7240:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "7192:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7192:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7192:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7275:165:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7315:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7345:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7352:4:19",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7341:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7341:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7335:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7335:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7319:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7401:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7419:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7424:4:19",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7415:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7415:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_int24_to_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "7371:29:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7371:59:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7371:59:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7450:165:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7490:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7520:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7527:4:19",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7516:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7516:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7510:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7510:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7494:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7576:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7594:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7599:4:19",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7590:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7590:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_int24_to_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "7546:29:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7546:59:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7546:59:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7625:174:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7670:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7700:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7707:4:19",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7696:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7696:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7690:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7690:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7674:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7760:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7778:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7783:4:19",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7774:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7774:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7726:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7726:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7726:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7809:174:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7854:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7884:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7891:4:19",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7880:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7880:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7874:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7874:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7858:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7944:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7962:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7967:4:19",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7958:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7958:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7910:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7910:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7910:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7993:170:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8034:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8064:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8071:4:19",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8060:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8060:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8054:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8054:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8038:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8124:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8142:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8147:4:19",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8138:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8138:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8090:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8090:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8090:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8173:170:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8214:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8244:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8251:4:19",
																						"type": "",
																						"value": "0xe0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8240:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8240:16:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8234:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8234:23:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8218:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8304:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8322:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8327:4:19",
																						"type": "",
																						"value": "0xe0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8318:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8318:14:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8270:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8270:63:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8270:63:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8353:173:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8393:45:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8423:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8430:6:19",
																						"type": "",
																						"value": "0x0100"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8419:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8419:18:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8413:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8413:25:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8397:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8485:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8503:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8508:6:19",
																						"type": "",
																						"value": "0x0100"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8499:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8499:16:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "8451:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8451:65:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8451:65:19"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8536:172:19",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8575:45:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8605:5:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8612:6:19",
																						"type": "",
																						"value": "0x0120"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8601:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8601:18:19"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8595:5:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8595:25:19"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8579:12:19",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8667:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8685:3:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8690:6:19",
																						"type": "",
																						"value": "0x0120"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8681:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8681:16:19"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8633:33:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8633:65:19"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8633:65:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_MintParams_$2520_memory_ptr_to_t_struct$_MintParams_$2520_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6862:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6869:3:19",
														"type": ""
													}
												],
												"src": "6753:1962:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8776:53:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8793:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8816:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint160",
																			"nodeType": "YulIdentifier",
																			"src": "8798:17:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8798:24:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8786:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8786:37:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8786:37:19"
														}
													]
												},
												"name": "abi_encode_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8764:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8771:3:19",
														"type": ""
													}
												],
												"src": "8721:108:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8898:52:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8915:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8937:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "8920:16:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8920:23:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8908:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8908:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8908:36:19"
														}
													]
												},
												"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8886:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8893:3:19",
														"type": ""
													}
												],
												"src": "8835:115:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9011:53:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9028:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9051:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9033:17:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9033:24:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9021:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9021:37:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9021:37:19"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8999:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9006:3:19",
														"type": ""
													}
												],
												"src": "8956:108:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9135:53:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9152:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9175:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9157:17:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9157:24:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9145:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9145:37:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9145:37:19"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9123:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9130:3:19",
														"type": ""
													}
												],
												"src": "9070:118:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9255:51:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9272:3:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9293:5:19"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "9277:15:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9277:22:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9265:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9265:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9265:35:19"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9243:5:19",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9250:3:19",
														"type": ""
													}
												],
												"src": "9194:112:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9410:124:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9420:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9432:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9443:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9428:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9428:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9420:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9500:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9513:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9524:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9509:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9509:17:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9456:43:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9456:71:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9456:71:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9382:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9394:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9405:4:19",
														"type": ""
													}
												],
												"src": "9312:222:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9632:118:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9642:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9654:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9665:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9650:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9650:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9642:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9716:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9729:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9740:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9725:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9725:17:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9678:37:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9678:65:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9678:65:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9604:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9616:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9627:4:19",
														"type": ""
													}
												],
												"src": "9540:210:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9874:195:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9884:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9896:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9907:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9892:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9892:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9884:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9931:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9942:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9927:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9927:17:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9950:4:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9956:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9946:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9946:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9920:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9920:47:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9920:47:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9976:86:19",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10048:6:19"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10057:4:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9984:63:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9984:78:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9976:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9846:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9858:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9869:4:19",
														"type": ""
													}
												],
												"src": "9756:313:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10246:248:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10256:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10268:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10279:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10264:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10264:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10256:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10303:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10314:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10299:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10299:17:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10322:4:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10328:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10318:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10318:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10292:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10292:47:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10292:47:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10348:139:19",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10482:4:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10356:124:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10356:131:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10348:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10226:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10241:4:19",
														"type": ""
													}
												],
												"src": "10075:419:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10671:248:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10681:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10693:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10704:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10689:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10689:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10681:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10728:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10739:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10724:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10724:17:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10747:4:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10753:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10743:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10743:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10717:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10717:47:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10717:47:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10773:139:19",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10907:4:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10781:124:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10781:131:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10773:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10651:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10666:4:19",
														"type": ""
													}
												],
												"src": "10500:419:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11103:205:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11113:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11125:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11136:3:19",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11121:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11121:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11113:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11274:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11287:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11298:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11283:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11283:17:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_ExactInputSingleParams_$2491_memory_ptr_to_t_struct$_ExactInputSingleParams_$2491_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11150:123:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11150:151:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11150:151:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_ExactInputSingleParams_$2491_memory_ptr__to_t_struct$_ExactInputSingleParams_$2491_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11075:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11087:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11098:4:19",
														"type": ""
													}
												],
												"src": "10925:383:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11468:181:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11478:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11490:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11501:3:19",
																		"type": "",
																		"value": "320"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11486:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11486:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11478:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11615:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11628:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11639:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11624:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11624:17:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_MintParams_$2520_memory_ptr_to_t_struct$_MintParams_$2520_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11515:99:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11515:127:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11515:127:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_MintParams_$2520_memory_ptr__to_t_struct$_MintParams_$2520_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11440:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11452:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11463:4:19",
														"type": ""
													}
												],
												"src": "11314:335:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11751:122:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11761:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11773:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11784:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11769:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11769:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11761:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11839:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11852:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11863:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11848:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11848:17:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11797:41:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11797:69:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11797:69:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11723:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11735:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11746:4:19",
														"type": ""
													}
												],
												"src": "11655:218:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11977:124:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11987:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11999:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12010:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11995:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11995:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11987:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12067:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12080:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12091:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12076:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12076:17:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12023:43:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12023:71:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12023:71:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11949:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11961:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11972:4:19",
														"type": ""
													}
												],
												"src": "11879:222:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12201:120:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12211:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12223:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12234:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12219:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12219:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12211:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12287:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12300:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12311:1:19",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12296:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12296:17:19"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12247:39:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12247:67:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12247:67:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12173:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12185:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12196:4:19",
														"type": ""
													}
												],
												"src": "12107:214:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12386:40:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12397:22:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12413:5:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12407:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12407:12:19"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "12397:6:19"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12369:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12379:6:19",
														"type": ""
													}
												],
												"src": "12327:99:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12528:73:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12545:3:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12550:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12538:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12538:19:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12538:19:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12566:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12585:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12590:4:19",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12581:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12581:14:19"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "12566:11:19"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12500:3:19",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12505:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "12516:11:19",
														"type": ""
													}
												],
												"src": "12432:169:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12652:51:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12662:35:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12691:5:19"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "12673:17:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12673:24:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12662:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12634:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12644:7:19",
														"type": ""
													}
												],
												"src": "12607:96:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12751:48:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12761:32:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12786:5:19"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "12779:6:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12779:13:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12772:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12772:21:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12761:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12733:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12743:7:19",
														"type": ""
													}
												],
												"src": "12709:90:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12848:47:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12858:31:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12880:1:19",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12883:5:19"
																	}
																],
																"functionName": {
																	"name": "signextend",
																	"nodeType": "YulIdentifier",
																	"src": "12869:10:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12869:20:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12858:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12830:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12840:7:19",
														"type": ""
													}
												],
												"src": "12805:90:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12946:73:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12956:57:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12971:5:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12978:34:19",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12967:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12967:46:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12956:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12928:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12938:7:19",
														"type": ""
													}
												],
												"src": "12901:118:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13070:81:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13080:65:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13095:5:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13102:42:19",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13091:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13091:54:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13080:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13052:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13062:7:19",
														"type": ""
													}
												],
												"src": "13025:126:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13201:47:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13211:31:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13226:5:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13233:8:19",
																		"type": "",
																		"value": "0xffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13222:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13222:20:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13211:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13183:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13193:7:19",
														"type": ""
													}
												],
												"src": "13157:91:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13299:32:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13309:16:19",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "13320:5:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13309:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13281:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13291:7:19",
														"type": ""
													}
												],
												"src": "13254:77:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13380:43:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13390:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13405:5:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13412:4:19",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13401:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13401:16:19"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13390:7:19"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13362:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13372:7:19",
														"type": ""
													}
												],
												"src": "13337:86:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13478:258:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13488:10:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "13497:1:19",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "13492:1:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13557:63:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "13582:3:19"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "13587:1:19"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "13578:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "13578:11:19"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "13601:3:19"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "13606:1:19"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "13597:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "13597:11:19"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "13591:5:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "13591:18:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "13571:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13571:39:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13571:39:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "13518:1:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13521:6:19"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "13515:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13515:13:19"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "13529:19:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "13531:15:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "13540:1:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13543:2:19",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "13536:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13536:10:19"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "13531:1:19"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "13511:3:19",
																"statements": []
															},
															"src": "13507:113:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13654:76:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "13704:3:19"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "13709:6:19"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "13700:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "13700:16:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13718:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "13693:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13693:27:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13693:27:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "13635:1:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13638:6:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13632:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13632:13:19"
															},
															"nodeType": "YulIf",
															"src": "13629:2:19"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "13460:3:19",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "13465:3:19",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13470:6:19",
														"type": ""
													}
												],
												"src": "13429:307:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13790:54:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13800:38:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13818:5:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13825:2:19",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13814:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13814:14:19"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13834:2:19",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "13830:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13830:7:19"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13810:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13810:28:19"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "13800:6:19"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13773:5:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "13783:6:19",
														"type": ""
													}
												],
												"src": "13742:102:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13893:79:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13950:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13959:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13962:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13952:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13952:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13952:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13916:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "13941:5:19"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "13923:17:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13923:24:19"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "13913:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13913:35:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13906:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13906:43:19"
															},
															"nodeType": "YulIf",
															"src": "13903:2:19"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13886:5:19",
														"type": ""
													}
												],
												"src": "13850:122:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14021:79:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14078:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14087:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14090:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14080:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14080:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14080:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14044:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "14069:5:19"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint128",
																					"nodeType": "YulIdentifier",
																					"src": "14051:17:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14051:24:19"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "14041:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14041:35:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14034:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14034:43:19"
															},
															"nodeType": "YulIf",
															"src": "14031:2:19"
														}
													]
												},
												"name": "validator_revert_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14014:5:19",
														"type": ""
													}
												],
												"src": "13978:122:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14149:79:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14206:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14215:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14218:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14208:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14208:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14208:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14172:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "14197:5:19"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "14179:17:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14179:24:19"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "14169:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14169:35:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14162:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14162:43:19"
															},
															"nodeType": "YulIf",
															"src": "14159:2:19"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14142:5:19",
														"type": ""
													}
												],
												"src": "14106:122:19"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint128_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_int24_to_t_int24(value, pos) {\n        mstore(pos, cleanup_t_int24(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n\n        mstore(add(pos, 0), \"Contract has already been initia\")\n\n        mstore(add(pos, 32), \"lized\")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n\n        mstore(add(pos, 0), \"Must be called by contract admin\")\n\n        end := add(pos, 32)\n    }\n\n    // struct iQuickswapSwapper.ExactInputSingleParams -> struct iQuickswapSwapper.ExactInputSingleParams\n    function abi_encode_t_struct$_ExactInputSingleParams_$2491_memory_ptr_to_t_struct$_ExactInputSingleParams_$2491_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0xe0)\n\n        {\n            // tokenIn\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // tokenOut\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // recipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // deadline\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // amountIn\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // amountOutMinimum\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // limitSqrtPrice\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_uint160_to_t_uint160(memberValue0, add(pos, 0xc0))\n        }\n\n    }\n\n    // struct iNFTPositionManager.MintParams -> struct iNFTPositionManager.MintParams\n    function abi_encode_t_struct$_MintParams_$2520_memory_ptr_to_t_struct$_MintParams_$2520_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0140)\n\n        {\n            // token0\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token1\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // tickLower\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_int24_to_t_int24(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // tickUpper\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_int24_to_t_int24(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // amount0Desired\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // amount1Desired\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // amount0Min\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // amount1Min\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // recipient\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x0100))\n        }\n\n        {\n            // deadline\n\n            let memberValue0 := mload(add(value, 0x0120))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0120))\n        }\n\n    }\n\n    function abi_encode_t_uint160_to_t_uint160(value, pos) {\n        mstore(pos, cleanup_t_uint160(value))\n    }\n\n    function abi_encode_t_uint24_to_t_uint24_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint24(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_struct$_ExactInputSingleParams_$2491_memory_ptr__to_t_struct$_ExactInputSingleParams_$2491_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_struct$_ExactInputSingleParams_$2491_memory_ptr_to_t_struct$_ExactInputSingleParams_$2491_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_struct$_MintParams_$2520_memory_ptr__to_t_struct$_MintParams_$2520_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 320)\n\n        abi_encode_t_struct$_MintParams_$2520_memory_ptr_to_t_struct$_MintParams_$2520_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_int24(value) -> cleaned {\n        cleaned := signextend(2, value)\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint24(value) -> cleaned {\n        cleaned := and(value, 0xffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 19,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100f55760003560e01c80633950935111610097578063a9059cbb11610066578063a9059cbb1461029e578063dd62ed3e146102ce578063f2e62772146102fe578063fe4b84df1461031c576100f5565b806339509351146101f057806370a082311461022057806395d89b4114610250578063a457c2d71461026e576100f5565b8063158ef93e116100d3578063158ef93e1461016657806318160ddd1461018457806323b872dd146101a2578063313ce567146101d2576100f5565b806306fdde03146100fa578063089fe6aa14610118578063095ea7b314610136575b600080fd5b610102610338565b60405161010f9190611f18565b60405180910390f35b6101206103da565b60405161012d9190611fb1565b60405180910390f35b610150600480360381019061014b9190611b31565b6103e0565b60405161015d9190611efd565b60405180910390f35b61016e6103fe565b60405161017b9190611efd565b60405180910390f35b61018c610411565b6040516101999190611fcc565b60405180910390f35b6101bc60048036038101906101b79190611ae2565b61041b565b6040516101c99190611efd565b60405180910390f35b6101da6104f4565b6040516101e79190611fe7565b60405180910390f35b61020a60048036038101906102059190611b31565b61050b565b6040516102179190611efd565b60405180910390f35b61023a60048036038101906102359190611a7d565b6105be565b6040516102479190611fcc565b60405180910390f35b610258610606565b6040516102659190611f18565b60405180910390f35b61028860048036038101906102839190611b31565b6106a8565b6040516102959190611efd565b60405180910390f35b6102b860048036038101906102b39190611b31565b610775565b6040516102c59190611efd565b60405180910390f35b6102e860048036038101906102e39190611aa6565b610793565b6040516102f59190611fcc565b60405180910390f35b61030661081a565b6040516103139190611ee2565b60405180910390f35b61033660048036038101906103319190611b6d565b610840565b005b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103d05780601f106103a5576101008083540402835291602001916103d0565b820191906000526020600020905b8154815290600101906020018083116103b357829003601f168201915b5050505050905090565b610bb881565b60006103f46103ed610ed1565b8484610ed9565b6001905092915050565b600560159054906101000a900460ff1681565b6000600254905090565b60006104288484846110d0565b6104e984610434610ed1565b6104e4856040518060600160405280602881526020016121a060289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061049a610ed1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113919092919063ffffffff16565b610ed9565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006105b4610518610ed1565b846105af8560016000610529610ed1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461144b90919063ffffffff16565b610ed9565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b5050505050905090565b600061076b6106b5610ed1565b846107668560405180606001604052806025815260200161221160259139600160006106df610ed1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113919092919063ffffffff16565b610ed9565b6001905092915050565b6000610789610782610ed1565b84846110d0565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790611f5a565b60405180910390fd5b60001515600560159054906101000a900460ff16151514610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90611f3a565b60405180910390fd5b6001600560156101000a81548160ff021916908315150217905550610961732791bca1f2de4661ed88a30c99a7a9449aa841743330846114d3565b610994732791bca1f2de4661ed88a30c99a7a9449aa8417473f5b509bb0909a69b1c207e495f687a596c168e12836116f3565b6000600382816109a057fe5b0490506109ab6118f9565b6040518060e00160405280732791bca1f2de4661ed88a30c99a7a9449aa8417473ffffffffffffffffffffffffffffffffffffffff168152602001738f3cf7ad23cd3cadbd9735aff958023239c6a06373ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200160028481610a4257fe5b04815260200160018152602001600073ffffffffffffffffffffffffffffffffffffffff168152509050600073f5b509bb0909a69b1c207e495f687a596c168e1273ffffffffffffffffffffffffffffffffffffffff1663bc651188836040518263ffffffff1660e01b8152600401610abb9190611f7a565b602060405180830381600087803b158015610ad557600080fd5b505af1158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190611b96565b905073750e4c4984a9e0f12978ea6742bc1c5d248f40ed826020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600073f5b509bb0909a69b1c207e495f687a596c168e1273ffffffffffffffffffffffffffffffffffffffff1663bc651188846040518263ffffffff1660e01b8152600401610baa9190611f7a565b602060405180830381600087803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfc9190611b96565b905073b0b195aefa3650a6908f15cdac7d92f8a5791b0b836020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600073f5b509bb0909a69b1c207e495f687a596c168e1273ffffffffffffffffffffffffffffffffffffffff1663bc651188856040518263ffffffff1660e01b8152600401610c999190611f7a565b602060405180830381600087803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ceb9190611b96565b9050610d20732791bca1f2de4661ed88a30c99a7a9449aa84174738ef88e4c7cfbbac1c163f7eddd4b578792201de6876116f3565b610d53738f3cf7ad23cd3cadbd9735aff958023239c6a063738ef88e4c7cfbbac1c163f7eddd4b578792201de6856116f3565b610d5b61198e565b604051806101400160405280738f3cf7ad23cd3cadbd9735aff958023239c6a06373ffffffffffffffffffffffffffffffffffffffff168152602001732791bca1f2de4661ed88a30c99a7a9449aa8417473ffffffffffffffffffffffffffffffffffffffff1681526020016204105260020b815260200162045e7260020b815260200185815260200160028881610def57fe5b04815260200160018152602001600181526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152509050738ef88e4c7cfbbac1c163f7eddd4b578792201de673ffffffffffffffffffffffffffffffffffffffff16639cc1a283826040518263ffffffff1660e01b8152600401610e729190611f95565b608060405180830381600087803b158015610e8c57600080fd5b505af1158015610ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec49190611bbf565b5050505050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f5f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806121ed6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fe5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806121586022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611156576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806121c86025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806121356023913960400191505060405180910390fd5b6111e78383836118f4565b6112528160405180606001604052806026815260200161217a602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113919092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112e5816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461144b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600083831115829061143e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114035780820151818401526020810190506113e8565b50505050905090810190601f1680156114305780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b6000808284019050838110156114c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106115d257805182526020820191506020810190506020830392506115af565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611634576040519150601f19603f3d011682016040523d82523d6000602084013e611639565b606091505b50915091508180156116795750600081511480611678575080806020019051602081101561166657600080fd5b81019080805190602001909291905050505b5b6116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f535446000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106117d457805182526020820191506020810190506020830392506117b1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611836576040519150601f19603f3d011682016040523d82523d6000602084013e61183b565b606091505b509150915081801561187b575060008151148061187a575080806020019051602081101561186857600080fd5b81019080805190602001909291905050505b5b6118ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f534100000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5050505050565b505050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060020b8152602001600060020b815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600081359050611a38816120ef565b92915050565b600081519050611a4d81612106565b92915050565b600081359050611a628161211d565b92915050565b600081519050611a778161211d565b92915050565b600060208284031215611a8f57600080fd5b6000611a9d84828501611a29565b91505092915050565b60008060408385031215611ab957600080fd5b6000611ac785828601611a29565b9250506020611ad885828601611a29565b9150509250929050565b600080600060608486031215611af757600080fd5b6000611b0586828701611a29565b9350506020611b1686828701611a29565b9250506040611b2786828701611a53565b9150509250925092565b60008060408385031215611b4457600080fd5b6000611b5285828601611a29565b9250506020611b6385828601611a53565b9150509250929050565b600060208284031215611b7f57600080fd5b6000611b8d84828501611a53565b91505092915050565b600060208284031215611ba857600080fd5b6000611bb684828501611a68565b91505092915050565b60008060008060808587031215611bd557600080fd5b6000611be387828801611a68565b9450506020611bf487828801611a3e565b9350506040611c0587828801611a68565b9250506060611c1687828801611a68565b91505092959194509250565b611c2b8161201e565b82525050565b611c3a8161201e565b82525050565b611c4981612030565b82525050565b611c588161203c565b82525050565b6000611c6982612002565b611c73818561200d565b9350611c838185602086016120ab565b611c8c816120de565b840191505092915050565b6000611ca460258361200d565b91507f436f6e74726163742068617320616c7265616479206265656e20696e6974696160008301527f6c697a65640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d0a60208361200d565b91507f4d7573742062652063616c6c656420627920636f6e74726163742061646d696e6000830152602082019050919050565b60e082016000820151611d536000850182611c22565b506020820151611d666020850182611c22565b506040820151611d796040850182611c22565b506060820151611d8c6060850182611eb5565b506080820151611d9f6080850182611eb5565b5060a0820151611db260a0850182611eb5565b5060c0820151611dc560c0850182611e97565b50505050565b61014082016000820151611de26000850182611c22565b506020820151611df56020850182611c22565b506040820151611e086040850182611c4f565b506060820151611e1b6060850182611c4f565b506080820151611e2e6080850182611eb5565b5060a0820151611e4160a0850182611eb5565b5060c0820151611e5460c0850182611eb5565b5060e0820151611e6760e0850182611eb5565b50610100820151611e7c610100850182611c22565b50610120820151611e91610120850182611eb5565b50505050565b611ea081612065565b82525050565b611eaf81612085565b82525050565b611ebe81612094565b82525050565b611ecd81612094565b82525050565b611edc8161209e565b82525050565b6000602082019050611ef76000830184611c31565b92915050565b6000602082019050611f126000830184611c40565b92915050565b60006020820190508181036000830152611f328184611c5e565b905092915050565b60006020820190508181036000830152611f5381611c97565b9050919050565b60006020820190508181036000830152611f7381611cfd565b9050919050565b600060e082019050611f8f6000830184611d3d565b92915050565b600061014082019050611fab6000830184611dcb565b92915050565b6000602082019050611fc66000830184611ea6565b92915050565b6000602082019050611fe16000830184611ec4565b92915050565b6000602082019050611ffc6000830184611ed3565b92915050565b600081519050919050565b600082825260208201905092915050565b600061202982612065565b9050919050565b60008115159050919050565b60008160020b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156120c95780820151818401526020810190506120ae565b838111156120d8576000848401525b50505050565b6000601f19601f8301169050919050565b6120f88161201e565b811461210357600080fd5b50565b61210f81612049565b811461211a57600080fd5b50565b61212681612094565b811461213157600080fd5b5056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220da198d312af2344e713af94273152e102c4c89417f6055910a93a2406af9c74764736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0xF2E62772 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0xFE4B84DF EQ PUSH2 0x31C JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x26E JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x158EF93E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1D2 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x136 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x3DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12D SWAP2 SWAP1 PUSH2 0x1FB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x150 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14B SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16E PUSH2 0x3FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17B SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18C PUSH2 0x411 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B7 SWAP2 SWAP1 PUSH2 0x1AE2 JUMP JUMPDEST PUSH2 0x41B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DA PUSH2 0x4F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x1FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x205 SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x50B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x1A7D JUMP JUMPDEST PUSH2 0x5BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 PUSH2 0x606 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x1F18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x6A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B31 JUMP JUMPDEST PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x1EFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x1AA6 JUMP JUMPDEST PUSH2 0x793 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F5 SWAP2 SWAP1 PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x306 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x313 SWAP2 SWAP1 PUSH2 0x1EE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x336 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x331 SWAP2 SWAP1 PUSH2 0x1B6D JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBB8 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4 PUSH2 0x3ED PUSH2 0xED1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x428 DUP5 DUP5 DUP5 PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0x4E9 DUP5 PUSH2 0x434 PUSH2 0xED1 JUMP JUMPDEST PUSH2 0x4E4 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21A0 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x49A PUSH2 0xED1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1391 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B4 PUSH2 0x518 PUSH2 0xED1 JUMP JUMPDEST DUP5 PUSH2 0x5AF DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x529 PUSH2 0xED1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x144B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x69E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x673 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x69E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x681 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76B PUSH2 0x6B5 PUSH2 0xED1 JUMP JUMPDEST DUP5 PUSH2 0x766 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2211 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x6DF PUSH2 0xED1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1391 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xED9 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x789 PUSH2 0x782 PUSH2 0xED1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C7 SWAP1 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x5 PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x926 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x91D SWAP1 PUSH2 0x1F3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x15 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x961 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 CALLER ADDRESS DUP5 PUSH2 0x14D3 JUMP JUMPDEST PUSH2 0x994 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 DUP4 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 DUP2 PUSH2 0x9A0 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x9AB PUSH2 0x18F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x8F3CF7AD23CD3CADBD9735AFF958023239C6A063 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP5 DUP2 PUSH2 0xA42 JUMPI INVALID JUMPDEST DIV DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC651188 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABB SWAP2 SWAP1 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB0D SWAP2 SWAP1 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH20 0x750E4C4984A9E0F12978EA6742BC1C5D248F40ED DUP3 PUSH1 0x20 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC651188 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBAA SWAP2 SWAP1 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBD8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBFC SWAP2 SWAP1 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH20 0xB0B195AEFA3650A6908F15CDAC7D92F8A5791B0B DUP4 PUSH1 0x20 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH20 0xF5B509BB0909A69B1C207E495F687A596C168E12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC651188 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC99 SWAP2 SWAP1 PUSH2 0x1F7A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCEB SWAP2 SWAP1 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP PUSH2 0xD20 PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0x8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6 DUP8 PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0xD53 PUSH20 0x8F3CF7AD23CD3CADBD9735AFF958023239C6A063 PUSH20 0x8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6 DUP6 PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0xD5B PUSH2 0x198E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH20 0x8F3CF7AD23CD3CADBD9735AFF958023239C6A063 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x2791BCA1F2DE4661ED88A30C99A7A9449AA84174 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x41052 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x45E72 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP9 DUP2 PUSH2 0xDEF JUMPI INVALID JUMPDEST DIV DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH20 0x8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9CC1A283 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE72 SWAP2 SWAP1 PUSH2 0x1F95 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEC4 SWAP2 SWAP1 PUSH2 0x1BBF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x21ED PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2158 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1156 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x21C8 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2135 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x11E7 DUP4 DUP4 DUP4 PUSH2 0x18F4 JUMP JUMPDEST PUSH2 0x1252 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x217A PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1391 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x12E5 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x144B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x143E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1403 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13E8 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1430 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x14C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x15D2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x15AF JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1634 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1639 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1679 JUMPI POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1678 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP JUMPDEST JUMPDEST PUSH2 0x16EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5354460000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x17D4 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x17B1 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1836 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x183B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x187B JUMPI POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x187A JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1868 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP JUMPDEST JUMPDEST PUSH2 0x18ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5341000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A38 DUP2 PUSH2 0x20EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1A4D DUP2 PUSH2 0x2106 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A62 DUP2 PUSH2 0x211D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1A77 DUP2 PUSH2 0x211D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1A9D DUP5 DUP3 DUP6 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1AC7 DUP6 DUP3 DUP7 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AD8 DUP6 DUP3 DUP7 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B05 DUP7 DUP3 DUP8 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B16 DUP7 DUP3 DUP8 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B27 DUP7 DUP3 DUP8 ADD PUSH2 0x1A53 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B52 DUP6 DUP3 DUP7 ADD PUSH2 0x1A29 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B63 DUP6 DUP3 DUP7 ADD PUSH2 0x1A53 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B8D DUP5 DUP3 DUP6 ADD PUSH2 0x1A53 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BB6 DUP5 DUP3 DUP6 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BE3 DUP8 DUP3 DUP9 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1BF4 DUP8 DUP3 DUP9 ADD PUSH2 0x1A3E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1C05 DUP8 DUP3 DUP9 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1C16 DUP8 DUP3 DUP9 ADD PUSH2 0x1A68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x1C2B DUP2 PUSH2 0x201E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C3A DUP2 PUSH2 0x201E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C49 DUP2 PUSH2 0x2030 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C58 DUP2 PUSH2 0x203C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C69 DUP3 PUSH2 0x2002 JUMP JUMPDEST PUSH2 0x1C73 DUP2 DUP6 PUSH2 0x200D JUMP JUMPDEST SWAP4 POP PUSH2 0x1C83 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x20AB JUMP JUMPDEST PUSH2 0x1C8C DUP2 PUSH2 0x20DE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CA4 PUSH1 0x25 DUP4 PUSH2 0x200D JUMP JUMPDEST SWAP2 POP PUSH32 0x436F6E74726163742068617320616C7265616479206265656E20696E69746961 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6C697A6564000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D0A PUSH1 0x20 DUP4 PUSH2 0x200D JUMP JUMPDEST SWAP2 POP PUSH32 0x4D7573742062652063616C6C656420627920636F6E74726163742061646D696E PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1D53 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1D66 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1D79 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1D8C PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1D9F PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1DB2 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x1DC5 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1E97 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x140 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1DE2 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1DF5 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1E08 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1C4F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1E1B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1C4F JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1E2E PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1E41 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x1E54 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x1E67 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x1E7C PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x1C22 JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0x1E91 PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0x1EB5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1EA0 DUP2 PUSH2 0x2065 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1EAF DUP2 PUSH2 0x2085 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1EBE DUP2 PUSH2 0x2094 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1ECD DUP2 PUSH2 0x2094 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1EDC DUP2 PUSH2 0x209E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1EF7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F12 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C40 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F32 DUP2 DUP5 PUSH2 0x1C5E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F53 DUP2 PUSH2 0x1C97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F73 DUP2 PUSH2 0x1CFD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x1F8F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D3D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP3 ADD SWAP1 POP PUSH2 0x1FAB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1DCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FC6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1EA6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FE1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1EC4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FFC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1ED3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2029 DUP3 PUSH2 0x2065 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20C9 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x20AE JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x20D8 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20F8 DUP2 PUSH2 0x201E JUMP JUMPDEST DUP2 EQ PUSH2 0x2103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x210F DUP2 PUSH2 0x2049 JUMP JUMPDEST DUP2 EQ PUSH2 0x211A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x2126 DUP2 PUSH2 0x2094 JUMP JUMPDEST DUP2 EQ PUSH2 0x2131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220DA19 DUP14 BALANCE 0x2A CALLCODE CALLVALUE 0x4E PUSH18 0x3AF94273152E102C4C89417F6055910A93A2 BLOCKHASH PUSH11 0xF9C74764736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "450:4734:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1349:37:17;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4229:166:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1391:23:17;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3220:106:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4862:317;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3071:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5574:215;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3384:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2355:93;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6276:266;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3712:172;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3942:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1316:28:17;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1533:1870;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2153:89:2;2198:13;2230:5;2223:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89;:::o;1349:37:17:-;1382:4;1349:37;:::o;4229:166:2:-;4312:4;4328:39;4337:12;:10;:12::i;:::-;4351:7;4360:6;4328:8;:39::i;:::-;4384:4;4377:11;;4229:166;;;;:::o;1391:23:17:-;;;;;;;;;;;;;:::o;3220:106:2:-;3281:7;3307:12;;3300:19;;3220:106;:::o;4862:317::-;4968:4;4984:36;4994:6;5002:9;5013:6;4984:9;:36::i;:::-;5030:121;5039:6;5047:12;:10;:12::i;:::-;5061:89;5099:6;5061:89;;;;;;;;;;;;;;;;;:11;:19;5073:6;5061:19;;;;;;;;;;;;;;;:33;5081:12;:10;:12::i;:::-;5061:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;5030:8;:121::i;:::-;5168:4;5161:11;;4862:317;;;;;:::o;3071:89::-;3120:5;3144:9;;;;;;;;;;;3137:16;;3071:89;:::o;5574:215::-;5662:4;5678:83;5687:12;:10;:12::i;:::-;5701:7;5710:50;5749:10;5710:11;:25;5722:12;:10;:12::i;:::-;5710:25;;;;;;;;;;;;;;;:34;5736:7;5710:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;5678:8;:83::i;:::-;5778:4;5771:11;;5574:215;;;;:::o;3384:125::-;3458:7;3484:9;:18;3494:7;3484:18;;;;;;;;;;;;;;;;3477:25;;3384:125;;;:::o;2355:93::-;2402:13;2434:7;2427:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2355:93;:::o;6276:266::-;6369:4;6385:129;6394:12;:10;:12::i;:::-;6408:7;6417:96;6456:15;6417:96;;;;;;;;;;;;;;;;;:11;:25;6429:12;:10;:12::i;:::-;6417:25;;;;;;;;;;;;;;;:34;6443:7;6417:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;6385:8;:129::i;:::-;6531:4;6524:11;;6276:266;;;;:::o;3712:172::-;3798:4;3814:42;3824:12;:10;:12::i;:::-;3838:9;3849:6;3814:9;:42::i;:::-;3873:4;3866:11;;3712:172;;;;:::o;3942:149::-;4031:7;4057:11;:18;4069:5;4057:18;;;;;;;;;;;;;;;:27;4076:7;4057:27;;;;;;;;;;;;;;;;4050:34;;3942:149;;;;:::o;1316:28:17:-;;;;;;;;;;;;;:::o;1533:1870::-;1616:13;;;;;;;;;;;1602:27;;:10;:27;;;1594:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;1697:5;1682:20;;:11;;;;;;;;;;;:20;;;1674:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;1766:4;1752:11;;:18;;;;;;;;;;;;;;;;;;1778:80;505:42;1816:10;1836:4;1843:14;1778:31;:80::i;:::-;1866:70;505:42;1187;1921:14;1866:26;:70::i;:::-;1944:16;1978:1;1963:14;:16;;;;;;1944:35;;1988:54;;:::i;:::-;2059:311;;;;;;;;505:42;2059:311;;;;;;574:42;2059:311;;;;;;2199:4;2059:311;;;;;;2232:15;2059:311;;;;2284:1;2275:8;:10;;;;;;2059:311;;;;2321:1;2059:311;;;;2356:1;2059:311;;;;;2050:320;;2378:18;1187:42;2399:56;;;2456:6;2399:64;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2378:85;;647:42;2471:6;:15;;:25;;;;;;;;;;;2504:22;1187:42;2529:56;;;2586:6;2529:64;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2504:89;;716:42;2601:6;:15;;:21;;;;;;;;;;;2630:18;1187:42;2651:56;;;2708:6;2651:64;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2630:85;;2724:63;505:42;1101;2778:8;2724:26;:63::i;:::-;2795:64;574:42;1101;2848:10;2795:26;:64::i;:::-;2868:49;;:::i;:::-;2939:389;;;;;;;;574:42;2939:389;;;;;;505:42;2939:389;;;;;;3052:6;2939:389;;;;;;3085:6;2939:389;;;;;;3123:10;2939:389;;;;3174:1;3165:8;:10;;;;;;2939:389;;;;3203:1;2939:389;;;;3232:1;2939:389;;;;3269:4;2939:389;;;;;;3300:15;2939:389;;;2925:403;;1101:42;3336:45;;;3382:11;3336:58;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1533:1870;;;;;;;:::o;598:104:8:-;651:15;685:10;678:17;;598:104;:::o;9340:340:2:-;9458:1;9441:19;;:5;:19;;;;9433:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9538:1;9519:21;;:7;:21;;;;9511:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9620:6;9590:11;:18;9602:5;9590:18;;;;;;;;;;;;;;;:27;9609:7;9590:27;;;;;;;;;;;;;;;:36;;;;9657:7;9641:32;;9650:5;9641:32;;;9666:6;9641:32;;;;;;;;;;;;;;;;;;9340:340;;;:::o;7016:530::-;7139:1;7121:20;;:6;:20;;;;7113:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7222:1;7201:23;;:9;:23;;;;7193:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7275:47;7296:6;7304:9;7315:6;7275:20;:47::i;:::-;7353:71;7375:6;7353:71;;;;;;;;;;;;;;;;;:9;:17;7363:6;7353:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;7333:9;:17;7343:6;7333:17;;;;;;;;;;;;;;;:91;;;;7457:32;7482:6;7457:9;:20;7467:9;7457:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;7434:9;:20;7444:9;7434:20;;;;;;;;;;;;;;;:55;;;;7521:9;7504:35;;7513:6;7504:35;;;7532:6;7504:35;;;;;;;;;;;;;;;;;;7016:530;;;:::o;5424:163:1:-;5510:7;5542:1;5537;:6;;5545:12;5529:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5579:1;5575;:5;5568:12;;5424:163;;;;;:::o;2682:175::-;2740:7;2759:9;2775:1;2771;:5;2759:17;;2799:1;2794;:6;;2786:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:1;2842:8;;;2682:175;;;;:::o;561:358:16:-;701:12;715:17;748:5;:10;;782:28;;;812:4;818:2;822:5;759:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;748:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;700:129;;;;847:7;:57;;;;;874:1;859:4;:11;:16;:44;;;;890:4;879:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;859:44;847:57;839:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;561:358;;;;;;:::o;1873:307::-;1986:12;2000:17;2021:5;:10;;2055:23;;;2080:2;2084:5;2032:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2021:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1985:106;;;;2109:7;:57;;;;;2136:1;2121:4;:11;:16;:44;;;;2152:4;2141:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2121:44;2109:57;2101:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1873:307;;;;;:::o;10686:92:2:-;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:139:19:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:143::-;;240:6;234:13;225:22;;256:33;283:5;256:33;:::i;:::-;215:80;;;;:::o;301:139::-;;385:6;372:20;363:29;;401:33;428:5;401:33;:::i;:::-;353:87;;;;:::o;446:143::-;;534:6;528:13;519:22;;550:33;577:5;550:33;:::i;:::-;509:80;;;;:::o;595:262::-;;703:2;691:9;682:7;678:23;674:32;671:2;;;719:1;716;709:12;671:2;762:1;787:53;832:7;823:6;812:9;808:22;787:53;:::i;:::-;777:63;;733:117;661:196;;;;:::o;863:407::-;;;988:2;976:9;967:7;963:23;959:32;956:2;;;1004:1;1001;994:12;956:2;1047:1;1072:53;1117:7;1108:6;1097:9;1093:22;1072:53;:::i;:::-;1062:63;;1018:117;1174:2;1200:53;1245:7;1236:6;1225:9;1221:22;1200:53;:::i;:::-;1190:63;;1145:118;946:324;;;;;:::o;1276:552::-;;;;1418:2;1406:9;1397:7;1393:23;1389:32;1386:2;;;1434:1;1431;1424:12;1386:2;1477:1;1502:53;1547:7;1538:6;1527:9;1523:22;1502:53;:::i;:::-;1492:63;;1448:117;1604:2;1630:53;1675:7;1666:6;1655:9;1651:22;1630:53;:::i;:::-;1620:63;;1575:118;1732:2;1758:53;1803:7;1794:6;1783:9;1779:22;1758:53;:::i;:::-;1748:63;;1703:118;1376:452;;;;;:::o;1834:407::-;;;1959:2;1947:9;1938:7;1934:23;1930:32;1927:2;;;1975:1;1972;1965:12;1927:2;2018:1;2043:53;2088:7;2079:6;2068:9;2064:22;2043:53;:::i;:::-;2033:63;;1989:117;2145:2;2171:53;2216:7;2207:6;2196:9;2192:22;2171:53;:::i;:::-;2161:63;;2116:118;1917:324;;;;;:::o;2247:262::-;;2355:2;2343:9;2334:7;2330:23;2326:32;2323:2;;;2371:1;2368;2361:12;2323:2;2414:1;2439:53;2484:7;2475:6;2464:9;2460:22;2439:53;:::i;:::-;2429:63;;2385:117;2313:196;;;;:::o;2515:284::-;;2634:2;2622:9;2613:7;2609:23;2605:32;2602:2;;;2650:1;2647;2640:12;2602:2;2693:1;2718:64;2774:7;2765:6;2754:9;2750:22;2718:64;:::i;:::-;2708:74;;2664:128;2592:207;;;;:::o;2805:753::-;;;;;2975:3;2963:9;2954:7;2950:23;2946:33;2943:2;;;2992:1;2989;2982:12;2943:2;3035:1;3060:64;3116:7;3107:6;3096:9;3092:22;3060:64;:::i;:::-;3050:74;;3006:128;3173:2;3199:64;3255:7;3246:6;3235:9;3231:22;3199:64;:::i;:::-;3189:74;;3144:129;3312:2;3338:64;3394:7;3385:6;3374:9;3370:22;3338:64;:::i;:::-;3328:74;;3283:129;3451:2;3477:64;3533:7;3524:6;3513:9;3509:22;3477:64;:::i;:::-;3467:74;;3422:129;2933:625;;;;;;;:::o;3564:108::-;3641:24;3659:5;3641:24;:::i;:::-;3636:3;3629:37;3619:53;;:::o;3678:118::-;3765:24;3783:5;3765:24;:::i;:::-;3760:3;3753:37;3743:53;;:::o;3802:109::-;3883:21;3898:5;3883:21;:::i;:::-;3878:3;3871:34;3861:50;;:::o;3917:102::-;3990:22;4006:5;3990:22;:::i;:::-;3985:3;3978:35;3968:51;;:::o;4025:364::-;;4141:39;4174:5;4141:39;:::i;:::-;4196:71;4260:6;4255:3;4196:71;:::i;:::-;4189:78;;4276:52;4321:6;4316:3;4309:4;4302:5;4298:16;4276:52;:::i;:::-;4353:29;4375:6;4353:29;:::i;:::-;4348:3;4344:39;4337:46;;4117:272;;;;;:::o;4395:369::-;;4558:67;4622:2;4617:3;4558:67;:::i;:::-;4551:74;;4655:34;4651:1;4646:3;4642:11;4635:55;4721:7;4716:2;4711:3;4707:12;4700:29;4755:2;4750:3;4746:12;4739:19;;4541:223;;;:::o;4770:330::-;;4933:67;4997:2;4992:3;4933:67;:::i;:::-;4926:74;;5030:34;5026:1;5021:3;5017:11;5010:55;5091:2;5086:3;5082:12;5075:19;;4916:184;;;:::o;5212:1449::-;5389:4;5384:3;5380:14;5479:4;5472:5;5468:16;5462:23;5498:63;5555:4;5550:3;5546:14;5532:12;5498:63;:::i;:::-;5404:167;5657:4;5650:5;5646:16;5640:23;5676:63;5733:4;5728:3;5724:14;5710:12;5676:63;:::i;:::-;5581:168;5836:4;5829:5;5825:16;5819:23;5855:63;5912:4;5907:3;5903:14;5889:12;5855:63;:::i;:::-;5759:169;6014:4;6007:5;6003:16;5997:23;6033:63;6090:4;6085:3;6081:14;6067:12;6033:63;:::i;:::-;5938:168;6192:4;6185:5;6181:16;6175:23;6211:63;6268:4;6263:3;6259:14;6245:12;6211:63;:::i;:::-;6116:168;6378:4;6371:5;6367:16;6361:23;6397:63;6454:4;6449:3;6445:14;6431:12;6397:63;:::i;:::-;6294:176;6562:4;6555:5;6551:16;6545:23;6581:63;6638:4;6633:3;6629:14;6615:12;6581:63;:::i;:::-;6480:174;5358:1303;;;:::o;6753:1962::-;6906:6;6901:3;6897:16;6997:4;6990:5;6986:16;6980:23;7016:63;7073:4;7068:3;7064:14;7050:12;7016:63;:::i;:::-;6923:166;7173:4;7166:5;7162:16;7156:23;7192:63;7249:4;7244:3;7240:14;7226:12;7192:63;:::i;:::-;7099:166;7352:4;7345:5;7341:16;7335:23;7371:59;7424:4;7419:3;7415:14;7401:12;7371:59;:::i;:::-;7275:165;7527:4;7520:5;7516:16;7510:23;7546:59;7599:4;7594:3;7590:14;7576:12;7546:59;:::i;:::-;7450:165;7707:4;7700:5;7696:16;7690:23;7726:63;7783:4;7778:3;7774:14;7760:12;7726:63;:::i;:::-;7625:174;7891:4;7884:5;7880:16;7874:23;7910:63;7967:4;7962:3;7958:14;7944:12;7910:63;:::i;:::-;7809:174;8071:4;8064:5;8060:16;8054:23;8090:63;8147:4;8142:3;8138:14;8124:12;8090:63;:::i;:::-;7993:170;8251:4;8244:5;8240:16;8234:23;8270:63;8327:4;8322:3;8318:14;8304:12;8270:63;:::i;:::-;8173:170;8430:6;8423:5;8419:18;8413:25;8451:65;8508:6;8503:3;8499:16;8485:12;8451:65;:::i;:::-;8353:173;8612:6;8605:5;8601:18;8595:25;8633:65;8690:6;8685:3;8681:16;8667:12;8633:65;:::i;:::-;8536:172;6875:1840;;;:::o;8721:108::-;8798:24;8816:5;8798:24;:::i;:::-;8793:3;8786:37;8776:53;;:::o;8835:115::-;8920:23;8937:5;8920:23;:::i;:::-;8915:3;8908:36;8898:52;;:::o;8956:108::-;9033:24;9051:5;9033:24;:::i;:::-;9028:3;9021:37;9011:53;;:::o;9070:118::-;9157:24;9175:5;9157:24;:::i;:::-;9152:3;9145:37;9135:53;;:::o;9194:112::-;9277:22;9293:5;9277:22;:::i;:::-;9272:3;9265:35;9255:51;;:::o;9312:222::-;;9443:2;9432:9;9428:18;9420:26;;9456:71;9524:1;9513:9;9509:17;9500:6;9456:71;:::i;:::-;9410:124;;;;:::o;9540:210::-;;9665:2;9654:9;9650:18;9642:26;;9678:65;9740:1;9729:9;9725:17;9716:6;9678:65;:::i;:::-;9632:118;;;;:::o;9756:313::-;;9907:2;9896:9;9892:18;9884:26;;9956:9;9950:4;9946:20;9942:1;9931:9;9927:17;9920:47;9984:78;10057:4;10048:6;9984:78;:::i;:::-;9976:86;;9874:195;;;;:::o;10075:419::-;;10279:2;10268:9;10264:18;10256:26;;10328:9;10322:4;10318:20;10314:1;10303:9;10299:17;10292:47;10356:131;10482:4;10356:131;:::i;:::-;10348:139;;10246:248;;;:::o;10500:419::-;;10704:2;10693:9;10689:18;10681:26;;10753:9;10747:4;10743:20;10739:1;10728:9;10724:17;10717:47;10781:131;10907:4;10781:131;:::i;:::-;10773:139;;10671:248;;;:::o;10925:383::-;;11136:3;11125:9;11121:19;11113:27;;11150:151;11298:1;11287:9;11283:17;11274:6;11150:151;:::i;:::-;11103:205;;;;:::o;11314:335::-;;11501:3;11490:9;11486:19;11478:27;;11515:127;11639:1;11628:9;11624:17;11615:6;11515:127;:::i;:::-;11468:181;;;;:::o;11655:218::-;;11784:2;11773:9;11769:18;11761:26;;11797:69;11863:1;11852:9;11848:17;11839:6;11797:69;:::i;:::-;11751:122;;;;:::o;11879:222::-;;12010:2;11999:9;11995:18;11987:26;;12023:71;12091:1;12080:9;12076:17;12067:6;12023:71;:::i;:::-;11977:124;;;;:::o;12107:214::-;;12234:2;12223:9;12219:18;12211:26;;12247:67;12311:1;12300:9;12296:17;12287:6;12247:67;:::i;:::-;12201:120;;;;:::o;12327:99::-;;12413:5;12407:12;12397:22;;12386:40;;;:::o;12432:169::-;;12550:6;12545:3;12538:19;12590:4;12585:3;12581:14;12566:29;;12528:73;;;;:::o;12607:96::-;;12673:24;12691:5;12673:24;:::i;:::-;12662:35;;12652:51;;;:::o;12709:90::-;;12786:5;12779:13;12772:21;12761:32;;12751:48;;;:::o;12805:90::-;;12883:5;12880:1;12869:20;12858:31;;12848:47;;;:::o;12901:118::-;;12978:34;12971:5;12967:46;12956:57;;12946:73;;;:::o;13025:126::-;;13102:42;13095:5;13091:54;13080:65;;13070:81;;;:::o;13157:91::-;;13233:8;13226:5;13222:20;13211:31;;13201:47;;;:::o;13254:77::-;;13320:5;13309:16;;13299:32;;;:::o;13337:86::-;;13412:4;13405:5;13401:16;13390:27;;13380:43;;;:::o;13429:307::-;13497:1;13507:113;13521:6;13518:1;13515:13;13507:113;;;13606:1;13601:3;13597:11;13591:18;13587:1;13582:3;13578:11;13571:39;13543:2;13540:1;13536:10;13531:15;;13507:113;;;13638:6;13635:1;13632:13;13629:2;;;13718:1;13709:6;13704:3;13700:16;13693:27;13629:2;13478:258;;;;:::o;13742:102::-;;13834:2;13830:7;13825:2;13818:5;13814:14;13810:28;13800:38;;13790:54;;;:::o;13850:122::-;13923:24;13941:5;13923:24;:::i;:::-;13916:5;13913:35;13903:2;;13962:1;13959;13952:12;13903:2;13893:79;:::o;13978:122::-;14051:24;14069:5;14051:24;:::i;:::-;14044:5;14041:35;14031:2;;14090:1;14087;14080:12;14031:2;14021:79;:::o;14106:122::-;14179:24;14197:5;14179:24;:::i;:::-;14172:5;14169:35;14159:2;;14218:1;14215;14208:12;14159:2;14149:79;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1762200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"admin_address()": "1330",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1586",
								"decimals()": "1268",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"initialize(uint256)": "infinite",
								"initialized()": "1244",
								"name()": "infinite",
								"poolFee()": "381",
								"symbol()": "infinite",
								"totalSupply()": "1182",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "80"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "CALLVALUE",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 1424,
									"end": 1527,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "476F6C6400000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "474C440000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2025,
									"end": 2030,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2022,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "tag",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2050,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2047,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "tag",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2079,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1483,
									"end": 1493,
									"name": "CALLER",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1480,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 1467,
									"end": 1480,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "PUSH",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "EXP",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "PUSH",
									"source": 17,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "MUL",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "PUSH",
									"source": 17,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "MUL",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1467,
									"end": 1493,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 1515,
									"end": 1520,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 1501,
									"end": 1512,
									"name": "PUSH",
									"source": 17,
									"value": "5"
								},
								{
									"begin": 1501,
									"end": 1512,
									"name": "PUSH",
									"source": 17,
									"value": "15"
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "PUSH",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "EXP",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "PUSH",
									"source": 17,
									"value": "FF"
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "MUL",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "MUL",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 1501,
									"end": 1520,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "9"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "6"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "MUL",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SUB",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "2"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DIV",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DIV",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "11"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "10"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "11"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "1F"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "LT",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "12"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "FF"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "NOT",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "10"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "12"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP6",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "10"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "13"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "14"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "13"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "14"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "10"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "15"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "16"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17,
									"value": "[in]"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "15"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17,
									"value": "[out]"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "16"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "17"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "GT",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "18"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "17"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "18"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMP",
									"source": 17,
									"value": "[out]"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "tag",
									"source": 17,
									"value": "9"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 5184,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220da198d312af2344e713af94273152e102c4c89417f6055910a93a2406af9c74764736f6c63430007060033",
									".code": [
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "tag",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "SHR",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "39509351"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "14"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "DD62ED3E"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "F2E62772"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "FE4B84DF"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "tag",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "39509351"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "10"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "11"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "95D89B41"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "A457C2D7"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "13"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "tag",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "158EF93E"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "158EF93E"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "18160DDD"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "23B872DD"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "313CE567"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "tag",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "6FDDE03"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "89FE6AA"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "95EA7B3"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "tag",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 450,
											"end": 5184,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "tag",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "26"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "tag",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "28"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "tag",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "tag",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "35"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "36"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "tag",
											"source": 17,
											"value": "35"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "34"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "tag",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "tag",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "76"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "tag",
											"source": 17,
											"value": "76"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "78"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "79"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "tag",
											"source": 17,
											"value": "78"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "tag",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "81"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "82"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "tag",
											"source": 17,
											"value": "81"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "83"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "tag",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "STOP",
											"source": 17
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2198,
											"end": 2211,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "tag",
											"source": 17,
											"value": "26"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1382,
											"end": 1386,
											"name": "PUSH",
											"source": 17,
											"value": "BB8"
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1349,
											"end": 1386,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4312,
											"end": 4316,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 4337,
											"end": 4347,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4360,
											"end": 4366,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4328,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4384,
											"end": 4388,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "tag",
											"source": 17,
											"value": "36"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "EXP",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1391,
											"end": 1414,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3281,
											"end": 3288,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4968,
											"end": 4972,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 4994,
											"end": 5000,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5002,
											"end": 5011,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4984,
											"end": 4993,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "tag",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 5039,
											"end": 5045,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 5047,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5099,
											"end": 5105,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH data",
											"source": 2,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5072,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5073,
											"end": 5079,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5081,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5168,
											"end": 5172,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5662,
											"end": 5666,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 5687,
											"end": 5697,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5701,
											"end": 5708,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 5749,
											"end": 5759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5721,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 5722,
											"end": 5732,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5736,
											"end": 5743,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5678,
											"end": 5686,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5778,
											"end": 5782,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3458,
											"end": 3465,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3493,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2402,
											"end": 2415,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2434,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6369,
											"end": 6373,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 6394,
											"end": 6404,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6408,
											"end": 6415,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 6456,
											"end": 6471,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH data",
											"source": 2,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6428,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 6429,
											"end": 6439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6443,
											"end": 6450,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6385,
											"end": 6393,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6531,
											"end": 6535,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3798,
											"end": 3802,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3824,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3838,
											"end": 3847,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3849,
											"end": 3855,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3814,
											"end": 3823,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3873,
											"end": 3877,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4031,
											"end": 4038,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4068,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4083,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "tag",
											"source": 17,
											"value": "77"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "EXP",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1316,
											"end": 1344,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "tag",
											"source": 17,
											"value": "83"
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "PUSH",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "EXP",
											"source": 17
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1616,
											"end": 1629,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1602,
											"end": 1629,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1602,
											"end": 1629,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1602,
											"end": 1612,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 1602,
											"end": 1629,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1602,
											"end": 1629,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1602,
											"end": 1629,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "124"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "PUSH",
											"source": 17,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "125"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "126"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "tag",
											"source": 17,
											"value": "125"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "tag",
											"source": 17,
											"value": "124"
										},
										{
											"begin": 1594,
											"end": 1666,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1702,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1682,
											"end": 1702,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1702,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "PUSH",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "PUSH",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "EXP",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 1682,
											"end": 1693,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1702,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1702,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1682,
											"end": 1702,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "127"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "PUSH",
											"source": 17,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "128"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "129"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "tag",
											"source": 17,
											"value": "128"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "tag",
											"source": 17,
											"value": "127"
										},
										{
											"begin": 1674,
											"end": 1744,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1766,
											"end": 1770,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 1752,
											"end": 1763,
											"name": "PUSH",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 1752,
											"end": 1763,
											"name": "PUSH",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "PUSH",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "EXP",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "PUSH",
											"source": 17,
											"value": "FF"
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 1752,
											"end": 1770,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1778,
											"end": 1858,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "130"
										},
										{
											"begin": 505,
											"end": 547,
											"name": "PUSH",
											"source": 17,
											"value": "2791BCA1F2DE4661ED88A30C99A7A9449AA84174"
										},
										{
											"begin": 1816,
											"end": 1826,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 1836,
											"end": 1840,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 1843,
											"end": 1857,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1778,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "131"
										},
										{
											"begin": 1778,
											"end": 1858,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1778,
											"end": 1858,
											"name": "tag",
											"source": 17,
											"value": "130"
										},
										{
											"begin": 1778,
											"end": 1858,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1866,
											"end": 1936,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 505,
											"end": 547,
											"name": "PUSH",
											"source": 17,
											"value": "2791BCA1F2DE4661ED88A30C99A7A9449AA84174"
										},
										{
											"begin": 1187,
											"end": 1229,
											"name": "PUSH",
											"source": 17,
											"value": "F5B509BB0909A69B1C207E495F687A596C168E12"
										},
										{
											"begin": 1921,
											"end": 1935,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1866,
											"end": 1892,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 1866,
											"end": 1936,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1866,
											"end": 1936,
											"name": "tag",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 1866,
											"end": 1936,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1944,
											"end": 1960,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1978,
											"end": 1979,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 1963,
											"end": 1977,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1963,
											"end": 1979,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1963,
											"end": 1979,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "134"
										},
										{
											"begin": 1963,
											"end": 1979,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1963,
											"end": 1979,
											"name": "INVALID",
											"source": 17
										},
										{
											"begin": 1963,
											"end": 1979,
											"name": "tag",
											"source": 17,
											"value": "134"
										},
										{
											"begin": 1963,
											"end": 1979,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1963,
											"end": 1979,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 1944,
											"end": 1979,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1944,
											"end": 1979,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1988,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "135"
										},
										{
											"begin": 1988,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 1988,
											"end": 2042,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1988,
											"end": 2042,
											"name": "tag",
											"source": 17,
											"value": "135"
										},
										{
											"begin": 1988,
											"end": 2042,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 505,
											"end": 547,
											"name": "PUSH",
											"source": 17,
											"value": "2791BCA1F2DE4661ED88A30C99A7A9449AA84174"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 574,
											"end": 616,
											"name": "PUSH",
											"source": 17,
											"value": "8F3CF7AD23CD3CADBD9735AFF958023239C6A063"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2199,
											"end": 2203,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2232,
											"end": 2247,
											"name": "TIMESTAMP",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2284,
											"end": 2285,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 2275,
											"end": 2283,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2275,
											"end": 2285,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2275,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "137"
										},
										{
											"begin": 2275,
											"end": 2285,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2275,
											"end": 2285,
											"name": "INVALID",
											"source": 17
										},
										{
											"begin": 2275,
											"end": 2285,
											"name": "tag",
											"source": 17,
											"value": "137"
										},
										{
											"begin": 2275,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2275,
											"end": 2285,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2321,
											"end": 2322,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2356,
											"end": 2357,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2059,
											"end": 2370,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2050,
											"end": 2370,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2050,
											"end": 2370,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2378,
											"end": 2396,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1229,
											"name": "PUSH",
											"source": 17,
											"value": "F5B509BB0909A69B1C207E495F687A596C168E12"
										},
										{
											"begin": 2399,
											"end": 2455,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2399,
											"end": 2455,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2455,
											"name": "PUSH",
											"source": 17,
											"value": "BC651188"
										},
										{
											"begin": 2456,
											"end": 2462,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "138"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "139"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "tag",
											"source": 17,
											"value": "138"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "140"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "tag",
											"source": 17,
											"value": "140"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "142"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "tag",
											"source": 17,
											"value": "142"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "143"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "144"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "tag",
											"source": 17,
											"value": "143"
										},
										{
											"begin": 2399,
											"end": 2463,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2378,
											"end": 2463,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2378,
											"end": 2463,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 647,
											"end": 689,
											"name": "PUSH",
											"source": 17,
											"value": "750E4C4984A9E0F12978EA6742BC1C5D248F40ED"
										},
										{
											"begin": 2471,
											"end": 2477,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2486,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2471,
											"end": 2486,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2471,
											"end": 2496,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2504,
											"end": 2526,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1229,
											"name": "PUSH",
											"source": 17,
											"value": "F5B509BB0909A69B1C207E495F687A596C168E12"
										},
										{
											"begin": 2529,
											"end": 2585,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2529,
											"end": 2585,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2585,
											"name": "PUSH",
											"source": 17,
											"value": "BC651188"
										},
										{
											"begin": 2586,
											"end": 2592,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "145"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "139"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "tag",
											"source": 17,
											"value": "145"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "146"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "tag",
											"source": 17,
											"value": "146"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "148"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "tag",
											"source": 17,
											"value": "148"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "149"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "144"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "tag",
											"source": 17,
											"value": "149"
										},
										{
											"begin": 2529,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2504,
											"end": 2593,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2504,
											"end": 2593,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 716,
											"end": 758,
											"name": "PUSH",
											"source": 17,
											"value": "B0B195AEFA3650A6908F15CDAC7D92F8A5791B0B"
										},
										{
											"begin": 2601,
											"end": 2607,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2616,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2601,
											"end": 2616,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2601,
											"end": 2622,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2630,
											"end": 2648,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1229,
											"name": "PUSH",
											"source": 17,
											"value": "F5B509BB0909A69B1C207E495F687A596C168E12"
										},
										{
											"begin": 2651,
											"end": 2707,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2651,
											"end": 2707,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2707,
											"name": "PUSH",
											"source": 17,
											"value": "BC651188"
										},
										{
											"begin": 2708,
											"end": 2714,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "150"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "139"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "tag",
											"source": 17,
											"value": "150"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "151"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "tag",
											"source": 17,
											"value": "151"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "153"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "tag",
											"source": 17,
											"value": "153"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "154"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "144"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "tag",
											"source": 17,
											"value": "154"
										},
										{
											"begin": 2651,
											"end": 2715,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2630,
											"end": 2715,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2630,
											"end": 2715,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2724,
											"end": 2787,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "155"
										},
										{
											"begin": 505,
											"end": 547,
											"name": "PUSH",
											"source": 17,
											"value": "2791BCA1F2DE4661ED88A30C99A7A9449AA84174"
										},
										{
											"begin": 1101,
											"end": 1143,
											"name": "PUSH",
											"source": 17,
											"value": "8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6"
										},
										{
											"begin": 2778,
											"end": 2786,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 2724,
											"end": 2750,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 2724,
											"end": 2787,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2724,
											"end": 2787,
											"name": "tag",
											"source": 17,
											"value": "155"
										},
										{
											"begin": 2724,
											"end": 2787,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2795,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "156"
										},
										{
											"begin": 574,
											"end": 616,
											"name": "PUSH",
											"source": 17,
											"value": "8F3CF7AD23CD3CADBD9735AFF958023239C6A063"
										},
										{
											"begin": 1101,
											"end": 1143,
											"name": "PUSH",
											"source": 17,
											"value": "8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6"
										},
										{
											"begin": 2848,
											"end": 2858,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 2795,
											"end": 2821,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 2795,
											"end": 2859,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2795,
											"end": 2859,
											"name": "tag",
											"source": 17,
											"value": "156"
										},
										{
											"begin": 2795,
											"end": 2859,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2868,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "157"
										},
										{
											"begin": 2868,
											"end": 2917,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "158"
										},
										{
											"begin": 2868,
											"end": 2917,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2868,
											"end": 2917,
											"name": "tag",
											"source": 17,
											"value": "157"
										},
										{
											"begin": 2868,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "140"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 574,
											"end": 616,
											"name": "PUSH",
											"source": 17,
											"value": "8F3CF7AD23CD3CADBD9735AFF958023239C6A063"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 505,
											"end": 547,
											"name": "PUSH",
											"source": 17,
											"value": "2791BCA1F2DE4661ED88A30C99A7A9449AA84174"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3052,
											"end": 3058,
											"name": "PUSH",
											"source": 17,
											"value": "41052"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "SIGNEXTEND",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3085,
											"end": 3091,
											"name": "PUSH",
											"source": 17,
											"value": "45E72"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "SIGNEXTEND",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3123,
											"end": 3133,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3174,
											"end": 3175,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 3165,
											"end": 3173,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 3165,
											"end": 3175,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3165,
											"end": 3175,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "159"
										},
										{
											"begin": 3165,
											"end": 3175,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3165,
											"end": 3175,
											"name": "INVALID",
											"source": 17
										},
										{
											"begin": 3165,
											"end": 3175,
											"name": "tag",
											"source": 17,
											"value": "159"
										},
										{
											"begin": 3165,
											"end": 3175,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3165,
											"end": 3175,
											"name": "DIV",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3203,
											"end": 3204,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3232,
											"end": 3233,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3269,
											"end": 3273,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3300,
											"end": 3315,
											"name": "TIMESTAMP",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2939,
											"end": 3328,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2925,
											"end": 3328,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 2925,
											"end": 3328,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1101,
											"end": 1143,
											"name": "PUSH",
											"source": 17,
											"value": "8EF88E4C7CFBBAC1C163F7EDDD4B578792201DE6"
										},
										{
											"begin": 3336,
											"end": 3381,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3336,
											"end": 3381,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3381,
											"name": "PUSH",
											"source": 17,
											"value": "9CC1A283"
										},
										{
											"begin": 3382,
											"end": 3393,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "161"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "tag",
											"source": 17,
											"value": "160"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "162"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "tag",
											"source": 17,
											"value": "162"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "164"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "tag",
											"source": 17,
											"value": "164"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "165"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "166"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "tag",
											"source": 17,
											"value": "165"
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3336,
											"end": 3394,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1533,
											"end": 3403,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 651,
											"end": 666,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 678,
											"end": 695,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 678,
											"end": 695,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9458,
											"end": 9459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH data",
											"source": 2,
											"value": "C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9538,
											"end": 9539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9526,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH data",
											"source": 2,
											"value": "24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9620,
											"end": 9626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9601,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9602,
											"end": 9607,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9609,
											"end": 9616,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9657,
											"end": 9664,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9650,
											"end": 9655,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9666,
											"end": 9672,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7139,
											"end": 7140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7127,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH data",
											"source": 2,
											"value": "BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7222,
											"end": 7223,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7210,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH data",
											"source": 2,
											"value": "557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 7296,
											"end": 7302,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7304,
											"end": 7313,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7315,
											"end": 7321,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "tag",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 7375,
											"end": 7381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH data",
											"source": 2,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7363,
											"end": 7369,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7342,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7343,
											"end": 7349,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 7482,
											"end": 7488,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7466,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7476,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7443,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7444,
											"end": 7453,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7521,
											"end": 7530,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7513,
											"end": 7519,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7532,
											"end": 7538,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "tag",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5510,
											"end": 5517,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5542,
											"end": 5543,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5538,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5545,
											"end": 5557,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "182"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "182"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "183"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "183"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5579,
											"end": 5580,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5576,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5580,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "tag",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2740,
											"end": 2747,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2768,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2772,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2776,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2799,
											"end": 2800,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "185"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "1B"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "tag",
											"source": 1,
											"value": "185"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2849,
											"end": 2850,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 561,
											"end": 919,
											"name": "tag",
											"source": 16,
											"value": "131"
										},
										{
											"begin": 561,
											"end": 919,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 701,
											"end": 713,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 715,
											"end": 732,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 753,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 748,
											"end": 758,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 748,
											"end": 758,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 782,
											"end": 810,
											"name": "PUSH",
											"source": 16,
											"value": "23B872DD"
										},
										{
											"begin": 782,
											"end": 810,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 782,
											"end": 810,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 812,
											"end": 816,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 818,
											"end": 820,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 822,
											"end": 827,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 759,
											"end": 828,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "100"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "EXP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "3F"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 16,
											"value": "191"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 700,
											"end": 829,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 700,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 700,
											"end": 829,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 700,
											"end": 829,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 847,
											"end": 854,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 847,
											"end": 904,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 847,
											"end": 904,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 847,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 847,
											"end": 904,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 847,
											"end": 904,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 874,
											"end": 875,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 859,
											"end": 863,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 859,
											"end": 870,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 859,
											"end": 875,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 859,
											"end": 903,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 859,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "194"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 859,
											"end": 903,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 890,
											"end": 894,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "195"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "tag",
											"source": 16,
											"value": "195"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 879,
											"end": 903,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 859,
											"end": 903,
											"name": "tag",
											"source": 16,
											"value": "194"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 847,
											"end": 904,
											"name": "tag",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 847,
											"end": 904,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "5354460000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 839,
											"end": 912,
											"name": "tag",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 561,
											"end": 919,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 561,
											"end": 919,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "tag",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1986,
											"end": 1998,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2000,
											"end": 2017,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2026,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2031,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2021,
											"end": 2031,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2055,
											"end": 2078,
											"name": "PUSH",
											"source": 16,
											"value": "95EA7B3"
										},
										{
											"begin": 2055,
											"end": 2078,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 2055,
											"end": 2078,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 2080,
											"end": 2082,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2084,
											"end": 2089,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2032,
											"end": 2090,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "tag",
											"source": 16,
											"value": "198"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "200"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "198"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "tag",
											"source": 16,
											"value": "200"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "100"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "EXP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "203"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "3F"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "202"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "tag",
											"source": 16,
											"value": "203"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "tag",
											"source": 16,
											"value": "202"
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2021,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1985,
											"end": 2091,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1985,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1985,
											"end": 2091,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1985,
											"end": 2091,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2109,
											"end": 2116,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2136,
											"end": 2137,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2121,
											"end": 2125,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2121,
											"end": 2132,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2121,
											"end": 2137,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "205"
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2152,
											"end": 2156,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "tag",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2141,
											"end": 2165,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "tag",
											"source": 16,
											"value": "205"
										},
										{
											"begin": 2121,
											"end": 2165,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "tag",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 2109,
											"end": 2166,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "207"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "5341000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "tag",
											"source": 16,
											"value": "207"
										},
										{
											"begin": 2101,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1873,
											"end": 2180,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "136"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "158"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "140"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SIGNEXTEND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SIGNEXTEND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7,
											"end": 146,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "212"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "213"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 19,
											"value": "212"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 59,
											"end": 146,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 59,
											"end": 146,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 59,
											"end": 146,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 295,
											"name": "tag",
											"source": 19,
											"value": "214"
										},
										{
											"begin": 152,
											"end": 295,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 152,
											"end": 295,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 240,
											"end": 246,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 234,
											"end": 247,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 225,
											"end": 247,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 225,
											"end": 247,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 256,
											"end": 289,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "216"
										},
										{
											"begin": 283,
											"end": 288,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 256,
											"end": 289,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "217"
										},
										{
											"begin": 256,
											"end": 289,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 256,
											"end": 289,
											"name": "tag",
											"source": 19,
											"value": "216"
										},
										{
											"begin": 256,
											"end": 289,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 215,
											"end": 295,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 295,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 295,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 215,
											"end": 295,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 215,
											"end": 295,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 301,
											"end": 440,
											"name": "tag",
											"source": 19,
											"value": "218"
										},
										{
											"begin": 301,
											"end": 440,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 301,
											"end": 440,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 385,
											"end": 391,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 372,
											"end": 392,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 363,
											"end": 392,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 363,
											"end": 392,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 401,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "220"
										},
										{
											"begin": 428,
											"end": 433,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 401,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "221"
										},
										{
											"begin": 401,
											"end": 434,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 401,
											"end": 434,
											"name": "tag",
											"source": 19,
											"value": "220"
										},
										{
											"begin": 401,
											"end": 434,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 353,
											"end": 440,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 353,
											"end": 440,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 353,
											"end": 440,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 353,
											"end": 440,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 353,
											"end": 440,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 446,
											"end": 589,
											"name": "tag",
											"source": 19,
											"value": "222"
										},
										{
											"begin": 446,
											"end": 589,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 446,
											"end": 589,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 534,
											"end": 540,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 528,
											"end": 541,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 519,
											"end": 541,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 519,
											"end": 541,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 550,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "224"
										},
										{
											"begin": 577,
											"end": 582,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 550,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "221"
										},
										{
											"begin": 550,
											"end": 583,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 550,
											"end": 583,
											"name": "tag",
											"source": 19,
											"value": "224"
										},
										{
											"begin": 550,
											"end": 583,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 509,
											"end": 589,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 509,
											"end": 589,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 509,
											"end": 589,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 509,
											"end": 589,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 509,
											"end": 589,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 595,
											"end": 857,
											"name": "tag",
											"source": 19,
											"value": "57"
										},
										{
											"begin": 595,
											"end": 857,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 595,
											"end": 857,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 705,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 691,
											"end": 700,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 682,
											"end": 689,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 678,
											"end": 701,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 674,
											"end": 706,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 671,
											"end": 673,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 671,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "226"
										},
										{
											"begin": 671,
											"end": 673,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 719,
											"end": 720,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 716,
											"end": 717,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 709,
											"end": 721,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 671,
											"end": 673,
											"name": "tag",
											"source": 19,
											"value": "226"
										},
										{
											"begin": 671,
											"end": 673,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 762,
											"end": 763,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 787,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "227"
										},
										{
											"begin": 832,
											"end": 839,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 823,
											"end": 829,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 812,
											"end": 821,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 808,
											"end": 830,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 787,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 787,
											"end": 840,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 787,
											"end": 840,
											"name": "tag",
											"source": 19,
											"value": "227"
										},
										{
											"begin": 787,
											"end": 840,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 777,
											"end": 840,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 777,
											"end": 840,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 733,
											"end": 850,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 661,
											"end": 857,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 661,
											"end": 857,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 661,
											"end": 857,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 661,
											"end": 857,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 661,
											"end": 857,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 863,
											"end": 1270,
											"name": "tag",
											"source": 19,
											"value": "73"
										},
										{
											"begin": 863,
											"end": 1270,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 863,
											"end": 1270,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 863,
											"end": 1270,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 988,
											"end": 990,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 976,
											"end": 985,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 967,
											"end": 974,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 963,
											"end": 986,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 959,
											"end": 991,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 956,
											"end": 958,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 956,
											"end": 958,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "229"
										},
										{
											"begin": 956,
											"end": 958,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1004,
											"end": 1005,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1001,
											"end": 1002,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 994,
											"end": 1006,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 956,
											"end": 958,
											"name": "tag",
											"source": 19,
											"value": "229"
										},
										{
											"begin": 956,
											"end": 958,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1047,
											"end": 1048,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1072,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "230"
										},
										{
											"begin": 1117,
											"end": 1124,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1097,
											"end": 1106,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1093,
											"end": 1115,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1072,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 1072,
											"end": 1125,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 1072,
											"end": 1125,
											"name": "tag",
											"source": 19,
											"value": "230"
										},
										{
											"begin": 1072,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1062,
											"end": 1125,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1062,
											"end": 1125,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1018,
											"end": 1135,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1174,
											"end": 1176,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1200,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "231"
										},
										{
											"begin": 1245,
											"end": 1252,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1236,
											"end": 1242,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1225,
											"end": 1234,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1221,
											"end": 1243,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1200,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 1200,
											"end": 1253,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 1200,
											"end": 1253,
											"name": "tag",
											"source": 19,
											"value": "231"
										},
										{
											"begin": 1200,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1190,
											"end": 1253,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1190,
											"end": 1253,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1145,
											"end": 1263,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 946,
											"end": 1270,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 946,
											"end": 1270,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 946,
											"end": 1270,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 946,
											"end": 1270,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 946,
											"end": 1270,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 946,
											"end": 1270,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 1276,
											"end": 1828,
											"name": "tag",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 1276,
											"end": 1828,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1276,
											"end": 1828,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1276,
											"end": 1828,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1276,
											"end": 1828,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1418,
											"end": 1420,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 1406,
											"end": 1415,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1397,
											"end": 1404,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1393,
											"end": 1416,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1389,
											"end": 1421,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 1386,
											"end": 1388,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1386,
											"end": 1388,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "233"
										},
										{
											"begin": 1386,
											"end": 1388,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1434,
											"end": 1435,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1431,
											"end": 1432,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1424,
											"end": 1436,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1386,
											"end": 1388,
											"name": "tag",
											"source": 19,
											"value": "233"
										},
										{
											"begin": 1386,
											"end": 1388,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1477,
											"end": 1478,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "234"
										},
										{
											"begin": 1547,
											"end": 1554,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1538,
											"end": 1544,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1527,
											"end": 1536,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 1523,
											"end": 1545,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "tag",
											"source": 19,
											"value": "234"
										},
										{
											"begin": 1502,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1492,
											"end": 1555,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 1492,
											"end": 1555,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1448,
											"end": 1565,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1604,
											"end": 1606,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1630,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "235"
										},
										{
											"begin": 1675,
											"end": 1682,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1666,
											"end": 1672,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1655,
											"end": 1664,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 1651,
											"end": 1673,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1630,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 1630,
											"end": 1683,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 1630,
											"end": 1683,
											"name": "tag",
											"source": 19,
											"value": "235"
										},
										{
											"begin": 1630,
											"end": 1683,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1620,
											"end": 1683,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1620,
											"end": 1683,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1575,
											"end": 1693,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1732,
											"end": 1734,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "236"
										},
										{
											"begin": 1803,
											"end": 1810,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1794,
											"end": 1800,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1783,
											"end": 1792,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 1779,
											"end": 1801,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "218"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "tag",
											"source": 19,
											"value": "236"
										},
										{
											"begin": 1758,
											"end": 1811,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1748,
											"end": 1811,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1748,
											"end": 1811,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1703,
											"end": 1821,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1376,
											"end": 1828,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1376,
											"end": 1828,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1376,
											"end": 1828,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1376,
											"end": 1828,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1376,
											"end": 1828,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1376,
											"end": 1828,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 1834,
											"end": 2241,
											"name": "tag",
											"source": 19,
											"value": "31"
										},
										{
											"begin": 1834,
											"end": 2241,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1834,
											"end": 2241,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1834,
											"end": 2241,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1959,
											"end": 1961,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1947,
											"end": 1956,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1938,
											"end": 1945,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1934,
											"end": 1957,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1930,
											"end": 1962,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 1927,
											"end": 1929,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1927,
											"end": 1929,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "238"
										},
										{
											"begin": 1927,
											"end": 1929,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1975,
											"end": 1976,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1972,
											"end": 1973,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1965,
											"end": 1977,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1927,
											"end": 1929,
											"name": "tag",
											"source": 19,
											"value": "238"
										},
										{
											"begin": 1927,
											"end": 1929,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2018,
											"end": 2019,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2043,
											"end": 2096,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "239"
										},
										{
											"begin": 2088,
											"end": 2095,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2079,
											"end": 2085,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2068,
											"end": 2077,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 2064,
											"end": 2086,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2043,
											"end": 2096,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 2043,
											"end": 2096,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 2043,
											"end": 2096,
											"name": "tag",
											"source": 19,
											"value": "239"
										},
										{
											"begin": 2043,
											"end": 2096,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2033,
											"end": 2096,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2033,
											"end": 2096,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1989,
											"end": 2106,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2145,
											"end": 2147,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2171,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "240"
										},
										{
											"begin": 2216,
											"end": 2223,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2207,
											"end": 2213,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2196,
											"end": 2205,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 2192,
											"end": 2214,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2171,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "218"
										},
										{
											"begin": 2171,
											"end": 2224,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 2171,
											"end": 2224,
											"name": "tag",
											"source": 19,
											"value": "240"
										},
										{
											"begin": 2171,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2161,
											"end": 2224,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2161,
											"end": 2224,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2116,
											"end": 2234,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1917,
											"end": 2241,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1917,
											"end": 2241,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1917,
											"end": 2241,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1917,
											"end": 2241,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1917,
											"end": 2241,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1917,
											"end": 2241,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 2247,
											"end": 2509,
											"name": "tag",
											"source": 19,
											"value": "82"
										},
										{
											"begin": 2247,
											"end": 2509,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2247,
											"end": 2509,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2355,
											"end": 2357,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2343,
											"end": 2352,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2334,
											"end": 2341,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2330,
											"end": 2353,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2326,
											"end": 2358,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2323,
											"end": 2325,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2323,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "242"
										},
										{
											"begin": 2323,
											"end": 2325,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2371,
											"end": 2372,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2368,
											"end": 2369,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2361,
											"end": 2373,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2323,
											"end": 2325,
											"name": "tag",
											"source": 19,
											"value": "242"
										},
										{
											"begin": 2323,
											"end": 2325,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2414,
											"end": 2415,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2439,
											"end": 2492,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "243"
										},
										{
											"begin": 2484,
											"end": 2491,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2475,
											"end": 2481,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2464,
											"end": 2473,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2460,
											"end": 2482,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2439,
											"end": 2492,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "218"
										},
										{
											"begin": 2439,
											"end": 2492,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 2439,
											"end": 2492,
											"name": "tag",
											"source": 19,
											"value": "243"
										},
										{
											"begin": 2439,
											"end": 2492,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2429,
											"end": 2492,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2429,
											"end": 2492,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2385,
											"end": 2502,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2313,
											"end": 2509,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2313,
											"end": 2509,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2313,
											"end": 2509,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2313,
											"end": 2509,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2313,
											"end": 2509,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 2515,
											"end": 2799,
											"name": "tag",
											"source": 19,
											"value": "144"
										},
										{
											"begin": 2515,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2515,
											"end": 2799,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2634,
											"end": 2636,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2622,
											"end": 2631,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2613,
											"end": 2620,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2609,
											"end": 2632,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2605,
											"end": 2637,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2602,
											"end": 2604,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2602,
											"end": 2604,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "245"
										},
										{
											"begin": 2602,
											"end": 2604,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2650,
											"end": 2651,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2647,
											"end": 2648,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2640,
											"end": 2652,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2602,
											"end": 2604,
											"name": "tag",
											"source": 19,
											"value": "245"
										},
										{
											"begin": 2602,
											"end": 2604,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2693,
											"end": 2694,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2718,
											"end": 2782,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "246"
										},
										{
											"begin": 2774,
											"end": 2781,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2754,
											"end": 2763,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2750,
											"end": 2772,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2718,
											"end": 2782,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "222"
										},
										{
											"begin": 2718,
											"end": 2782,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 2718,
											"end": 2782,
											"name": "tag",
											"source": 19,
											"value": "246"
										},
										{
											"begin": 2718,
											"end": 2782,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2708,
											"end": 2782,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2708,
											"end": 2782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2664,
											"end": 2792,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2592,
											"end": 2799,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2592,
											"end": 2799,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2592,
											"end": 2799,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2592,
											"end": 2799,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2592,
											"end": 2799,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 2805,
											"end": 3558,
											"name": "tag",
											"source": 19,
											"value": "166"
										},
										{
											"begin": 2805,
											"end": 3558,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2805,
											"end": 3558,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2805,
											"end": 3558,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2805,
											"end": 3558,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2805,
											"end": 3558,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2975,
											"end": 2978,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 2963,
											"end": 2972,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2954,
											"end": 2961,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 2950,
											"end": 2973,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2946,
											"end": 2979,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2943,
											"end": 2945,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2943,
											"end": 2945,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "248"
										},
										{
											"begin": 2943,
											"end": 2945,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2992,
											"end": 2993,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2989,
											"end": 2990,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2982,
											"end": 2994,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2943,
											"end": 2945,
											"name": "tag",
											"source": 19,
											"value": "248"
										},
										{
											"begin": 2943,
											"end": 2945,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3035,
											"end": 3036,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3060,
											"end": 3124,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "249"
										},
										{
											"begin": 3116,
											"end": 3123,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 3107,
											"end": 3113,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3096,
											"end": 3105,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 3092,
											"end": 3114,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3060,
											"end": 3124,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "222"
										},
										{
											"begin": 3060,
											"end": 3124,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3060,
											"end": 3124,
											"name": "tag",
											"source": 19,
											"value": "249"
										},
										{
											"begin": 3060,
											"end": 3124,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3050,
											"end": 3124,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 3050,
											"end": 3124,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3006,
											"end": 3134,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3173,
											"end": 3175,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3199,
											"end": 3263,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "250"
										},
										{
											"begin": 3255,
											"end": 3262,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 3246,
											"end": 3252,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3235,
											"end": 3244,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 3231,
											"end": 3253,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3199,
											"end": 3263,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "214"
										},
										{
											"begin": 3199,
											"end": 3263,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3199,
											"end": 3263,
											"name": "tag",
											"source": 19,
											"value": "250"
										},
										{
											"begin": 3199,
											"end": 3263,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3189,
											"end": 3263,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 3189,
											"end": 3263,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3144,
											"end": 3273,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3312,
											"end": 3314,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3338,
											"end": 3402,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "251"
										},
										{
											"begin": 3394,
											"end": 3401,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 3385,
											"end": 3391,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3374,
											"end": 3383,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 3370,
											"end": 3392,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3338,
											"end": 3402,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "222"
										},
										{
											"begin": 3338,
											"end": 3402,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3338,
											"end": 3402,
											"name": "tag",
											"source": 19,
											"value": "251"
										},
										{
											"begin": 3338,
											"end": 3402,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3328,
											"end": 3402,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 3328,
											"end": 3402,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3283,
											"end": 3412,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3451,
											"end": 3453,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 3477,
											"end": 3541,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "252"
										},
										{
											"begin": 3533,
											"end": 3540,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 3524,
											"end": 3530,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3513,
											"end": 3522,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 3509,
											"end": 3531,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3477,
											"end": 3541,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "222"
										},
										{
											"begin": 3477,
											"end": 3541,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3477,
											"end": 3541,
											"name": "tag",
											"source": 19,
											"value": "252"
										},
										{
											"begin": 3477,
											"end": 3541,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3467,
											"end": 3541,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 3467,
											"end": 3541,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3422,
											"end": 3551,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2933,
											"end": 3558,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 3564,
											"end": 3672,
											"name": "tag",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 3564,
											"end": 3672,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3641,
											"end": 3665,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "255"
										},
										{
											"begin": 3659,
											"end": 3664,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3641,
											"end": 3665,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "256"
										},
										{
											"begin": 3641,
											"end": 3665,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3641,
											"end": 3665,
											"name": "tag",
											"source": 19,
											"value": "255"
										},
										{
											"begin": 3641,
											"end": 3665,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3636,
											"end": 3639,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3629,
											"end": 3666,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3619,
											"end": 3672,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3619,
											"end": 3672,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3619,
											"end": 3672,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 3678,
											"end": 3796,
											"name": "tag",
											"source": 19,
											"value": "257"
										},
										{
											"begin": 3678,
											"end": 3796,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3765,
											"end": 3789,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "259"
										},
										{
											"begin": 3783,
											"end": 3788,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3765,
											"end": 3789,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "256"
										},
										{
											"begin": 3765,
											"end": 3789,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3765,
											"end": 3789,
											"name": "tag",
											"source": 19,
											"value": "259"
										},
										{
											"begin": 3765,
											"end": 3789,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3760,
											"end": 3763,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3753,
											"end": 3790,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3743,
											"end": 3796,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3743,
											"end": 3796,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3743,
											"end": 3796,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 3802,
											"end": 3911,
											"name": "tag",
											"source": 19,
											"value": "260"
										},
										{
											"begin": 3802,
											"end": 3911,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3883,
											"end": 3904,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "262"
										},
										{
											"begin": 3898,
											"end": 3903,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3883,
											"end": 3904,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "263"
										},
										{
											"begin": 3883,
											"end": 3904,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3883,
											"end": 3904,
											"name": "tag",
											"source": 19,
											"value": "262"
										},
										{
											"begin": 3883,
											"end": 3904,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3878,
											"end": 3881,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3871,
											"end": 3905,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3861,
											"end": 3911,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3861,
											"end": 3911,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3861,
											"end": 3911,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 3917,
											"end": 4019,
											"name": "tag",
											"source": 19,
											"value": "264"
										},
										{
											"begin": 3917,
											"end": 4019,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "266"
										},
										{
											"begin": 4006,
											"end": 4011,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "267"
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "tag",
											"source": 19,
											"value": "266"
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3985,
											"end": 3988,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3978,
											"end": 4013,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3968,
											"end": 4019,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3968,
											"end": 4019,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3968,
											"end": 4019,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 4025,
											"end": 4389,
											"name": "tag",
											"source": 19,
											"value": "268"
										},
										{
											"begin": 4025,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4025,
											"end": 4389,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4141,
											"end": 4180,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "270"
										},
										{
											"begin": 4174,
											"end": 4179,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4141,
											"end": 4180,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "271"
										},
										{
											"begin": 4141,
											"end": 4180,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 4141,
											"end": 4180,
											"name": "tag",
											"source": 19,
											"value": "270"
										},
										{
											"begin": 4141,
											"end": 4180,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4196,
											"end": 4267,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "272"
										},
										{
											"begin": 4260,
											"end": 4266,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4255,
											"end": 4258,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 4196,
											"end": 4267,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "273"
										},
										{
											"begin": 4196,
											"end": 4267,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 4196,
											"end": 4267,
											"name": "tag",
											"source": 19,
											"value": "272"
										},
										{
											"begin": 4196,
											"end": 4267,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4189,
											"end": 4267,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 4189,
											"end": 4267,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4276,
											"end": 4328,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "274"
										},
										{
											"begin": 4321,
											"end": 4327,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4316,
											"end": 4319,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 4309,
											"end": 4313,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4302,
											"end": 4307,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 4298,
											"end": 4314,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4276,
											"end": 4328,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "275"
										},
										{
											"begin": 4276,
											"end": 4328,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 4276,
											"end": 4328,
											"name": "tag",
											"source": 19,
											"value": "274"
										},
										{
											"begin": 4276,
											"end": 4328,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4353,
											"end": 4382,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "276"
										},
										{
											"begin": 4375,
											"end": 4381,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4353,
											"end": 4382,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "277"
										},
										{
											"begin": 4353,
											"end": 4382,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 4353,
											"end": 4382,
											"name": "tag",
											"source": 19,
											"value": "276"
										},
										{
											"begin": 4353,
											"end": 4382,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4348,
											"end": 4351,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 4344,
											"end": 4383,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4337,
											"end": 4383,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4337,
											"end": 4383,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4389,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4389,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4389,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4389,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4389,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4389,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 4395,
											"end": 4764,
											"name": "tag",
											"source": 19,
											"value": "278"
										},
										{
											"begin": 4395,
											"end": 4764,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4395,
											"end": 4764,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4558,
											"end": 4625,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "280"
										},
										{
											"begin": 4622,
											"end": 4624,
											"name": "PUSH",
											"source": 19,
											"value": "25"
										},
										{
											"begin": 4617,
											"end": 4620,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4558,
											"end": 4625,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "273"
										},
										{
											"begin": 4558,
											"end": 4625,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 4558,
											"end": 4625,
											"name": "tag",
											"source": 19,
											"value": "280"
										},
										{
											"begin": 4558,
											"end": 4625,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4551,
											"end": 4625,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4551,
											"end": 4625,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4655,
											"end": 4689,
											"name": "PUSH",
											"source": 19,
											"value": "436F6E74726163742068617320616C7265616479206265656E20696E69746961"
										},
										{
											"begin": 4651,
											"end": 4652,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4646,
											"end": 4649,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4642,
											"end": 4653,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4635,
											"end": 4690,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4721,
											"end": 4728,
											"name": "PUSH",
											"source": 19,
											"value": "6C697A6564000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4716,
											"end": 4718,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4711,
											"end": 4714,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4707,
											"end": 4719,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4700,
											"end": 4729,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4755,
											"end": 4757,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 4750,
											"end": 4753,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4746,
											"end": 4758,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4739,
											"end": 4758,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4739,
											"end": 4758,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4541,
											"end": 4764,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4541,
											"end": 4764,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4541,
											"end": 4764,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4541,
											"end": 4764,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 4770,
											"end": 5100,
											"name": "tag",
											"source": 19,
											"value": "281"
										},
										{
											"begin": 4770,
											"end": 5100,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4770,
											"end": 5100,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4933,
											"end": 5000,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "283"
										},
										{
											"begin": 4997,
											"end": 4999,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4992,
											"end": 4995,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4933,
											"end": 5000,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "273"
										},
										{
											"begin": 4933,
											"end": 5000,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 4933,
											"end": 5000,
											"name": "tag",
											"source": 19,
											"value": "283"
										},
										{
											"begin": 4933,
											"end": 5000,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4926,
											"end": 5000,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4926,
											"end": 5000,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5030,
											"end": 5064,
											"name": "PUSH",
											"source": 19,
											"value": "4D7573742062652063616C6C656420627920636F6E74726163742061646D696E"
										},
										{
											"begin": 5026,
											"end": 5027,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5021,
											"end": 5024,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 5017,
											"end": 5028,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5010,
											"end": 5065,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5091,
											"end": 5093,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 5086,
											"end": 5089,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5082,
											"end": 5094,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5075,
											"end": 5094,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 5075,
											"end": 5094,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4916,
											"end": 5100,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4916,
											"end": 5100,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4916,
											"end": 5100,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4916,
											"end": 5100,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 5212,
											"end": 6661,
											"name": "tag",
											"source": 19,
											"value": "284"
										},
										{
											"begin": 5212,
											"end": 6661,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5389,
											"end": 5393,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 5384,
											"end": 5387,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5380,
											"end": 5394,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5479,
											"end": 5483,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5472,
											"end": 5477,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5468,
											"end": 5484,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5462,
											"end": 5485,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 5498,
											"end": 5561,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "286"
										},
										{
											"begin": 5555,
											"end": 5559,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5550,
											"end": 5553,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 5546,
											"end": 5560,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5532,
											"end": 5544,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5498,
											"end": 5561,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 5498,
											"end": 5561,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 5498,
											"end": 5561,
											"name": "tag",
											"source": 19,
											"value": "286"
										},
										{
											"begin": 5498,
											"end": 5561,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5404,
											"end": 5571,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5657,
											"end": 5661,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 5650,
											"end": 5655,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5646,
											"end": 5662,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5640,
											"end": 5663,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 5676,
											"end": 5739,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "287"
										},
										{
											"begin": 5733,
											"end": 5737,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 5728,
											"end": 5731,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 5724,
											"end": 5738,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5710,
											"end": 5722,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5676,
											"end": 5739,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 5676,
											"end": 5739,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 5676,
											"end": 5739,
											"name": "tag",
											"source": 19,
											"value": "287"
										},
										{
											"begin": 5676,
											"end": 5739,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5581,
											"end": 5749,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5836,
											"end": 5840,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 5829,
											"end": 5834,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5825,
											"end": 5841,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5819,
											"end": 5842,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 5855,
											"end": 5918,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "288"
										},
										{
											"begin": 5912,
											"end": 5916,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 5907,
											"end": 5910,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 5903,
											"end": 5917,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5889,
											"end": 5901,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5855,
											"end": 5918,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 5855,
											"end": 5918,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 5855,
											"end": 5918,
											"name": "tag",
											"source": 19,
											"value": "288"
										},
										{
											"begin": 5855,
											"end": 5918,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5759,
											"end": 5928,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6014,
											"end": 6018,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 6007,
											"end": 6012,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6003,
											"end": 6019,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5997,
											"end": 6020,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 6033,
											"end": 6096,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "289"
										},
										{
											"begin": 6090,
											"end": 6094,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 6085,
											"end": 6088,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6081,
											"end": 6095,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6067,
											"end": 6079,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6033,
											"end": 6096,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 6033,
											"end": 6096,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 6033,
											"end": 6096,
											"name": "tag",
											"source": 19,
											"value": "289"
										},
										{
											"begin": 6033,
											"end": 6096,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5938,
											"end": 6106,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6192,
											"end": 6196,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 6185,
											"end": 6190,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6181,
											"end": 6197,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6175,
											"end": 6198,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 6211,
											"end": 6274,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "291"
										},
										{
											"begin": 6268,
											"end": 6272,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 6263,
											"end": 6266,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6259,
											"end": 6273,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6245,
											"end": 6257,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6211,
											"end": 6274,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 6211,
											"end": 6274,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6274,
											"name": "tag",
											"source": 19,
											"value": "291"
										},
										{
											"begin": 6211,
											"end": 6274,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6116,
											"end": 6284,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6378,
											"end": 6382,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 6371,
											"end": 6376,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6367,
											"end": 6383,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6361,
											"end": 6384,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 6397,
											"end": 6460,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "292"
										},
										{
											"begin": 6454,
											"end": 6458,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 6449,
											"end": 6452,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6445,
											"end": 6459,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6431,
											"end": 6443,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6397,
											"end": 6460,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 6397,
											"end": 6460,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 6397,
											"end": 6460,
											"name": "tag",
											"source": 19,
											"value": "292"
										},
										{
											"begin": 6397,
											"end": 6460,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6294,
											"end": 6470,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6562,
											"end": 6566,
											"name": "PUSH",
											"source": 19,
											"value": "C0"
										},
										{
											"begin": 6555,
											"end": 6560,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6551,
											"end": 6567,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6545,
											"end": 6568,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 6581,
											"end": 6644,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "293"
										},
										{
											"begin": 6638,
											"end": 6642,
											"name": "PUSH",
											"source": 19,
											"value": "C0"
										},
										{
											"begin": 6633,
											"end": 6636,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6629,
											"end": 6643,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6615,
											"end": 6627,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6581,
											"end": 6644,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "294"
										},
										{
											"begin": 6581,
											"end": 6644,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 6581,
											"end": 6644,
											"name": "tag",
											"source": 19,
											"value": "293"
										},
										{
											"begin": 6581,
											"end": 6644,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6480,
											"end": 6654,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5358,
											"end": 6661,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5358,
											"end": 6661,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5358,
											"end": 6661,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 5358,
											"end": 6661,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 6753,
											"end": 8715,
											"name": "tag",
											"source": 19,
											"value": "295"
										},
										{
											"begin": 6753,
											"end": 8715,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6906,
											"end": 6912,
											"name": "PUSH",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 6901,
											"end": 6904,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6897,
											"end": 6913,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6997,
											"end": 7001,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6990,
											"end": 6995,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6986,
											"end": 7002,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6980,
											"end": 7003,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 7016,
											"end": 7079,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "297"
										},
										{
											"begin": 7073,
											"end": 7077,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 7068,
											"end": 7071,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 7064,
											"end": 7078,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7050,
											"end": 7062,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7016,
											"end": 7079,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 7016,
											"end": 7079,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 7016,
											"end": 7079,
											"name": "tag",
											"source": 19,
											"value": "297"
										},
										{
											"begin": 7016,
											"end": 7079,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6923,
											"end": 7089,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7173,
											"end": 7177,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7166,
											"end": 7171,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7162,
											"end": 7178,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7156,
											"end": 7179,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 7192,
											"end": 7255,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "298"
										},
										{
											"begin": 7249,
											"end": 7253,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7244,
											"end": 7247,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 7240,
											"end": 7254,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7226,
											"end": 7238,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7192,
											"end": 7255,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 7192,
											"end": 7255,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 7192,
											"end": 7255,
											"name": "tag",
											"source": 19,
											"value": "298"
										},
										{
											"begin": 7192,
											"end": 7255,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7099,
											"end": 7265,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7352,
											"end": 7356,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 7345,
											"end": 7350,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7341,
											"end": 7357,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7335,
											"end": 7358,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 7371,
											"end": 7430,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "299"
										},
										{
											"begin": 7424,
											"end": 7428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 7419,
											"end": 7422,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 7415,
											"end": 7429,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7401,
											"end": 7413,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7371,
											"end": 7430,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "264"
										},
										{
											"begin": 7371,
											"end": 7430,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 7371,
											"end": 7430,
											"name": "tag",
											"source": 19,
											"value": "299"
										},
										{
											"begin": 7371,
											"end": 7430,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7275,
											"end": 7440,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7527,
											"end": 7531,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 7520,
											"end": 7525,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7516,
											"end": 7532,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7510,
											"end": 7533,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 7546,
											"end": 7605,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "300"
										},
										{
											"begin": 7599,
											"end": 7603,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 7594,
											"end": 7597,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 7590,
											"end": 7604,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7576,
											"end": 7588,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7546,
											"end": 7605,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "264"
										},
										{
											"begin": 7546,
											"end": 7605,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 7546,
											"end": 7605,
											"name": "tag",
											"source": 19,
											"value": "300"
										},
										{
											"begin": 7546,
											"end": 7605,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7450,
											"end": 7615,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7707,
											"end": 7711,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 7700,
											"end": 7705,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7696,
											"end": 7712,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7690,
											"end": 7713,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 7726,
											"end": 7789,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "301"
										},
										{
											"begin": 7783,
											"end": 7787,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 7778,
											"end": 7781,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 7774,
											"end": 7788,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7760,
											"end": 7772,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7726,
											"end": 7789,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 7726,
											"end": 7789,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 7726,
											"end": 7789,
											"name": "tag",
											"source": 19,
											"value": "301"
										},
										{
											"begin": 7726,
											"end": 7789,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7625,
											"end": 7799,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7891,
											"end": 7895,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 7884,
											"end": 7889,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7880,
											"end": 7896,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7874,
											"end": 7897,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 7910,
											"end": 7973,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "302"
										},
										{
											"begin": 7967,
											"end": 7971,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 7962,
											"end": 7965,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 7958,
											"end": 7972,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7944,
											"end": 7956,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7910,
											"end": 7973,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 7910,
											"end": 7973,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 7910,
											"end": 7973,
											"name": "tag",
											"source": 19,
											"value": "302"
										},
										{
											"begin": 7910,
											"end": 7973,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7809,
											"end": 7983,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8071,
											"end": 8075,
											"name": "PUSH",
											"source": 19,
											"value": "C0"
										},
										{
											"begin": 8064,
											"end": 8069,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8060,
											"end": 8076,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8054,
											"end": 8077,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 8090,
											"end": 8153,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "303"
										},
										{
											"begin": 8147,
											"end": 8151,
											"name": "PUSH",
											"source": 19,
											"value": "C0"
										},
										{
											"begin": 8142,
											"end": 8145,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 8138,
											"end": 8152,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8124,
											"end": 8136,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8090,
											"end": 8153,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 8090,
											"end": 8153,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 8090,
											"end": 8153,
											"name": "tag",
											"source": 19,
											"value": "303"
										},
										{
											"begin": 8090,
											"end": 8153,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7993,
											"end": 8163,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8251,
											"end": 8255,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 8244,
											"end": 8249,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8240,
											"end": 8256,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8234,
											"end": 8257,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 8270,
											"end": 8333,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "304"
										},
										{
											"begin": 8327,
											"end": 8331,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 8322,
											"end": 8325,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 8318,
											"end": 8332,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8304,
											"end": 8316,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8270,
											"end": 8333,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 8270,
											"end": 8333,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 8270,
											"end": 8333,
											"name": "tag",
											"source": 19,
											"value": "304"
										},
										{
											"begin": 8270,
											"end": 8333,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8173,
											"end": 8343,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8430,
											"end": 8436,
											"name": "PUSH",
											"source": 19,
											"value": "100"
										},
										{
											"begin": 8423,
											"end": 8428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8419,
											"end": 8437,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 8451,
											"end": 8516,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "305"
										},
										{
											"begin": 8508,
											"end": 8514,
											"name": "PUSH",
											"source": 19,
											"value": "100"
										},
										{
											"begin": 8503,
											"end": 8506,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 8499,
											"end": 8515,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8485,
											"end": 8497,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8451,
											"end": 8516,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 8451,
											"end": 8516,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 8451,
											"end": 8516,
											"name": "tag",
											"source": 19,
											"value": "305"
										},
										{
											"begin": 8451,
											"end": 8516,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8353,
											"end": 8526,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8612,
											"end": 8618,
											"name": "PUSH",
											"source": 19,
											"value": "120"
										},
										{
											"begin": 8605,
											"end": 8610,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8601,
											"end": 8619,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8595,
											"end": 8620,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 8633,
											"end": 8698,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "306"
										},
										{
											"begin": 8690,
											"end": 8696,
											"name": "PUSH",
											"source": 19,
											"value": "120"
										},
										{
											"begin": 8685,
											"end": 8688,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 8681,
											"end": 8697,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8667,
											"end": 8679,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8633,
											"end": 8698,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 8633,
											"end": 8698,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 8633,
											"end": 8698,
											"name": "tag",
											"source": 19,
											"value": "306"
										},
										{
											"begin": 8633,
											"end": 8698,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8536,
											"end": 8708,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6875,
											"end": 8715,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6875,
											"end": 8715,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6875,
											"end": 8715,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 6875,
											"end": 8715,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 8721,
											"end": 8829,
											"name": "tag",
											"source": 19,
											"value": "294"
										},
										{
											"begin": 8721,
											"end": 8829,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8798,
											"end": 8822,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "308"
										},
										{
											"begin": 8816,
											"end": 8821,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 8798,
											"end": 8822,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "309"
										},
										{
											"begin": 8798,
											"end": 8822,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 8798,
											"end": 8822,
											"name": "tag",
											"source": 19,
											"value": "308"
										},
										{
											"begin": 8798,
											"end": 8822,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8793,
											"end": 8796,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8786,
											"end": 8823,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8776,
											"end": 8829,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8776,
											"end": 8829,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8776,
											"end": 8829,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 8835,
											"end": 8950,
											"name": "tag",
											"source": 19,
											"value": "310"
										},
										{
											"begin": 8835,
											"end": 8950,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8920,
											"end": 8943,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "312"
										},
										{
											"begin": 8937,
											"end": 8942,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 8920,
											"end": 8943,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "313"
										},
										{
											"begin": 8920,
											"end": 8943,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 8920,
											"end": 8943,
											"name": "tag",
											"source": 19,
											"value": "312"
										},
										{
											"begin": 8920,
											"end": 8943,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8915,
											"end": 8918,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8908,
											"end": 8944,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8898,
											"end": 8950,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8898,
											"end": 8950,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 8898,
											"end": 8950,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 8956,
											"end": 9064,
											"name": "tag",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 8956,
											"end": 9064,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9033,
											"end": 9057,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "315"
										},
										{
											"begin": 9051,
											"end": 9056,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 9033,
											"end": 9057,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 9033,
											"end": 9057,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 9033,
											"end": 9057,
											"name": "tag",
											"source": 19,
											"value": "315"
										},
										{
											"begin": 9033,
											"end": 9057,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9028,
											"end": 9031,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9021,
											"end": 9058,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9011,
											"end": 9064,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9011,
											"end": 9064,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9011,
											"end": 9064,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 9070,
											"end": 9188,
											"name": "tag",
											"source": 19,
											"value": "317"
										},
										{
											"begin": 9070,
											"end": 9188,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9157,
											"end": 9181,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "319"
										},
										{
											"begin": 9175,
											"end": 9180,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 9157,
											"end": 9181,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 9157,
											"end": 9181,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 9157,
											"end": 9181,
											"name": "tag",
											"source": 19,
											"value": "319"
										},
										{
											"begin": 9157,
											"end": 9181,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9152,
											"end": 9155,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9145,
											"end": 9182,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9135,
											"end": 9188,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9135,
											"end": 9188,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9135,
											"end": 9188,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 9194,
											"end": 9306,
											"name": "tag",
											"source": 19,
											"value": "320"
										},
										{
											"begin": 9194,
											"end": 9306,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9277,
											"end": 9299,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "322"
										},
										{
											"begin": 9293,
											"end": 9298,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 9277,
											"end": 9299,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "323"
										},
										{
											"begin": 9277,
											"end": 9299,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 9277,
											"end": 9299,
											"name": "tag",
											"source": 19,
											"value": "322"
										},
										{
											"begin": 9277,
											"end": 9299,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9272,
											"end": 9275,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9265,
											"end": 9300,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9255,
											"end": 9306,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9255,
											"end": 9306,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9255,
											"end": 9306,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 9312,
											"end": 9534,
											"name": "tag",
											"source": 19,
											"value": "79"
										},
										{
											"begin": 9312,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9312,
											"end": 9534,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9443,
											"end": 9445,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 9432,
											"end": 9441,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9428,
											"end": 9446,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9420,
											"end": 9446,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9420,
											"end": 9446,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9456,
											"end": 9527,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "325"
										},
										{
											"begin": 9524,
											"end": 9525,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9513,
											"end": 9522,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 9509,
											"end": 9526,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9500,
											"end": 9506,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 9456,
											"end": 9527,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "257"
										},
										{
											"begin": 9456,
											"end": 9527,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 9456,
											"end": 9527,
											"name": "tag",
											"source": 19,
											"value": "325"
										},
										{
											"begin": 9456,
											"end": 9527,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9410,
											"end": 9534,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 9410,
											"end": 9534,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 9410,
											"end": 9534,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9410,
											"end": 9534,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9410,
											"end": 9534,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 9540,
											"end": 9750,
											"name": "tag",
											"source": 19,
											"value": "34"
										},
										{
											"begin": 9540,
											"end": 9750,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9540,
											"end": 9750,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9665,
											"end": 9667,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 9654,
											"end": 9663,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9650,
											"end": 9668,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9642,
											"end": 9668,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9642,
											"end": 9668,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9678,
											"end": 9743,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "327"
										},
										{
											"begin": 9740,
											"end": 9741,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9729,
											"end": 9738,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 9725,
											"end": 9742,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9716,
											"end": 9722,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 9678,
											"end": 9743,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "260"
										},
										{
											"begin": 9678,
											"end": 9743,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 9678,
											"end": 9743,
											"name": "tag",
											"source": 19,
											"value": "327"
										},
										{
											"begin": 9678,
											"end": 9743,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9632,
											"end": 9750,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 9632,
											"end": 9750,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 9632,
											"end": 9750,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9632,
											"end": 9750,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9632,
											"end": 9750,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 9756,
											"end": 10069,
											"name": "tag",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 9756,
											"end": 10069,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9756,
											"end": 10069,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9907,
											"end": 9909,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 9896,
											"end": 9905,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9892,
											"end": 9910,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9884,
											"end": 9910,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9884,
											"end": 9910,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9956,
											"end": 9965,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 9950,
											"end": 9954,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 9946,
											"end": 9966,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 9942,
											"end": 9943,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 9931,
											"end": 9940,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 9927,
											"end": 9944,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9920,
											"end": 9967,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9984,
											"end": 10062,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "329"
										},
										{
											"begin": 10057,
											"end": 10061,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10048,
											"end": 10054,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 9984,
											"end": 10062,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "268"
										},
										{
											"begin": 9984,
											"end": 10062,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 9984,
											"end": 10062,
											"name": "tag",
											"source": 19,
											"value": "329"
										},
										{
											"begin": 9984,
											"end": 10062,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 9976,
											"end": 10062,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9976,
											"end": 10062,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9874,
											"end": 10069,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 9874,
											"end": 10069,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 9874,
											"end": 10069,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9874,
											"end": 10069,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 9874,
											"end": 10069,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 10075,
											"end": 10494,
											"name": "tag",
											"source": 19,
											"value": "129"
										},
										{
											"begin": 10075,
											"end": 10494,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 10075,
											"end": 10494,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 10279,
											"end": 10281,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 10268,
											"end": 10277,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10264,
											"end": 10282,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10256,
											"end": 10282,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10256,
											"end": 10282,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 10328,
											"end": 10337,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10322,
											"end": 10326,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10318,
											"end": 10338,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 10314,
											"end": 10315,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 10303,
											"end": 10312,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 10299,
											"end": 10316,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10292,
											"end": 10339,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10356,
											"end": 10487,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "331"
										},
										{
											"begin": 10482,
											"end": 10486,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10356,
											"end": 10487,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "278"
										},
										{
											"begin": 10356,
											"end": 10487,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 10356,
											"end": 10487,
											"name": "tag",
											"source": 19,
											"value": "331"
										},
										{
											"begin": 10356,
											"end": 10487,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 10348,
											"end": 10487,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10348,
											"end": 10487,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 10246,
											"end": 10494,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 10246,
											"end": 10494,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10246,
											"end": 10494,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 10246,
											"end": 10494,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 10500,
											"end": 10919,
											"name": "tag",
											"source": 19,
											"value": "126"
										},
										{
											"begin": 10500,
											"end": 10919,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 10500,
											"end": 10919,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 10704,
											"end": 10706,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 10693,
											"end": 10702,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10689,
											"end": 10707,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10681,
											"end": 10707,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10681,
											"end": 10707,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 10753,
											"end": 10762,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10747,
											"end": 10751,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10743,
											"end": 10763,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 10739,
											"end": 10740,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 10728,
											"end": 10737,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 10724,
											"end": 10741,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10717,
											"end": 10764,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10781,
											"end": 10912,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "333"
										},
										{
											"begin": 10907,
											"end": 10911,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 10781,
											"end": 10912,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "281"
										},
										{
											"begin": 10781,
											"end": 10912,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 10781,
											"end": 10912,
											"name": "tag",
											"source": 19,
											"value": "333"
										},
										{
											"begin": 10781,
											"end": 10912,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 10773,
											"end": 10912,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10773,
											"end": 10912,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 10671,
											"end": 10919,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 10671,
											"end": 10919,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10671,
											"end": 10919,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 10671,
											"end": 10919,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 10925,
											"end": 11308,
											"name": "tag",
											"source": 19,
											"value": "139"
										},
										{
											"begin": 10925,
											"end": 11308,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 10925,
											"end": 11308,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11136,
											"end": 11139,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 11125,
											"end": 11134,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11121,
											"end": 11140,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11113,
											"end": 11140,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 11113,
											"end": 11140,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11150,
											"end": 11301,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "335"
										},
										{
											"begin": 11298,
											"end": 11299,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11287,
											"end": 11296,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 11283,
											"end": 11300,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11274,
											"end": 11280,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 11150,
											"end": 11301,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "284"
										},
										{
											"begin": 11150,
											"end": 11301,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 11150,
											"end": 11301,
											"name": "tag",
											"source": 19,
											"value": "335"
										},
										{
											"begin": 11150,
											"end": 11301,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11103,
											"end": 11308,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 11103,
											"end": 11308,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11103,
											"end": 11308,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11103,
											"end": 11308,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11103,
											"end": 11308,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 11314,
											"end": 11649,
											"name": "tag",
											"source": 19,
											"value": "161"
										},
										{
											"begin": 11314,
											"end": 11649,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11314,
											"end": 11649,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11501,
											"end": 11504,
											"name": "PUSH",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 11490,
											"end": 11499,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11486,
											"end": 11505,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11478,
											"end": 11505,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 11478,
											"end": 11505,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11515,
											"end": 11642,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "337"
										},
										{
											"begin": 11639,
											"end": 11640,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11628,
											"end": 11637,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 11624,
											"end": 11641,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11615,
											"end": 11621,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 11515,
											"end": 11642,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "295"
										},
										{
											"begin": 11515,
											"end": 11642,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 11515,
											"end": 11642,
											"name": "tag",
											"source": 19,
											"value": "337"
										},
										{
											"begin": 11515,
											"end": 11642,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11468,
											"end": 11649,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 11468,
											"end": 11649,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11468,
											"end": 11649,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11468,
											"end": 11649,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11468,
											"end": 11649,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 11655,
											"end": 11873,
											"name": "tag",
											"source": 19,
											"value": "28"
										},
										{
											"begin": 11655,
											"end": 11873,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11655,
											"end": 11873,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11784,
											"end": 11786,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11773,
											"end": 11782,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11769,
											"end": 11787,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11761,
											"end": 11787,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 11761,
											"end": 11787,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11797,
											"end": 11866,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "339"
										},
										{
											"begin": 11863,
											"end": 11864,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11852,
											"end": 11861,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 11848,
											"end": 11865,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11839,
											"end": 11845,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 11797,
											"end": 11866,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "310"
										},
										{
											"begin": 11797,
											"end": 11866,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 11797,
											"end": 11866,
											"name": "tag",
											"source": 19,
											"value": "339"
										},
										{
											"begin": 11797,
											"end": 11866,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11751,
											"end": 11873,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 11751,
											"end": 11873,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11751,
											"end": 11873,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11751,
											"end": 11873,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11751,
											"end": 11873,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 11879,
											"end": 12101,
											"name": "tag",
											"source": 19,
											"value": "41"
										},
										{
											"begin": 11879,
											"end": 12101,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11879,
											"end": 12101,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12010,
											"end": 12012,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11999,
											"end": 12008,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11995,
											"end": 12013,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11987,
											"end": 12013,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 11987,
											"end": 12013,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12023,
											"end": 12094,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "341"
										},
										{
											"begin": 12091,
											"end": 12092,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12080,
											"end": 12089,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 12076,
											"end": 12093,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12067,
											"end": 12073,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 12023,
											"end": 12094,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "317"
										},
										{
											"begin": 12023,
											"end": 12094,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 12023,
											"end": 12094,
											"name": "tag",
											"source": 19,
											"value": "341"
										},
										{
											"begin": 12023,
											"end": 12094,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11977,
											"end": 12101,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 11977,
											"end": 12101,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11977,
											"end": 12101,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11977,
											"end": 12101,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 11977,
											"end": 12101,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 12107,
											"end": 12321,
											"name": "tag",
											"source": 19,
											"value": "50"
										},
										{
											"begin": 12107,
											"end": 12321,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12107,
											"end": 12321,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12234,
											"end": 12236,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 12223,
											"end": 12232,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12219,
											"end": 12237,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12211,
											"end": 12237,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12211,
											"end": 12237,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12247,
											"end": 12314,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "343"
										},
										{
											"begin": 12311,
											"end": 12312,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12300,
											"end": 12309,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 12296,
											"end": 12313,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12287,
											"end": 12293,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 12247,
											"end": 12314,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "320"
										},
										{
											"begin": 12247,
											"end": 12314,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 12247,
											"end": 12314,
											"name": "tag",
											"source": 19,
											"value": "343"
										},
										{
											"begin": 12247,
											"end": 12314,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12201,
											"end": 12321,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 12201,
											"end": 12321,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12201,
											"end": 12321,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12201,
											"end": 12321,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12201,
											"end": 12321,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 12327,
											"end": 12426,
											"name": "tag",
											"source": 19,
											"value": "271"
										},
										{
											"begin": 12327,
											"end": 12426,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12327,
											"end": 12426,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12413,
											"end": 12418,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 12407,
											"end": 12419,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 12397,
											"end": 12419,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12397,
											"end": 12419,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12386,
											"end": 12426,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12386,
											"end": 12426,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12386,
											"end": 12426,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12386,
											"end": 12426,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 12432,
											"end": 12601,
											"name": "tag",
											"source": 19,
											"value": "273"
										},
										{
											"begin": 12432,
											"end": 12601,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12432,
											"end": 12601,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12550,
											"end": 12556,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12545,
											"end": 12548,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12538,
											"end": 12557,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12590,
											"end": 12594,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 12585,
											"end": 12588,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12581,
											"end": 12595,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12566,
											"end": 12595,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12566,
											"end": 12595,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12528,
											"end": 12601,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 12528,
											"end": 12601,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12528,
											"end": 12601,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12528,
											"end": 12601,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12528,
											"end": 12601,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 12607,
											"end": 12703,
											"name": "tag",
											"source": 19,
											"value": "256"
										},
										{
											"begin": 12607,
											"end": 12703,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12607,
											"end": 12703,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12673,
											"end": 12697,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "347"
										},
										{
											"begin": 12691,
											"end": 12696,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12673,
											"end": 12697,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "309"
										},
										{
											"begin": 12673,
											"end": 12697,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 12673,
											"end": 12697,
											"name": "tag",
											"source": 19,
											"value": "347"
										},
										{
											"begin": 12673,
											"end": 12697,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12662,
											"end": 12697,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12662,
											"end": 12697,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12652,
											"end": 12703,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12652,
											"end": 12703,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12652,
											"end": 12703,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12652,
											"end": 12703,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 12709,
											"end": 12799,
											"name": "tag",
											"source": 19,
											"value": "263"
										},
										{
											"begin": 12709,
											"end": 12799,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12709,
											"end": 12799,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12786,
											"end": 12791,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 12779,
											"end": 12792,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 12772,
											"end": 12793,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 12761,
											"end": 12793,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12761,
											"end": 12793,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12751,
											"end": 12799,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12751,
											"end": 12799,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12751,
											"end": 12799,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12751,
											"end": 12799,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 12805,
											"end": 12895,
											"name": "tag",
											"source": 19,
											"value": "267"
										},
										{
											"begin": 12805,
											"end": 12895,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12805,
											"end": 12895,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12883,
											"end": 12888,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 12880,
											"end": 12881,
											"name": "PUSH",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 12869,
											"end": 12889,
											"name": "SIGNEXTEND",
											"source": 19
										},
										{
											"begin": 12858,
											"end": 12889,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12858,
											"end": 12889,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12848,
											"end": 12895,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12848,
											"end": 12895,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12848,
											"end": 12895,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12848,
											"end": 12895,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 12901,
											"end": 13019,
											"name": "tag",
											"source": 19,
											"value": "350"
										},
										{
											"begin": 12901,
											"end": 13019,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 12901,
											"end": 13019,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 12978,
											"end": 13012,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12971,
											"end": 12976,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12967,
											"end": 13013,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 12956,
											"end": 13013,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12956,
											"end": 13013,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12946,
											"end": 13019,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12946,
											"end": 13019,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12946,
											"end": 13019,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 12946,
											"end": 13019,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13025,
											"end": 13151,
											"name": "tag",
											"source": 19,
											"value": "309"
										},
										{
											"begin": 13025,
											"end": 13151,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13025,
											"end": 13151,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13102,
											"end": 13144,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13095,
											"end": 13100,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13091,
											"end": 13145,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 13080,
											"end": 13145,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13080,
											"end": 13145,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13070,
											"end": 13151,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 13070,
											"end": 13151,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13070,
											"end": 13151,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13070,
											"end": 13151,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13157,
											"end": 13248,
											"name": "tag",
											"source": 19,
											"value": "313"
										},
										{
											"begin": 13157,
											"end": 13248,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13157,
											"end": 13248,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13233,
											"end": 13241,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFF"
										},
										{
											"begin": 13226,
											"end": 13231,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13222,
											"end": 13242,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 13211,
											"end": 13242,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13211,
											"end": 13242,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13201,
											"end": 13248,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 13201,
											"end": 13248,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13201,
											"end": 13248,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13201,
											"end": 13248,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13254,
											"end": 13331,
											"name": "tag",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 13254,
											"end": 13331,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13254,
											"end": 13331,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13320,
											"end": 13325,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 13309,
											"end": 13325,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13309,
											"end": 13325,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13299,
											"end": 13331,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 13299,
											"end": 13331,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13299,
											"end": 13331,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13299,
											"end": 13331,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13337,
											"end": 13423,
											"name": "tag",
											"source": 19,
											"value": "323"
										},
										{
											"begin": 13337,
											"end": 13423,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13337,
											"end": 13423,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13412,
											"end": 13416,
											"name": "PUSH",
											"source": 19,
											"value": "FF"
										},
										{
											"begin": 13405,
											"end": 13410,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13401,
											"end": 13417,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 13390,
											"end": 13417,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13390,
											"end": 13417,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13380,
											"end": 13423,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13429,
											"end": 13736,
											"name": "tag",
											"source": 19,
											"value": "275"
										},
										{
											"begin": 13429,
											"end": 13736,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13497,
											"end": 13498,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "tag",
											"source": 19,
											"value": "357"
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13521,
											"end": 13527,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 13518,
											"end": 13519,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 13515,
											"end": 13528,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "359"
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 13606,
											"end": 13607,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 13601,
											"end": 13604,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13597,
											"end": 13608,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13591,
											"end": 13609,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 13587,
											"end": 13588,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 13582,
											"end": 13585,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 13578,
											"end": 13589,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13571,
											"end": 13610,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13543,
											"end": 13545,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 13540,
											"end": 13541,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 13536,
											"end": 13546,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13531,
											"end": 13546,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13531,
											"end": 13546,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "357"
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "tag",
											"source": 19,
											"value": "359"
										},
										{
											"begin": 13507,
											"end": 13620,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13638,
											"end": 13644,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 13635,
											"end": 13636,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 13632,
											"end": 13645,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 13629,
											"end": 13631,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 13629,
											"end": 13631,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "360"
										},
										{
											"begin": 13629,
											"end": 13631,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 13718,
											"end": 13719,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13709,
											"end": 13715,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 13704,
											"end": 13707,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 13700,
											"end": 13716,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13693,
											"end": 13720,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13629,
											"end": 13631,
											"name": "tag",
											"source": 19,
											"value": "360"
										},
										{
											"begin": 13629,
											"end": 13631,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13478,
											"end": 13736,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13478,
											"end": 13736,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13478,
											"end": 13736,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13478,
											"end": 13736,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13478,
											"end": 13736,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13742,
											"end": 13844,
											"name": "tag",
											"source": 19,
											"value": "277"
										},
										{
											"begin": 13742,
											"end": 13844,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13742,
											"end": 13844,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13834,
											"end": 13836,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 13830,
											"end": 13837,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 13825,
											"end": 13827,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 13818,
											"end": 13823,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 13814,
											"end": 13828,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13810,
											"end": 13838,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 13800,
											"end": 13838,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13800,
											"end": 13838,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13790,
											"end": 13844,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 13790,
											"end": 13844,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 13790,
											"end": 13844,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13790,
											"end": 13844,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13850,
											"end": 13972,
											"name": "tag",
											"source": 19,
											"value": "213"
										},
										{
											"begin": 13850,
											"end": 13972,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13923,
											"end": 13947,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "363"
										},
										{
											"begin": 13941,
											"end": 13946,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 13923,
											"end": 13947,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "256"
										},
										{
											"begin": 13923,
											"end": 13947,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 13923,
											"end": 13947,
											"name": "tag",
											"source": 19,
											"value": "363"
										},
										{
											"begin": 13923,
											"end": 13947,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13916,
											"end": 13921,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 13913,
											"end": 13948,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 13903,
											"end": 13905,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "364"
										},
										{
											"begin": 13903,
											"end": 13905,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 13962,
											"end": 13963,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 13959,
											"end": 13960,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 13952,
											"end": 13964,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 13903,
											"end": 13905,
											"name": "tag",
											"source": 19,
											"value": "364"
										},
										{
											"begin": 13903,
											"end": 13905,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 13893,
											"end": 13972,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 13893,
											"end": 13972,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 13978,
											"end": 14100,
											"name": "tag",
											"source": 19,
											"value": "217"
										},
										{
											"begin": 13978,
											"end": 14100,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 14051,
											"end": 14075,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "366"
										},
										{
											"begin": 14069,
											"end": 14074,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 14051,
											"end": 14075,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "350"
										},
										{
											"begin": 14051,
											"end": 14075,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 14051,
											"end": 14075,
											"name": "tag",
											"source": 19,
											"value": "366"
										},
										{
											"begin": 14051,
											"end": 14075,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 14044,
											"end": 14049,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 14041,
											"end": 14076,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 14031,
											"end": 14033,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "367"
										},
										{
											"begin": 14031,
											"end": 14033,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 14090,
											"end": 14091,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 14087,
											"end": 14088,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 14080,
											"end": 14092,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 14031,
											"end": 14033,
											"name": "tag",
											"source": 19,
											"value": "367"
										},
										{
											"begin": 14031,
											"end": 14033,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 14021,
											"end": 14100,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 14021,
											"end": 14100,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 14106,
											"end": 14228,
											"name": "tag",
											"source": 19,
											"value": "221"
										},
										{
											"begin": 14106,
											"end": 14228,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 14179,
											"end": 14203,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "369"
										},
										{
											"begin": 14197,
											"end": 14202,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 14179,
											"end": 14203,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 14179,
											"end": 14203,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 14179,
											"end": 14203,
											"name": "tag",
											"source": 19,
											"value": "369"
										},
										{
											"begin": 14179,
											"end": 14203,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 14172,
											"end": 14177,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 14169,
											"end": 14204,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 14159,
											"end": 14161,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "370"
										},
										{
											"begin": 14159,
											"end": 14161,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 14218,
											"end": 14219,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 14215,
											"end": 14216,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 14208,
											"end": 14220,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 14159,
											"end": 14161,
											"name": "tag",
											"source": 19,
											"value": "370"
										},
										{
											"begin": 14159,
											"end": 14161,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 14149,
											"end": 14228,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 14149,
											"end": 14228,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										}
									],
									".data": {
										"24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
										"C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"admin_address()": "f2e62772",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(uint256)": "fe4b84df",
							"initialized()": "158ef93e",
							"name()": "06fdde03",
							"poolFee()": "089fe6aa",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/cattus.sol\":\"cattus\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f\",\"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccbd79e8d556aa7011babb0e5d1e55a966add74853e7ba0274ff184bd96ef002\",\"dweb:/ipfs/QmV28ozNRUFDiDUMvCwcFmLTQPG6nfvgeKr4cmbHWoegtH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a8a7fd1043372336ecccdbcbcf4962c6df8958dc9c7c7f8361fc2b3dd23570cc\",\"dweb:/ipfs/QmYHKgZxnanBfu7Q8ZicVhDDuB7XRGxuwvmCjfQQ1E5j39\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]},\"contracts/polygon/cattus.sol\":{\"keccak256\":\"0x84e6a241a902227bc2da886e1e97edac86ad98130627cb5967a6b035bac1060e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ef9c549033c9f4c96902635b8ced177301c69a2945ce4f13be41f4d30096aec\",\"dweb:/ipfs/QmV6KV3DNsHfhoMXygVVcmBAgUD9zB6eFbkxgffnMKqE2g\"]},\"contracts/polygon/quickswapV3.sol\":{\"keccak256\":\"0x889b176c4ba83aeee9b3289f94014ec8df2c12808536c42c208753c57ffb0ca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://185615b4390c5240add55651bbd4c75cbaef86042ea62d3164bb12eacecd20af\",\"dweb:/ipfs/QmewRLDewjPYJDNxiezPUojFSmfa3AAoRNUKwWN9w65UM2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 383,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 389,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 391,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 393,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 395,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 397,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "_decimals",
								"offset": 0,
								"slot": "5",
								"type": "t_uint8"
							},
							{
								"astId": 2285,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "admin_address",
								"offset": 1,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 2290,
								"contract": "contracts/polygon/cattus.sol:cattus",
								"label": "initialized",
								"offset": 21,
								"slot": "5",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/quickswapV3.sol": {
				"iNFTPositionManager": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct iNFTPositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"mint((address,address,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "9cc1a283"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct iNFTPositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/quickswapV3.sol\":\"iNFTPositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/quickswapV3.sol\":{\"keccak256\":\"0x889b176c4ba83aeee9b3289f94014ec8df2c12808536c42c208753c57ffb0ca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://185615b4390c5240add55651bbd4c75cbaef86042ea62d3164bb12eacecd20af\",\"dweb:/ipfs/QmewRLDewjPYJDNxiezPUojFSmfa3AAoRNUKwWN9w65UM2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"iQuickswapSwapper": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "limitSqrtPrice",
											"type": "uint160"
										}
									],
									"internalType": "struct iQuickswapSwapper.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInputSingle((address,address,address,uint256,uint256,uint256,uint160))": "bc651188"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"}],\"internalType\":\"struct iQuickswapSwapper.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/quickswapV3.sol\":\"iQuickswapSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/quickswapV3.sol\":{\"keccak256\":\"0x889b176c4ba83aeee9b3289f94014ec8df2c12808536c42c208753c57ffb0ca0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://185615b4390c5240add55651bbd4c75cbaef86042ea62d3164bb12eacecd20af\",\"dweb:/ipfs/QmewRLDewjPYJDNxiezPUojFSmfa3AAoRNUKwWN9w65UM2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/polygon/cattus.sol:63:7: Warning: Unused local variable.\n      uint256 amount_axlUsdc = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params);\n      ^--------------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 2526,
					"file": "contracts/polygon/cattus.sol",
					"start": 2504
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/polygon/cattus.sol:65:7: Warning: Unused local variable.\n      uint256 amount_bob = iQuickswapSwapper(QUICKSWAP_V3_SWAPPER).exactInputSingle(params);\n      ^----------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 2648,
					"file": "contracts/polygon/cattus.sol",
					"start": 2630
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						]
					},
					"id": 12,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:279:0",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 11,
							"linearizedBaseContracts": [
								11
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "362:340:0",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 10,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "734:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 4,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "734:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "733:20:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "777:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 7,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "777:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:6:0"
									},
									"scope": 11,
									"src": "707:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 12,
							"src": "338:447:0"
						}
					],
					"src": "33:753:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							366
						]
					},
					"id": 367,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 13,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 14,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:1",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 366,
							"linearizedBaseContracts": [
								366
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "857:98:1",
										"statements": [
											{
												"assignments": [
													27
												],
												"declarations": [
													{
														"constant": false,
														"id": 27,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 44,
														"src": "867:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 26,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "867:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 31,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 30,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 28,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "879:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 29,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "883:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "879:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "867:17:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 32,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "898:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 33,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "902:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "898:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 39,
												"nodeType": "IfStatement",
												"src": "894:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 35,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "913:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 36,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "920:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 37,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "912:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 25,
													"id": 38,
													"nodeType": "Return",
													"src": "905:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "940:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 41,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "946:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 42,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "939:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 25,
												"id": 43,
												"nodeType": "Return",
												"src": "932:16:1"
											}
										]
									},
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "645:131:1",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 45,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "797:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 16,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "797:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "808:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 18,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "808:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "796:22:1"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "842:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 21,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "842:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "848:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "848:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "841:15:1"
									},
									"scope": 366,
									"src": "781:174:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 71,
										"nodeType": "Block",
										"src": "1177:75:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 57,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 50,
														"src": "1191:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 58,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "1195:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1191:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 64,
												"nodeType": "IfStatement",
												"src": "1187:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1206:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1213:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 62,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1205:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 56,
													"id": 63,
													"nodeType": "Return",
													"src": "1198:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1233:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 66,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 48,
																"src": "1239:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 67,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 50,
																"src": "1243:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1239:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 69,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1232:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 56,
												"id": 70,
												"nodeType": "Return",
												"src": "1225:20:1"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "961:135:1",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 72,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1117:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 47,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1117:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1128:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1128:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1116:22:1"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1162:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 52,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1162:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1168:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:15:1"
									},
									"scope": 366,
									"src": "1101:151:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 112,
										"nodeType": "Block",
										"src": "1476:359:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 84,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 75,
														"src": "1708:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 85,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1713:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1708:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 91,
												"nodeType": "IfStatement",
												"src": "1704:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 87,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1724:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 88,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1730:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 89,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1723:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 83,
													"id": 90,
													"nodeType": "Return",
													"src": "1716:16:1"
												}
											},
											{
												"assignments": [
													93
												],
												"declarations": [
													{
														"constant": false,
														"id": 93,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 112,
														"src": "1742:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 92,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1742:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 97,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 94,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 75,
														"src": "1754:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 95,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 77,
														"src": "1758:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1754:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1742:17:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 100,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 98,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "1773:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 99,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 75,
															"src": "1777:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1773:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 101,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 77,
														"src": "1782:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1773:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 107,
												"nodeType": "IfStatement",
												"src": "1769:33:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 103,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1793:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 104,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1800:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 105,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1792:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 83,
													"id": 106,
													"nodeType": "Return",
													"src": "1785:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1820:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 109,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "1826:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 110,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1819:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 83,
												"id": 111,
												"nodeType": "Return",
												"src": "1812:16:1"
											}
										]
									},
									"documentation": {
										"id": 73,
										"nodeType": "StructuredDocumentation",
										"src": "1258:137:1",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 113,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1416:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 74,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1416:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1427:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1427:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1415:22:1"
									},
									"returnParameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1461:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 79,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1461:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1467:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1460:15:1"
									},
									"scope": 366,
									"src": "1400:435:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 139,
										"nodeType": "Block",
										"src": "2060:76:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 125,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2074:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 126,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2079:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2074:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 132,
												"nodeType": "IfStatement",
												"src": "2070:29:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 128,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2090:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 129,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2097:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 130,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2089:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 124,
													"id": 131,
													"nodeType": "Return",
													"src": "2082:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 133,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2117:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 134,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "2123:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 135,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 118,
																"src": "2127:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2123:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 137,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2116:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 124,
												"id": 138,
												"nodeType": "Return",
												"src": "2109:20:1"
											}
										]
									},
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "1841:138:1",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2000:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2000:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2011:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1999:22:1"
									},
									"returnParameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2045:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 120,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2045:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2051:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2051:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2044:15:1"
									},
									"scope": 366,
									"src": "1984:152:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "2371:76:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 152,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "2385:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 153,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2390:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2385:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 159,
												"nodeType": "IfStatement",
												"src": "2381:29:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2401:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 156,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2408:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 157,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2400:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 151,
													"id": 158,
													"nodeType": "Return",
													"src": "2393:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 160,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2428:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 163,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 161,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 143,
																"src": "2434:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 162,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 145,
																"src": "2438:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2434:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 164,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2427:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 151,
												"id": 165,
												"nodeType": "Return",
												"src": "2420:20:1"
											}
										]
									},
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "2142:148:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2311:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2311:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2322:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2322:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2310:22:1"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2356:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 147,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2356:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2362:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2362:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:15:1"
									},
									"scope": 366,
									"src": "2295:152:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 192,
										"nodeType": "Block",
										"src": "2749:108:1",
										"statements": [
											{
												"assignments": [
													178
												],
												"declarations": [
													{
														"constant": false,
														"id": 178,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "2759:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 177,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2759:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 182,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 179,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 170,
														"src": "2771:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 180,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 172,
														"src": "2775:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2771:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2759:17:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 184,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "2794:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 185,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 170,
																"src": "2799:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2794:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 187,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2802:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 183,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2786:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2786:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "2786:46:1"
											},
											{
												"expression": {
													"id": 190,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 178,
													"src": "2849:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 176,
												"id": 191,
												"nodeType": "Return",
												"src": "2842:8:1"
											}
										]
									},
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "2453:224:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "2695:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2695:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "2706:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2706:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2694:22:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "2740:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2740:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2739:9:1"
									},
									"scope": 366,
									"src": "2682:175:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "3195:88:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 204,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 198,
																"src": "3213:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 205,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 196,
																"src": "3218:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3213:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 207,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3221:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3205:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3205:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "3205:49:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 210,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 196,
														"src": "3271:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 211,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 198,
														"src": "3275:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3271:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 202,
												"id": 213,
												"nodeType": "Return",
												"src": "3264:12:1"
											}
										]
									},
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "2863:260:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3141:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3141:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3152:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3152:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3140:22:1"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3186:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3186:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3185:9:1"
									},
									"scope": 366,
									"src": "3128:155:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 248,
										"nodeType": "Block",
										"src": "3597:148:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 225,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3611:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 226,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3616:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3611:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 230,
												"nodeType": "IfStatement",
												"src": "3607:20:1",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 228,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3626:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 224,
													"id": 229,
													"nodeType": "Return",
													"src": "3619:8:1"
												}
											},
											{
												"assignments": [
													232
												],
												"declarations": [
													{
														"constant": false,
														"id": 232,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 248,
														"src": "3637:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 231,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3637:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 236,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 233,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3649:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 234,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 220,
														"src": "3653:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3649:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3637:17:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 238,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 232,
																	"src": "3672:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 239,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 218,
																	"src": "3676:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3672:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 241,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 220,
																"src": "3681:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3672:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 243,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3684:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 237,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3664:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3664:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 245,
												"nodeType": "ExpressionStatement",
												"src": "3664:56:1"
											},
											{
												"expression": {
													"id": 246,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 232,
													"src": "3737:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 224,
												"id": 247,
												"nodeType": "Return",
												"src": "3730:8:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "3289:236:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 249,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3543:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3543:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3554:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3554:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3542:22:1"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3588:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3588:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3587:9:1"
									},
									"scope": 366,
									"src": "3530:215:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 270,
										"nodeType": "Block",
										"src": "4276:83:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 262,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 260,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 254,
																"src": "4294:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 261,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4298:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4294:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 263,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4301:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 259,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4286:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4286:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 265,
												"nodeType": "ExpressionStatement",
												"src": "4286:44:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 266,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 252,
														"src": "4347:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 267,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "4351:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4347:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 258,
												"id": 269,
												"nodeType": "Return",
												"src": "4340:12:1"
											}
										]
									},
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "3751:453:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4222:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4222:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4233:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4233:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4221:22:1"
									},
									"returnParameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4267:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4267:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4266:9:1"
									},
									"scope": 366,
									"src": "4209:150:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 292,
										"nodeType": "Block",
										"src": "4879:81:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 282,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "4897:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 283,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4901:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4897:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4904:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 281,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4889:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4889:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 287,
												"nodeType": "ExpressionStatement",
												"src": "4889:42:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 288,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 274,
														"src": "4948:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 289,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "4952:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4948:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 280,
												"id": 291,
												"nodeType": "Return",
												"src": "4941:12:1"
											}
										]
									},
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "4365:442:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "4825:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4825:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "4836:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4824:22:1"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "4870:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4869:9:1"
									},
									"scope": 366,
									"src": "4812:148:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "5519:68:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 306,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 298,
																"src": "5537:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 307,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 296,
																"src": "5542:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5537:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 309,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 300,
															"src": "5545:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 305,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5529:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5529:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 311,
												"nodeType": "ExpressionStatement",
												"src": "5529:29:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 312,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "5575:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 313,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "5579:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5575:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 304,
												"id": 315,
												"nodeType": "Return",
												"src": "5568:12:1"
											}
										]
									},
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "4966:453:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5437:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5437:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5448:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5448:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5459:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 299,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5459:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5436:50:1"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5510:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5510:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5509:9:1"
									},
									"scope": 366,
									"src": "5424:163:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "6339:67:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 330,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 322,
																"src": "6357:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 331,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6361:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6357:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 333,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "6364:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 329,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6349:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6349:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 335,
												"nodeType": "ExpressionStatement",
												"src": "6349:28:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 336,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 320,
														"src": "6394:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 337,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "6398:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6394:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 328,
												"id": 339,
												"nodeType": "Return",
												"src": "6387:12:1"
											}
										]
									},
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "5593:646:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6257:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6257:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6268:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6268:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6279:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 323,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6279:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:50:1"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6330:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6330:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6329:9:1"
									},
									"scope": 366,
									"src": "6244:162:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 364,
										"nodeType": "Block",
										"src": "7147:67:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 354,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 346,
																"src": "7165:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7169:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7165:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 357,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "7172:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 353,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7157:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7157:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "7157:28:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 360,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "7202:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 361,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "7206:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7202:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 352,
												"id": 363,
												"nodeType": "Return",
												"src": "7195:12:1"
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "6412:635:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7065:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7065:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7076:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7076:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7087:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 347,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7087:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7064:50:1"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7138:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7138:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7137:9:1"
									},
									"scope": 366,
									"src": "7052:162:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 367,
							"src": "622:6594:1"
						}
					],
					"src": "33:7184:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1162
						],
						"ERC20": [
							869
						],
						"IERC20": [
							947
						],
						"SafeMath": [
							366
						]
					},
					"id": 870,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 368,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 369,
							"nodeType": "ImportDirective",
							"scope": 870,
							"sourceUnit": 1163,
							"src": "58:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 370,
							"nodeType": "ImportDirective",
							"scope": 870,
							"sourceUnit": 948,
							"src": "92:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "../../math/SafeMath.sol",
							"id": 371,
							"nodeType": "ImportDirective",
							"scope": 870,
							"sourceUnit": 367,
							"src": "115:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 373,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1162,
										"src": "1331:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$1162",
											"typeString": "contract Context"
										}
									},
									"id": 374,
									"nodeType": "InheritanceSpecifier",
									"src": "1331:7:2"
								},
								{
									"baseName": {
										"id": 375,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 947,
										"src": "1340:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$947",
											"typeString": "contract IERC20"
										}
									},
									"id": 376,
									"nodeType": "InheritanceSpecifier",
									"src": "1340:6:2"
								}
							],
							"contractDependencies": [
								947,
								1162
							],
							"contractKind": "contract",
							"documentation": {
								"id": 372,
								"nodeType": "StructuredDocumentation",
								"src": "150:1162:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 869,
							"linearizedBaseContracts": [
								869,
								947,
								1162
							],
							"name": "ERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 379,
									"libraryName": {
										"id": 377,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 366,
										"src": "1359:8:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$366",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "1353:27:2",
									"typeName": {
										"id": 378,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1372:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 383,
									"mutability": "mutable",
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1386:46:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 382,
										"keyType": {
											"id": 380,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1395:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1386:28:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 381,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1406:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 389,
									"mutability": "mutable",
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1439:69:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 388,
										"keyType": {
											"id": 384,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1448:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1439:49:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 387,
											"keyType": {
												"id": 385,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1468:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1459:28:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 386,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1479:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 391,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1515:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 390,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1515:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 393,
									"mutability": "mutable",
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1550:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 392,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1550:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 395,
									"mutability": "mutable",
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1576:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 394,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1576:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 397,
									"mutability": "mutable",
									"name": "_decimals",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1604:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 396,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1604:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 417,
										"nodeType": "Block",
										"src": "2007:81:2",
										"statements": [
											{
												"expression": {
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 405,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "2017:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 406,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "2025:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2017:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 408,
												"nodeType": "ExpressionStatement",
												"src": "2017:13:2"
											},
											{
												"expression": {
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 409,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 395,
														"src": "2040:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 410,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 402,
														"src": "2050:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2040:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 412,
												"nodeType": "ExpressionStatement",
												"src": "2040:17:2"
											},
											{
												"expression": {
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 413,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 397,
														"src": "2067:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3138",
														"id": 414,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2079:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18_by_1",
															"typeString": "int_const 18"
														},
														"value": "18"
													},
													"src": "2067:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 416,
												"nodeType": "ExpressionStatement",
												"src": "2067:14:2"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "1634:311:2",
										"text": " @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n a default value of 18.\n To select a different value for {decimals}, use {_setupDecimals}.\n All three of these values are immutable: they can only be set once during\n construction."
									},
									"id": 418,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "name_",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "1963:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 399,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1963:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "symbol_",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "1984:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 401,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1984:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1962:44:2"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2007:0:2"
									},
									"scope": 869,
									"src": "1950:138:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "2213:29:2",
										"statements": [
											{
												"expression": {
													"id": 424,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 393,
													"src": "2230:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 423,
												"id": 425,
												"nodeType": "Return",
												"src": "2223:12:2"
											}
										]
									},
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "2094:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2166:2:2"
									},
									"returnParameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "2198:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2198:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2197:15:2"
									},
									"scope": 869,
									"src": "2153:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 435,
										"nodeType": "Block",
										"src": "2417:31:2",
										"statements": [
											{
												"expression": {
													"id": 433,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 395,
													"src": "2434:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 432,
												"id": 434,
												"nodeType": "Return",
												"src": "2427:14:2"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "2248:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2370:2:2"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "2402:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 430,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2402:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2401:15:2"
									},
									"scope": 869,
									"src": "2355:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3127:33:2",
										"statements": [
											{
												"expression": {
													"id": 442,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 397,
													"src": "3144:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 441,
												"id": 443,
												"nodeType": "Return",
												"src": "3137:16:2"
											}
										]
									},
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "2454:612:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3088:2:2"
									},
									"returnParameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3120:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 439,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3120:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3119:7:2"
									},
									"scope": 869,
									"src": "3071:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										878
									],
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "3290:36:2",
										"statements": [
											{
												"expression": {
													"id": 452,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 391,
													"src": "3307:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 451,
												"id": 453,
												"nodeType": "Return",
												"src": "3300:19:2"
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "3166:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 448,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3263:8:2"
									},
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3240:2:2"
									},
									"returnParameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "3281:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3281:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3280:9:2"
									},
									"scope": 869,
									"src": "3220:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										886
									],
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "3467:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 464,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 383,
														"src": "3484:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 466,
													"indexExpression": {
														"id": 465,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "3494:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3484:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 463,
												"id": 467,
												"nodeType": "Return",
												"src": "3477:25:2"
											}
										]
									},
									"documentation": {
										"id": 456,
										"nodeType": "StructuredDocumentation",
										"src": "3332:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 460,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3440:8:2"
									},
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3403:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3402:17:2"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3458:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3458:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3457:9:2"
									},
									"scope": 869,
									"src": "3384:125:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										896
									],
									"body": {
										"id": 489,
										"nodeType": "Block",
										"src": "3804:80:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 481,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1150,
																"src": "3824:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3824:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 483,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "3838:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 484,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "3849:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 480,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "3814:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3814:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 486,
												"nodeType": "ExpressionStatement",
												"src": "3814:42:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3873:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 479,
												"id": 488,
												"nodeType": "Return",
												"src": "3866:11:2"
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "3515:192:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 476,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3780:8:2"
									},
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "3730:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3730:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "3749:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3729:35:2"
									},
									"returnParameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "3798:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 477,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3798:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3797:6:2"
									},
									"scope": 869,
									"src": "3712:172:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										906
									],
									"body": {
										"id": 507,
										"nodeType": "Block",
										"src": "4040:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 501,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "4057:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 503,
														"indexExpression": {
															"id": 502,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 493,
															"src": "4069:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4057:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 505,
													"indexExpression": {
														"id": 504,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 495,
														"src": "4076:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4057:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 500,
												"id": 506,
												"nodeType": "Return",
												"src": "4050:34:2"
											}
										]
									},
									"documentation": {
										"id": 491,
										"nodeType": "StructuredDocumentation",
										"src": "3890:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 497,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4013:8:2"
									},
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "3961:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 492,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3961:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "3976:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3976:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3960:32:2"
									},
									"returnParameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "4031:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4031:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4030:9:2"
									},
									"scope": 869,
									"src": "3942:149:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										916
									],
									"body": {
										"id": 528,
										"nodeType": "Block",
										"src": "4318:77:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 520,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1150,
																"src": "4337:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4337:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 522,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "4351:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 523,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "4360:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 519,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "4328:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4328:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 525,
												"nodeType": "ExpressionStatement",
												"src": "4328:39:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4384:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 518,
												"id": 527,
												"nodeType": "Return",
												"src": "4377:11:2"
											}
										]
									},
									"documentation": {
										"id": 509,
										"nodeType": "StructuredDocumentation",
										"src": "4097:127:2",
										"text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 515,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4294:8:2"
									},
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4246:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4246:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4263:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4263:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4245:33:2"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4312:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 516,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4312:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4311:6:2"
									},
									"scope": 869,
									"src": "4229:166:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										928
									],
									"body": {
										"id": 566,
										"nodeType": "Block",
										"src": "4974:205:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 543,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "4994:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 544,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "5002:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 545,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "5013:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 542,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "4984:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4984:36:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 547,
												"nodeType": "ExpressionStatement",
												"src": "4984:36:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 549,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "5039:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 550,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1150,
																"src": "5047:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5047:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 559,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "5099:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
																	"id": 560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5107:42:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	},
																	"value": "ERC20: transfer amount exceeds allowance"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 552,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "5061:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 554,
																		"indexExpression": {
																			"id": 553,
																			"name": "sender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 532,
																			"src": "5073:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5061:19:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 557,
																	"indexExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 555,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1150,
																			"src": "5081:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																				"typeString": "function () view returns (address payable)"
																			}
																		},
																		"id": 556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5081:12:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5061:33:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 317,
																"src": "5061:37:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5061:89:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 548,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "5030:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5030:121:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 563,
												"nodeType": "ExpressionStatement",
												"src": "5030:121:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5168:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 541,
												"id": 565,
												"nodeType": "Return",
												"src": "5161:11:2"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "4401:456:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 567,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 538,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4950:8:2"
									},
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4884:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4884:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4900:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4900:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4919:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4919:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4883:51:2"
									},
									"returnParameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4968:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 539,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4968:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4967:6:2"
									},
									"scope": 869,
									"src": "4862:317:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 594,
										"nodeType": "Block",
										"src": "5668:121:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 578,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1150,
																"src": "5687:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5687:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 580,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 570,
															"src": "5701:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 588,
																	"name": "addedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 572,
																	"src": "5749:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 581,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "5710:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 584,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 582,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1150,
																				"src": "5722:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 583,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5722:12:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5710:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 586,
																	"indexExpression": {
																		"id": 585,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 570,
																		"src": "5736:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5710:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "add",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 193,
																"src": "5710:38:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5710:50:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 577,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "5678:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5678:83:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "5678:83:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 592,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5778:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 576,
												"id": 593,
												"nodeType": "Return",
												"src": "5771:11:2"
											}
										]
									},
									"documentation": {
										"id": 568,
										"nodeType": "StructuredDocumentation",
										"src": "5185:384:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 595,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "5601:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5601:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "5618:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5618:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5600:37:2"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "5662:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 574,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5662:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5661:6:2"
									},
									"scope": 869,
									"src": "5574:215:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 623,
										"nodeType": "Block",
										"src": "6375:167:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 606,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1150,
																"src": "6394:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6394:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 608,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 598,
															"src": "6408:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 616,
																	"name": "subtractedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 600,
																	"src": "6456:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6473:39:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	},
																	"value": "ERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 609,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "6417:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 612,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 610,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1150,
																				"src": "6429:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6429:12:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6417:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 614,
																	"indexExpression": {
																		"id": 613,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 598,
																		"src": "6443:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6417:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 317,
																"src": "6417:38:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6417:96:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 605,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "6385:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6385:129:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 620,
												"nodeType": "ExpressionStatement",
												"src": "6385:129:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6531:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 604,
												"id": 622,
												"nodeType": "Return",
												"src": "6524:11:2"
											}
										]
									},
									"documentation": {
										"id": 596,
										"nodeType": "StructuredDocumentation",
										"src": "5795:476:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "6303:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6303:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "6320:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6320:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6302:42:2"
									},
									"returnParameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "6369:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 602,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6369:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6368:6:2"
									},
									"scope": 869,
									"src": "6276:266:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "7103:443:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 635,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 627,
																"src": "7121:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 638,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7139:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 637,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7131:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 636,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7131:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7131:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7121:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7143:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7113:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7113:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 643,
												"nodeType": "ExpressionStatement",
												"src": "7113:70:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 650,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 645,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 629,
																"src": "7201:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7222:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7214:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 646,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7214:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 649,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7214:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7201:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 651,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7226:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 644,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7193:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7193:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 653,
												"nodeType": "ExpressionStatement",
												"src": "7193:71:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 655,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7296:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 656,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7304:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 657,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 631,
															"src": "7315:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 654,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "7275:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7275:47:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 659,
												"nodeType": "ExpressionStatement",
												"src": "7275:47:2"
											},
											{
												"expression": {
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 660,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "7333:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 662,
														"indexExpression": {
															"id": 661,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7343:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7333:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 667,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 631,
																"src": "7375:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7383:40:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																},
																"value": "ERC20: transfer amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 663,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "7353:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 665,
																"indexExpression": {
																	"id": 664,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 627,
																	"src": "7363:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7353:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 317,
															"src": "7353:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 669,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7353:71:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7333:91:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 671,
												"nodeType": "ExpressionStatement",
												"src": "7333:91:2"
											},
											{
												"expression": {
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 672,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "7434:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 674,
														"indexExpression": {
															"id": 673,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7444:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7434:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 679,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 631,
																"src": "7482:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 675,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "7457:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 677,
																"indexExpression": {
																	"id": 676,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 629,
																	"src": "7467:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7457:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 193,
															"src": "7457:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 680,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7457:32:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7434:55:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 682,
												"nodeType": "ExpressionStatement",
												"src": "7434:55:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 684,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7513:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 685,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7521:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 686,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 631,
															"src": "7532:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 683,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "7504:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7504:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "EmitStatement",
												"src": "7499:40:2"
											}
										]
									},
									"documentation": {
										"id": 625,
										"nodeType": "StructuredDocumentation",
										"src": "6548:463:2",
										"text": " @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7035:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7035:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7051:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7051:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7070:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7070:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7034:51:2"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7103:0:2"
									},
									"scope": 869,
									"src": "7016:530:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 744,
										"nodeType": "Block",
										"src": "7882:305:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 699,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "7900:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7919:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7911:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 700,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7911:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 703,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7911:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7900:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7923:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 698,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7892:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7892:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 707,
												"nodeType": "ExpressionStatement",
												"src": "7892:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 711,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7997:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7989:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 709,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7989:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 712,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7989:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 713,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "8001:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 714,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "8010:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 708,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "7968:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7968:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 716,
												"nodeType": "ExpressionStatement",
												"src": "7968:49:2"
											},
											{
												"expression": {
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 717,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 391,
														"src": "8028:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 720,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "8060:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 718,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 391,
																"src": "8043:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 193,
															"src": "8043:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 721,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8043:24:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8028:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 723,
												"nodeType": "ExpressionStatement",
												"src": "8028:39:2"
											},
											{
												"expression": {
													"id": 733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 724,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "8077:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 726,
														"indexExpression": {
															"id": 725,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "8087:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8077:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 731,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "8121:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 727,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "8098:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 729,
																"indexExpression": {
																	"id": 728,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 693,
																	"src": "8108:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8098:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 193,
															"src": "8098:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 732,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8098:30:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8077:51:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 734,
												"nodeType": "ExpressionStatement",
												"src": "8077:51:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8160:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 737,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8152:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 736,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8152:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8152:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 740,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "8164:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 741,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "8173:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 735,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "8143:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8143:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 743,
												"nodeType": "EmitStatement",
												"src": "8138:42:2"
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "7552:260:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `to` cannot be the zero address."
									},
									"id": 745,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "7832:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7832:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "7849:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7849:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7831:33:2"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7882:0:2"
									},
									"scope": 869,
									"src": "7817:370:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 800,
										"nodeType": "Block",
										"src": "8572:345:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 754,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 748,
																"src": "8590:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 757,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8609:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 756,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8601:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 755,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8601:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 758,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8601:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "8590:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8613:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 753,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8582:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8582:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 762,
												"nodeType": "ExpressionStatement",
												"src": "8582:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 764,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "8681:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 767,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8698:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 766,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8690:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 765,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8690:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8690:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 769,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "8702:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 763,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "8660:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8660:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 771,
												"nodeType": "ExpressionStatement",
												"src": "8660:49:2"
											},
											{
												"expression": {
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 772,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "8720:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 774,
														"indexExpression": {
															"id": 773,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "8730:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8720:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 779,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 750,
																"src": "8764:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
																"id": 780,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8772:36:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																},
																"value": "ERC20: burn amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 775,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "8741:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 777,
																"indexExpression": {
																	"id": 776,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 748,
																	"src": "8751:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8741:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 317,
															"src": "8741:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8741:68:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8720:89:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 783,
												"nodeType": "ExpressionStatement",
												"src": "8720:89:2"
											},
											{
												"expression": {
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 784,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 391,
														"src": "8819:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 787,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 750,
																"src": "8851:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 785,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 391,
																"src": "8834:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 215,
															"src": "8834:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 788,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8834:24:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8819:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 790,
												"nodeType": "ExpressionStatement",
												"src": "8819:39:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 792,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "8882:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8899:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8891:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 793,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8891:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8891:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 797,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "8903:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 791,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "8873:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8873:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 799,
												"nodeType": "EmitStatement",
												"src": "8868:42:2"
											}
										]
									},
									"documentation": {
										"id": 746,
										"nodeType": "StructuredDocumentation",
										"src": "8193:309:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 801,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "8522:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 747,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8522:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "8539:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8539:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8521:33:2"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8572:0:2"
									},
									"scope": 869,
									"src": "8507:410:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "9423:257:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 812,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 804,
																"src": "9441:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 815,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9458:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9450:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 813,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9450:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 816,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9450:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9441:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9462:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 811,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9433:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9433:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 820,
												"nodeType": "ExpressionStatement",
												"src": "9433:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 827,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 822,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 806,
																"src": "9519:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 825,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9538:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9530:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 823,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9530:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 826,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9530:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9519:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 828,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9542:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 821,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9511:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9511:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 830,
												"nodeType": "ExpressionStatement",
												"src": "9511:68:2"
											},
											{
												"expression": {
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 831,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 389,
																"src": "9590:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 834,
															"indexExpression": {
																"id": 832,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 804,
																"src": "9602:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9590:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 835,
														"indexExpression": {
															"id": 833,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 806,
															"src": "9609:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9590:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 836,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 808,
														"src": "9620:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9590:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "9590:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 840,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 804,
															"src": "9650:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 841,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 806,
															"src": "9657:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 842,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "9666:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 839,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 946,
														"src": "9641:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9641:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 844,
												"nodeType": "EmitStatement",
												"src": "9636:37:2"
											}
										]
									},
									"documentation": {
										"id": 802,
										"nodeType": "StructuredDocumentation",
										"src": "8923:412:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "9358:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 803,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9358:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "9373:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9373:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "9390:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9390:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9357:48:2"
									},
									"returnParameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9423:0:2"
									},
									"scope": 869,
									"src": "9340:340:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 856,
										"nodeType": "Block",
										"src": "10061:38:2",
										"statements": [
											{
												"expression": {
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 852,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 397,
														"src": "10071:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 853,
														"name": "decimals_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 849,
														"src": "10083:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "10071:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 855,
												"nodeType": "ExpressionStatement",
												"src": "10071:21:2"
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "9686:312:2",
										"text": " @dev Sets {decimals} to a value other than the default one of 18.\n WARNING: This function should only be called from the constructor. Most\n applications that interact with token contracts will not expect\n {decimals} to ever change, and may work incorrectly if it does."
									},
									"id": 857,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupDecimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "decimals_",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "10027:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 848,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "10027:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10026:17:2"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10061:0:2"
									},
									"scope": 869,
									"src": "10003:96:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 867,
										"nodeType": "Block",
										"src": "10775:3:2",
										"statements": []
									},
									"documentation": {
										"id": 858,
										"nodeType": "StructuredDocumentation",
										"src": "10105:576:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 868,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 860,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "10716:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10716:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "10730:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10730:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "10742:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10742:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10715:42:2"
									},
									"returnParameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10775:0:2"
									},
									"scope": 869,
									"src": "10686:92:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 870,
							"src": "1313:9467:2"
						}
					],
					"src": "33:10748:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							947
						]
					},
					"id": 948,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 871,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 872,
								"nodeType": "StructuredDocumentation",
								"src": "58:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 947,
							"linearizedBaseContracts": [
								947
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "152:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 878,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "243:2:3"
									},
									"returnParameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "269:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "269:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "268:9:3"
									},
									"scope": 947,
									"src": "223:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 879,
										"nodeType": "StructuredDocumentation",
										"src": "284:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 886,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "380:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "380:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "379:17:3"
									},
									"returnParameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "420:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:9:3"
									},
									"scope": 947,
									"src": "361:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "435:209:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 896,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "667:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "667:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "686:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "686:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "666:35:3"
									},
									"returnParameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "720:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 893,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "720:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "719:6:3"
									},
									"scope": 947,
									"src": "649:77:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 897,
										"nodeType": "StructuredDocumentation",
										"src": "732:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 906,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "1020:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "1035:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 900,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1019:32:3"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "1075:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1075:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1074:9:3"
									},
									"scope": 947,
									"src": "1001:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "1090:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 916,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1754:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1771:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 910,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1771:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:33:3"
									},
									"returnParameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1805:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 913,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1805:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:6:3"
									},
									"scope": 947,
									"src": "1737:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 917,
										"nodeType": "StructuredDocumentation",
										"src": "1817:296:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 928,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2140:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 918,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2140:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2156:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2156:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2175:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2175:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2139:51:3"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2209:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 925,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2209:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2208:6:3"
									},
									"scope": 947,
									"src": "2118:97:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "2221:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 937,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2399:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2399:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2421:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 935,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2441:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2441:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2398:57:3"
									},
									"src": "2384:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "2462:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 946,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "2630:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2630:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "2653:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "2678:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2678:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2629:63:3"
									},
									"src": "2615:78:3"
								}
							],
							"scope": 948,
							"src": "129:2566:3"
						}
					],
					"src": "33:2663:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						]
					},
					"id": 1064,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 949,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/introspection/IERC165.sol",
							"file": "../../introspection/IERC165.sol",
							"id": 950,
							"nodeType": "ImportDirective",
							"scope": 1064,
							"sourceUnit": 12,
							"src": "58:41:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 952,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 11,
										"src": "190:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$11",
											"typeString": "contract IERC165"
										}
									},
									"id": 953,
									"nodeType": "InheritanceSpecifier",
									"src": "190:7:4"
								}
							],
							"contractDependencies": [
								11
							],
							"contractKind": "interface",
							"documentation": {
								"id": 951,
								"nodeType": "StructuredDocumentation",
								"src": "101:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1063,
							"linearizedBaseContracts": [
								1063,
								11
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 954,
										"nodeType": "StructuredDocumentation",
										"src": "204:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 962,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "312:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "312:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "334:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "334:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "354:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "354:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "311:67:4"
									},
									"src": "297:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "385:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 971,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "499:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 964,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "499:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "522:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 966,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "522:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "548:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 968,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "548:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "498:74:4"
									},
									"src": "484:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 972,
										"nodeType": "StructuredDocumentation",
										"src": "579:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 980,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 974,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "722:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "722:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 976,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "745:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "771:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 977,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "771:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "721:64:4"
									},
									"src": "701:85:4"
								},
								{
									"documentation": {
										"id": 981,
										"nodeType": "StructuredDocumentation",
										"src": "792:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 988,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "892:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:15:4"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"scope": 1063,
									"src": "873:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 989,
										"nodeType": "StructuredDocumentation",
										"src": "953:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 996,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "1106:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1106:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1105:17:4"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "1146:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 993,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1146:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1145:15:4"
									},
									"scope": 1063,
									"src": "1089:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "1167:690:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1006,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1888:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 998,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1888:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1902:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1902:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1914:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1914:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:43:4"
									},
									"returnParameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1939:0:4"
									},
									"scope": 1063,
									"src": "1862:78:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1007,
										"nodeType": "StructuredDocumentation",
										"src": "1946:504:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "2477:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1008,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2477:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "2491:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1010,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2491:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "2503:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1012,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2503:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2476:43:4"
									},
									"returnParameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2528:0:4"
									},
									"scope": 1063,
									"src": "2455:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "2535:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1024,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "3009:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3009:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "3021:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3021:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3008:29:4"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3046:0:4"
									},
									"scope": 1063,
									"src": "2992:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1025,
										"nodeType": "StructuredDocumentation",
										"src": "3053:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1032,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1032,
												"src": "3218:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3218:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3217:17:4"
									},
									"returnParameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1032,
												"src": "3258:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1029,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3258:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3257:18:4"
									},
									"scope": 1063,
									"src": "3197:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1033,
										"nodeType": "StructuredDocumentation",
										"src": "3282:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1040,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "3623:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3623:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "3641:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1036,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3641:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3622:34:4"
									},
									"returnParameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3665:0:4"
									},
									"scope": 1063,
									"src": "3596:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1041,
										"nodeType": "StructuredDocumentation",
										"src": "3672:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1050,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "3841:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "3856:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3856:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3840:33:4"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "3897:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1047,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3897:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3896:6:4"
									},
									"scope": 1063,
									"src": "3815:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1051,
										"nodeType": "StructuredDocumentation",
										"src": "3909:568:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1062,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4508:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1052,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4508:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4522:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4522:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4534:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4534:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4551:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1058,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4551:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4507:64:4"
									},
									"returnParameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4580:0:4"
									},
									"scope": 1063,
									"src": "4482:99:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1064,
							"src": "169:4414:4"
						}
					],
					"src": "33:4551:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Enumerable": [
							1094
						]
					},
					"id": 1095,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1065,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 1066,
							"nodeType": "ImportDirective",
							"scope": 1095,
							"sourceUnit": 1064,
							"src": "58:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1068,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1063,
										"src": "251:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$1063",
											"typeString": "contract IERC721"
										}
									},
									"id": 1069,
									"nodeType": "InheritanceSpecifier",
									"src": "251:7:5"
								}
							],
							"contractDependencies": [
								11,
								1063
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1067,
								"nodeType": "StructuredDocumentation",
								"src": "83:136:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1094,
							"linearizedBaseContracts": [
								1094,
								1063,
								11
							],
							"name": "IERC721Enumerable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1070,
										"nodeType": "StructuredDocumentation",
										"src": "266:82:5",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 1075,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "373:2:5"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "399:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1072,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "399:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "398:9:5"
									},
									"scope": 1094,
									"src": "353:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1076,
										"nodeType": "StructuredDocumentation",
										"src": "414:171:5",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 1085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "619:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "634:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "618:30:5"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "672:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "671:17:5"
									},
									"scope": 1094,
									"src": "590:99:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "695:164:5",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 1093,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "886:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "886:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "885:15:5"
									},
									"returnParameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "924:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:9:5"
									},
									"scope": 1094,
									"src": "864:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1095,
							"src": "220:715:5"
						}
					],
					"src": "33:903:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Metadata": [
							1121
						]
					},
					"id": 1122,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1096,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 1097,
							"nodeType": "ImportDirective",
							"scope": 1122,
							"sourceUnit": 1064,
							"src": "58:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1099,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1063,
										"src": "246:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$1063",
											"typeString": "contract IERC721"
										}
									},
									"id": 1100,
									"nodeType": "InheritanceSpecifier",
									"src": "246:7:6"
								}
							],
							"contractDependencies": [
								11,
								1063
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1098,
								"nodeType": "StructuredDocumentation",
								"src": "83:133:6",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1121,
							"linearizedBaseContracts": [
								1121,
								1063,
								11
							],
							"name": "IERC721Metadata",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1101,
										"nodeType": "StructuredDocumentation",
										"src": "261:58:6",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "337:2:6"
									},
									"returnParameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1106,
												"src": "363:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1103,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "363:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "362:15:6"
									},
									"scope": 1121,
									"src": "324:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1107,
										"nodeType": "StructuredDocumentation",
										"src": "384:60:6",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "464:2:6"
									},
									"returnParameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "490:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1109,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "490:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "489:15:6"
									},
									"scope": 1121,
									"src": "449:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1113,
										"nodeType": "StructuredDocumentation",
										"src": "511:90:6",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "624:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:17:6"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "664:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1117,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "664:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "663:15:6"
									},
									"scope": 1121,
									"src": "606:73:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1122,
							"src": "217:464:6"
						}
					],
					"src": "33:649:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							1139
						]
					},
					"id": 1140,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1123,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1124,
								"nodeType": "StructuredDocumentation",
								"src": "58:152:7",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 1139,
							"linearizedBaseContracts": [
								1139
							],
							"name": "IERC721Receiver",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1125,
										"nodeType": "StructuredDocumentation",
										"src": "243:485:7",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 1138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "759:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "759:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "777:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "777:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "791:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "791:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "808:19:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1132,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "808:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "758:70:7"
									},
									"returnParameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "847:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1135,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "847:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "846:8:7"
									},
									"scope": 1139,
									"src": "733:122:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1140,
							"src": "211:646:7"
						}
					],
					"src": "33:825:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1162
						]
					},
					"id": 1163,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1141,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1162,
							"linearizedBaseContracts": [
								1162
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1149,
										"nodeType": "Block",
										"src": "668:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1146,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "685:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "685:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 1145,
												"id": 1148,
												"nodeType": "Return",
												"src": "678:17:8"
											}
										]
									},
									"id": 1150,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "617:2:8"
									},
									"returnParameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1150,
												"src": "651:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:15:8",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:17:8"
									},
									"scope": 1162,
									"src": "598:104:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1160,
										"nodeType": "Block",
										"src": "773:165:8",
										"statements": [
											{
												"expression": {
													"id": 1155,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967268,
													"src": "783:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$1162",
														"typeString": "contract Context"
													}
												},
												"id": 1156,
												"nodeType": "ExpressionStatement",
												"src": "783:4:8"
											},
											{
												"expression": {
													"expression": {
														"id": 1157,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "923:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "923:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1154,
												"id": 1159,
												"nodeType": "Return",
												"src": "916:15:8"
											}
										]
									},
									"id": 1161,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:8"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "759:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1152,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "759:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "758:14:8"
									},
									"scope": 1162,
									"src": "708:230:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1163,
							"src": "566:374:8"
						}
					],
					"src": "33:908:8"
				},
				"id": 8
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							1697
						]
					},
					"id": 1698,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1164,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1165,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:9",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 1697,
							"linearizedBaseContracts": [
								1697
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 1166,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:9",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 1170,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1697,
									"src": "449:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 1167,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 1169,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:9",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 1168,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1171,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:9",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 1175,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1697,
									"src": "609:44:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 1172,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 1174,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:9",
										"subExpression": {
											"id": 1173,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1170,
											"src": "645:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1176,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:9",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 1179,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1697,
									"src": "781:53:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 1177,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 1178,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1180,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:9",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 1183,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1697,
									"src": "961:92:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 1181,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 1182,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1556,
										"nodeType": "Block",
										"src": "1447:2495:9",
										"statements": [
											{
												"assignments": [
													1192
												],
												"declarations": [
													{
														"constant": false,
														"id": 1192,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 1556,
														"src": "1457:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1191,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1212,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 1195,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1193,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1186,
															"src": "1475:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1194,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1208,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1186,
																		"src": "1526:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 1207,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1206,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1204,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1210,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:9",
													"trueExpression": {
														"arguments": [
															{
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:9",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 1200,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1186,
																			"src": "1502:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1199,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1198,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1201,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1196,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1203,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1214,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1192,
																"src": "1550:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1217,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1175,
																		"src": "1569:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 1216,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1215,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1218,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 1220,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 1213,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1222,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:9"
											},
											{
												"assignments": [
													1224
												],
												"declarations": [
													{
														"constant": false,
														"id": 1224,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1556,
														"src": "1595:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1223,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1233,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1229,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1225,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1192,
																"src": "1611:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 1226,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 1231,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 1232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:9",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 1230,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1236,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1234,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "1718:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 1235,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1237,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1248,
												"nodeType": "IfStatement",
												"src": "1714:83:9",
												"trueBody": {
													"expression": {
														"id": 1246,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1239,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "1738:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1240,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "1747:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 1241,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1243,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1244,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1247,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1251,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1249,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "1811:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 1250,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1252,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1263,
												"nodeType": "IfStatement",
												"src": "1807:83:9",
												"trueBody": {
													"expression": {
														"id": 1261,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1254,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "1831:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1255,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "1840:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 1256,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1258,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1262,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1264,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "1904:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1267,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1278,
												"nodeType": "IfStatement",
												"src": "1900:83:9",
												"trueBody": {
													"expression": {
														"id": 1276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1269,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "1924:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1272,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1270,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "1933:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 1271,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1273,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1274,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1277,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1279,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "1997:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 1280,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1282,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1293,
												"nodeType": "IfStatement",
												"src": "1993:84:9",
												"trueBody": {
													"expression": {
														"id": 1291,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1284,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2018:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1287,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1285,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2027:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 1286,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1288,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1289,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1292,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1296,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1294,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2091:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 1295,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1297,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1308,
												"nodeType": "IfStatement",
												"src": "2087:84:9",
												"trueBody": {
													"expression": {
														"id": 1306,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1299,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2112:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1302,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1300,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2121:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 1301,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1303,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1304,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1307,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1309,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2185:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 1310,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1312,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1323,
												"nodeType": "IfStatement",
												"src": "2181:84:9",
												"trueBody": {
													"expression": {
														"id": 1321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1314,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2206:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1315,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2215:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 1316,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1318,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1319,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1322,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1326,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1324,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2279:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 1325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1327,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1338,
												"nodeType": "IfStatement",
												"src": "2275:84:9",
												"trueBody": {
													"expression": {
														"id": 1336,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1329,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2300:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1332,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1330,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2309:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 1331,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1333,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1334,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1337,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1339,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2373:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 1340,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1342,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1353,
												"nodeType": "IfStatement",
												"src": "2369:85:9",
												"trueBody": {
													"expression": {
														"id": 1351,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1344,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2395:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1350,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1347,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1345,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2404:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 1346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1348,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1349,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1352,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1356,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1354,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2468:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 1355,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1357,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1368,
												"nodeType": "IfStatement",
												"src": "2464:85:9",
												"trueBody": {
													"expression": {
														"id": 1366,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1359,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2490:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1360,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2499:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 1361,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1363,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1364,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1367,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1371,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1369,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2563:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 1370,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1372,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1383,
												"nodeType": "IfStatement",
												"src": "2559:85:9",
												"trueBody": {
													"expression": {
														"id": 1381,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1374,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2585:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1375,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2594:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 1376,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1378,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1379,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1382,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1386,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1384,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 1385,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1387,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1398,
												"nodeType": "IfStatement",
												"src": "2654:85:9",
												"trueBody": {
													"expression": {
														"id": 1396,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1389,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2680:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1392,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1390,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2689:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 1391,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1393,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1397,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1399,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2753:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 1400,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1402,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1413,
												"nodeType": "IfStatement",
												"src": "2749:86:9",
												"trueBody": {
													"expression": {
														"id": 1411,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1404,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2776:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1407,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1405,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2785:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 1406,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1408,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1409,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1412,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1416,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1414,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2849:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 1415,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1417,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1428,
												"nodeType": "IfStatement",
												"src": "2845:86:9",
												"trueBody": {
													"expression": {
														"id": 1426,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1419,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2872:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1425,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1420,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2881:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 1421,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1423,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1424,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1427,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1431,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1429,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "2945:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 1430,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1432,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1443,
												"nodeType": "IfStatement",
												"src": "2941:86:9",
												"trueBody": {
													"expression": {
														"id": 1441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1434,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "2968:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1437,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1435,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "2977:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 1436,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1438,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1439,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1442,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1446,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1444,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "3041:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 1445,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1447,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1458,
												"nodeType": "IfStatement",
												"src": "3037:86:9",
												"trueBody": {
													"expression": {
														"id": 1456,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1449,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3064:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1455,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1452,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1450,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "3073:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 1451,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1453,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1454,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1457,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1461,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1459,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "3137:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 1460,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1462,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1473,
												"nodeType": "IfStatement",
												"src": "3133:86:9",
												"trueBody": {
													"expression": {
														"id": 1471,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1464,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3161:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1470,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1465,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "3170:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 1466,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1468,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1469,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1472,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1476,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1474,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "3233:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1477,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1488,
												"nodeType": "IfStatement",
												"src": "3229:85:9",
												"trueBody": {
													"expression": {
														"id": 1486,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1479,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3257:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1480,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "3266:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 1481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1483,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1484,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1487,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1491,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1489,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "3328:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 1490,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1492,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1503,
												"nodeType": "IfStatement",
												"src": "3324:83:9",
												"trueBody": {
													"expression": {
														"id": 1501,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1494,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3352:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1497,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1495,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "3361:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 1496,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1498,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1499,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1502,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1506,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1504,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "3421:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 1505,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1507,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1518,
												"nodeType": "IfStatement",
												"src": "3417:78:9",
												"trueBody": {
													"expression": {
														"id": 1516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1509,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3445:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1515,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1510,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1224,
																			"src": "3454:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 1511,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1513,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1514,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1517,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 1521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1519,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1186,
														"src": "3510:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1520,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1532,
												"nodeType": "IfStatement",
												"src": "3506:47:9",
												"trueBody": {
													"expression": {
														"id": 1530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1522,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3520:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1525,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1524,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:9",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 1523,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1526,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 1527,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1528,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1224,
																"src": "3548:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1531,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:9"
												}
											},
											{
												"expression": {
													"id": 1554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1533,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1189,
														"src": "3863:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1552,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1538,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1536,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1224,
																				"src": "3887:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1537,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1539,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1547,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1545,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1540,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1224,
																						"src": "3903:5:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 1543,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 1541,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 1542,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 1544,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1546,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 1549,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 1550,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:9",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 1548,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 1551,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1535,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 1534,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1553,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 1555,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:9"
											}
										]
									},
									"documentation": {
										"id": 1184,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:9",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 1557,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1186,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1557,
												"src": "1390:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1185,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:9"
									},
									"returnParameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1557,
												"src": "1425:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1188,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:9"
									},
									"scope": 1697,
									"src": "1362:2580:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1695,
										"nodeType": "Block",
										"src": "4446:4196:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1568,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1566,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1560,
																	"src": "4563:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1567,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1179,
																	"src": "4579:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1571,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1569,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1560,
																	"src": "4597:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1570,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1183,
																	"src": "4612:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 1573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 1565,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1575,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:9"
											},
											{
												"assignments": [
													1577
												],
												"declarations": [
													{
														"constant": false,
														"id": 1577,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "4642:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1576,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1584,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1580,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1560,
																"src": "4666:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1579,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1578,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1581,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1582,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:9"
											},
											{
												"assignments": [
													1586
												],
												"declarations": [
													{
														"constant": false,
														"id": 1586,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "4696:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1585,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1588,
												"initialValue": {
													"id": 1587,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1577,
													"src": "4708:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:9"
											},
											{
												"assignments": [
													1590
												],
												"declarations": [
													{
														"constant": false,
														"id": 1590,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "4723:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1589,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1592,
												"initialValue": {
													"hexValue": "30",
													"id": 1591,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:9",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:9",
														"valueSize": 1
													}
												],
												"id": 1593,
												"nodeType": "InlineAssembly",
												"src": "4749:148:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:9",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:9",
														"valueSize": 1
													}
												],
												"id": 1594,
												"nodeType": "InlineAssembly",
												"src": "4906:132:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:9",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:9",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:9",
														"valueSize": 1
													}
												],
												"id": 1595,
												"nodeType": "InlineAssembly",
												"src": "5047:124:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:9",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:9",
														"valueSize": 1
													}
												],
												"id": 1596,
												"nodeType": "InlineAssembly",
												"src": "5180:120:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:9",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:9",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:9",
														"valueSize": 1
													}
												],
												"id": 1597,
												"nodeType": "InlineAssembly",
												"src": "5309:118:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:9",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:9",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:9",
														"valueSize": 1
													}
												],
												"id": 1598,
												"nodeType": "InlineAssembly",
												"src": "5436:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:9",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:9",
														"valueSize": 1
													}
												],
												"id": 1599,
												"nodeType": "InlineAssembly",
												"src": "5562:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:9",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1590,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:9",
														"valueSize": 1
													}
												],
												"id": 1600,
												"nodeType": "InlineAssembly",
												"src": "5688:82:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1601,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1590,
														"src": "5784:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 1602,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1620,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1613,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1586,
															"src": "5835:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1614,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1577,
																"src": "5839:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 1615,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1616,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1590,
																			"src": "5855:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1618,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1621,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:9"
												},
												"id": 1622,
												"nodeType": "IfStatement",
												"src": "5780:79:9",
												"trueBody": {
													"expression": {
														"id": 1611,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1604,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1586,
															"src": "5796:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1610,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1605,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1577,
																"src": "5800:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1608,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1606,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1590,
																			"src": "5810:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 1607,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1609,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1612,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:9"
												}
											},
											{
												"assignments": [
													1624
												],
												"declarations": [
													{
														"constant": false,
														"id": 1624,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "5870:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1623,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1634,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1630,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1627,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1590,
																			"src": "5893:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1626,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1625,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1628,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1631,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 1632,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:9",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:9",
														"valueSize": 1
													}
												],
												"id": 1635,
												"nodeType": "InlineAssembly",
												"src": "5921:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:9",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:9",
														"valueSize": 1
													}
												],
												"id": 1636,
												"nodeType": "InlineAssembly",
												"src": "6090:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:9",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:9",
														"valueSize": 1
													}
												],
												"id": 1637,
												"nodeType": "InlineAssembly",
												"src": "6259:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:9",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:9",
														"valueSize": 1
													}
												],
												"id": 1638,
												"nodeType": "InlineAssembly",
												"src": "6428:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:9",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:9",
														"valueSize": 1
													}
												],
												"id": 1639,
												"nodeType": "InlineAssembly",
												"src": "6597:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:9",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:9",
														"valueSize": 1
													}
												],
												"id": 1640,
												"nodeType": "InlineAssembly",
												"src": "6766:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:9",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:9",
														"valueSize": 1
													}
												],
												"id": 1641,
												"nodeType": "InlineAssembly",
												"src": "6935:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:9",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:9",
														"valueSize": 1
													}
												],
												"id": 1642,
												"nodeType": "InlineAssembly",
												"src": "7104:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:9",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:9",
														"valueSize": 1
													}
												],
												"id": 1643,
												"nodeType": "InlineAssembly",
												"src": "7273:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:9",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:9",
														"valueSize": 1
													}
												],
												"id": 1644,
												"nodeType": "InlineAssembly",
												"src": "7442:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:9",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:9",
														"valueSize": 1
													}
												],
												"id": 1645,
												"nodeType": "InlineAssembly",
												"src": "7611:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:9",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:9",
														"valueSize": 1
													}
												],
												"id": 1646,
												"nodeType": "InlineAssembly",
												"src": "7780:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:9",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:9",
														"valueSize": 1
													}
												],
												"id": 1647,
												"nodeType": "InlineAssembly",
												"src": "7949:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:9",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1624,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1586,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:9",
														"valueSize": 1
													}
												],
												"id": 1648,
												"nodeType": "InlineAssembly",
												"src": "8118:133:9"
											},
											{
												"assignments": [
													1650
												],
												"declarations": [
													{
														"constant": false,
														"id": 1650,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "8261:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1649,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1654,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1651,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1624,
														"src": "8284:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1652,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:9"
											},
											{
												"assignments": [
													1656
												],
												"declarations": [
													{
														"constant": false,
														"id": 1656,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "8345:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1655,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1666,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1664,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1661,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1659,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1650,
																			"src": "8368:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1660,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1662,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1663,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1658,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1657,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:9"
											},
											{
												"assignments": [
													1668
												],
												"declarations": [
													{
														"constant": false,
														"id": 1668,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 1695,
														"src": "8440:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1667,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1678,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1673,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1671,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1650,
																			"src": "8462:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1672,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1674,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1675,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1670,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1669,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:9"
											},
											{
												"expression": {
													"id": 1693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1679,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "8537:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 1682,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1680,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1656,
																"src": "8544:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1681,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1668,
																"src": "8555:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1685,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1668,
																			"src": "8593:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1684,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1557,
																		"src": "8574:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 1686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1687,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1560,
																	"src": "8604:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1690,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1656,
																"src": "8628:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 1691,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:9",
															"trueExpression": {
																"id": 1689,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1668,
																"src": "8619:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 1692,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:9",
														"trueExpression": {
															"id": 1683,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1656,
															"src": "8564:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1694,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:9"
											}
										]
									},
									"documentation": {
										"id": 1558,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:9",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 1696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "4389:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1559,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:9"
									},
									"returnParameters": {
										"id": 1564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1563,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "4434:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1562,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:9"
									},
									"scope": 1697,
									"src": "4361:4281:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1698,
							"src": "313:8331:9"
						}
					],
					"src": "45:8600:9"
				},
				"id": 9
			},
			"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Permit": [
							1732
						]
					},
					"id": 1733,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1699,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1700,
							"nodeType": "ImportDirective",
							"scope": 1733,
							"sourceUnit": 1064,
							"src": "71:58:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1702,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1063,
										"src": "282:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$1063",
											"typeString": "contract IERC721"
										}
									},
									"id": 1703,
									"nodeType": "InheritanceSpecifier",
									"src": "282:7:10"
								}
							],
							"contractDependencies": [
								11,
								1063
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1701,
								"nodeType": "StructuredDocumentation",
								"src": "131:124:10",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 1732,
							"linearizedBaseContracts": [
								1732,
								1063,
								11
							],
							"name": "IERC721Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1704,
										"nodeType": "StructuredDocumentation",
										"src": "296:104:10",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 1709,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1705,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:10"
									},
									"returnParameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1707,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "455:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1706,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "454:9:10"
									},
									"scope": 1732,
									"src": "405:59:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1710,
										"nodeType": "StructuredDocumentation",
										"src": "470:135:10",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 1715,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:10"
									},
									"returnParameters": {
										"id": 1714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "661:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1712,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:9:10"
									},
									"scope": 1732,
									"src": "610:60:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1716,
										"nodeType": "StructuredDocumentation",
										"src": "676:605:10",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 1731,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "1311:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1311:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "1336:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1336:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "1361:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1724,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "1387:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1723,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1387:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1726,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "1404:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1725,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1404:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1728,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "1423:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1727,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1301:137:10"
									},
									"returnParameters": {
										"id": 1730,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:0:10"
									},
									"scope": 1732,
									"src": "1286:170:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1733,
							"src": "255:1203:10"
						}
					],
					"src": "45:1414:10"
				},
				"id": 10
			},
			"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Enumerable": [
							1094
						],
						"IERC721Metadata": [
							1121
						],
						"IERC721Permit": [
							1732
						],
						"INonfungiblePositionManager": [
							1927
						],
						"IPeripheryImmutableState": [
							1943
						],
						"IPeripheryPayments": [
							1969
						],
						"IPoolInitializer": [
							1988
						],
						"PoolAddress": [
							2080
						]
					},
					"id": 1928,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1734,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"id": 1735,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"id": 1736,
							"nodeType": "ImportDirective",
							"scope": 1928,
							"sourceUnit": 1122,
							"src": "91:66:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"id": 1737,
							"nodeType": "ImportDirective",
							"scope": 1928,
							"sourceUnit": 1095,
							"src": "158:68:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol",
							"file": "./IPoolInitializer.sol",
							"id": 1738,
							"nodeType": "ImportDirective",
							"scope": 1928,
							"sourceUnit": 1989,
							"src": "228:32:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol",
							"file": "./IERC721Permit.sol",
							"id": 1739,
							"nodeType": "ImportDirective",
							"scope": 1928,
							"sourceUnit": 1733,
							"src": "261:29:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol",
							"file": "./IPeripheryPayments.sol",
							"id": 1740,
							"nodeType": "ImportDirective",
							"scope": 1928,
							"sourceUnit": 1970,
							"src": "291:34:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "./IPeripheryImmutableState.sol",
							"id": 1741,
							"nodeType": "ImportDirective",
							"scope": 1928,
							"sourceUnit": 1944,
							"src": "326:40:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol",
							"file": "../libraries/PoolAddress.sol",
							"id": 1742,
							"nodeType": "ImportDirective",
							"scope": 1928,
							"sourceUnit": 2081,
							"src": "367:38:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1744,
										"name": "IPoolInitializer",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1988,
										"src": "629:16:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPoolInitializer_$1988",
											"typeString": "contract IPoolInitializer"
										}
									},
									"id": 1745,
									"nodeType": "InheritanceSpecifier",
									"src": "629:16:11"
								},
								{
									"baseName": {
										"id": 1746,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1969,
										"src": "651:18:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$1969",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 1747,
									"nodeType": "InheritanceSpecifier",
									"src": "651:18:11"
								},
								{
									"baseName": {
										"id": 1748,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1943,
										"src": "675:24:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$1943",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 1749,
									"nodeType": "InheritanceSpecifier",
									"src": "675:24:11"
								},
								{
									"baseName": {
										"id": 1750,
										"name": "IERC721Metadata",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1121,
										"src": "705:15:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Metadata_$1121",
											"typeString": "contract IERC721Metadata"
										}
									},
									"id": 1751,
									"nodeType": "InheritanceSpecifier",
									"src": "705:15:11"
								},
								{
									"baseName": {
										"id": 1752,
										"name": "IERC721Enumerable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1094,
										"src": "726:17:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Enumerable_$1094",
											"typeString": "contract IERC721Enumerable"
										}
									},
									"id": 1753,
									"nodeType": "InheritanceSpecifier",
									"src": "726:17:11"
								},
								{
									"baseName": {
										"id": 1754,
										"name": "IERC721Permit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1732,
										"src": "749:13:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Permit_$1732",
											"typeString": "contract IERC721Permit"
										}
									},
									"id": 1755,
									"nodeType": "InheritanceSpecifier",
									"src": "749:13:11"
								}
							],
							"contractDependencies": [
								11,
								1063,
								1094,
								1121,
								1732,
								1943,
								1969,
								1988
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1743,
								"nodeType": "StructuredDocumentation",
								"src": "407:177:11",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 1927,
							"linearizedBaseContracts": [
								1927,
								1732,
								1094,
								1121,
								1063,
								11,
								1943,
								1969,
								1988
							],
							"name": "INonfungiblePositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1756,
										"nodeType": "StructuredDocumentation",
										"src": "769:458:11",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"id": 1766,
									"name": "IncreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1766,
												"src": "1256:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1256:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1766,
												"src": "1281:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1759,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1762,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1766,
												"src": "1300:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1300:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1764,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1766,
												"src": "1317:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1317:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1255:78:11"
									},
									"src": "1232:102:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1767,
										"nodeType": "StructuredDocumentation",
										"src": "1339:419:11",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"id": 1777,
									"name": "DecreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1769,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "1787:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1787:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1771,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "1812:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1770,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1812:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1773,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "1831:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1831:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1775,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "1848:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1774,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1848:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1786:78:11"
									},
									"src": "1763:102:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1778,
										"nodeType": "StructuredDocumentation",
										"src": "1870:522:11",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"id": 1788,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1780,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "2411:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1779,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2411:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1782,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "2436:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2436:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1784,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "2455:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2455:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1786,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "2472:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1785,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2472:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2410:78:11"
									},
									"src": "2397:92:11"
								},
								{
									"documentation": {
										"id": 1789,
										"nodeType": "StructuredDocumentation",
										"src": "2495:1157:11",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 1818,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3676:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3676:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3675:17:11"
									},
									"returnParameters": {
										"id": 1817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3753:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1793,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3753:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1796,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3779:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1795,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3779:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1798,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3809:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1797,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3809:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1800,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3837:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1799,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3837:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1802,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3865:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1801,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3865:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1804,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3889:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1803,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3889:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1806,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3918:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1805,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3918:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1808,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3947:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1807,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3947:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1810,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "3978:32:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3978:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1812,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "4024:32:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4024:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "4070:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1813,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4070:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1816,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "4103:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1815,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4103:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3739:393:11"
									},
									"scope": 1927,
									"src": "3657:476:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 1841,
									"members": [
										{
											"constant": false,
											"id": 1820,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4167:14:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1819,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4167:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1822,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4191:14:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1821,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4191:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1824,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4215:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1823,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4215:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1826,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4235:15:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1825,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4235:5:11",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1828,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4260:15:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1827,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4260:5:11",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1830,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4285:22:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1829,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4285:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1832,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4317:22:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1831,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4317:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1834,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4349:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1833,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4349:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1836,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4377:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1835,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4377:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1838,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4405:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1837,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4405:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1840,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1841,
											"src": "4432:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1839,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4432:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 1927,
									"src": "4139:316:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1842,
										"nodeType": "StructuredDocumentation",
										"src": "4461:586:11",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 1855,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "5066:26:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$1841_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 1843,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1841,
													"src": "5066:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$1841_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5065:28:11"
									},
									"returnParameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "5157:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1846,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5157:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1849,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "5186:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1848,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5186:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1851,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "5217:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1850,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5217:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1853,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "5246:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1852,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5246:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:128:11"
									},
									"scope": 1927,
									"src": "5052:220:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 1868,
									"members": [
										{
											"constant": false,
											"id": 1857,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 1868,
											"src": "5319:15:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1856,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5319:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1859,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1868,
											"src": "5344:22:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1858,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5344:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1861,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1868,
											"src": "5376:22:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1860,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5376:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1863,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 1868,
											"src": "5408:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1862,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5408:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1865,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 1868,
											"src": "5436:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1864,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5436:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1867,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1868,
											"src": "5464:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1866,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5464:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 1927,
									"src": "5278:209:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1869,
										"nodeType": "StructuredDocumentation",
										"src": "5493:821:11",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 1880,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1871,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "6346:39:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1868_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 1870,
													"name": "IncreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1868,
													"src": "6346:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1868_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6345:41:11"
									},
									"returnParameters": {
										"id": 1879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1874,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "6450:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1873,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6450:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "6481:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6481:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "6510:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1877,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6510:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6436:99:11"
									},
									"scope": 1927,
									"src": "6319:217:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 1891,
									"members": [
										{
											"constant": false,
											"id": 1882,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 1891,
											"src": "6583:15:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1881,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6583:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1884,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 1891,
											"src": "6608:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1883,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6608:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1886,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 1891,
											"src": "6635:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1885,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6635:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1888,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 1891,
											"src": "6663:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1887,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6663:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1890,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1891,
											"src": "6691:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1889,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6691:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 1927,
									"src": "6542:172:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1892,
										"nodeType": "StructuredDocumentation",
										"src": "6720:702:11",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 1901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1894,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1901,
												"src": "7454:39:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1891_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 1893,
													"name": "DecreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1891,
													"src": "7454:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1891_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7453:41:11"
									},
									"returnParameters": {
										"id": 1900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1897,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1901,
												"src": "7545:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7545:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1901,
												"src": "7562:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7562:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7544:34:11"
									},
									"scope": 1927,
									"src": "7427:152:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 1910,
									"members": [
										{
											"constant": false,
											"id": 1903,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 1910,
											"src": "7616:15:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1902,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7616:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1905,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1910,
											"src": "7641:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1904,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7641:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1907,
											"mutability": "mutable",
											"name": "amount0Max",
											"nodeType": "VariableDeclaration",
											"scope": 1910,
											"src": "7668:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1906,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7668:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1909,
											"mutability": "mutable",
											"name": "amount1Max",
											"nodeType": "VariableDeclaration",
											"scope": 1910,
											"src": "7696:18:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1908,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7696:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nodeType": "StructDefinition",
									"scope": 1927,
									"src": "7585:136:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1911,
										"nodeType": "StructuredDocumentation",
										"src": "7727:489:11",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 1920,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1920,
												"src": "8238:29:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$1910_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 1912,
													"name": "CollectParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1910,
													"src": "8238:13:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$1910_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8237:31:11"
									},
									"returnParameters": {
										"id": 1919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1916,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1920,
												"src": "8295:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8295:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1918,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1920,
												"src": "8312:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8312:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8294:34:11"
									},
									"scope": 1927,
									"src": "8221:108:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1921,
										"nodeType": "StructuredDocumentation",
										"src": "8335:213:11",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 1926,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1926,
												"src": "8567:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8567:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8566:17:11"
									},
									"returnParameters": {
										"id": 1925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8600:0:11"
									},
									"scope": 1927,
									"src": "8553:48:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1928,
							"src": "584:8019:11"
						}
					],
					"src": "45:8559:11"
				},
				"id": 11
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							1943
						]
					},
					"id": 1944,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1929,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1930,
								"nodeType": "StructuredDocumentation",
								"src": "71:91:12",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 1943,
							"linearizedBaseContracts": [
								1943
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1931,
										"nodeType": "StructuredDocumentation",
										"src": "203:57:12",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 1936,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:12"
									},
									"returnParameters": {
										"id": 1935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1934,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1936,
												"src": "307:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:12"
									},
									"scope": 1943,
									"src": "265:51:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1937,
										"nodeType": "StructuredDocumentation",
										"src": "322:40:12",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1942,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1938,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:12"
									},
									"returnParameters": {
										"id": 1941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1942,
												"src": "407:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:12"
									},
									"scope": 1943,
									"src": "367:49:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1944,
							"src": "162:256:12"
						}
					],
					"src": "45:374:12"
				},
				"id": 12
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							1969
						]
					},
					"id": 1970,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1945,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1946,
								"nodeType": "StructuredDocumentation",
								"src": "71:92:13",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 1969,
							"linearizedBaseContracts": [
								1969
							],
							"name": "IPeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1947,
										"nodeType": "StructuredDocumentation",
										"src": "198:302:13",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 1954,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1949,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "526:21:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1951,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "549:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:42:13"
									},
									"returnParameters": {
										"id": 1953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:0:13"
									},
									"scope": 1969,
									"src": "505:80:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1955,
										"nodeType": "StructuredDocumentation",
										"src": "591:225:13",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 1958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:13"
									},
									"returnParameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:13"
									},
									"scope": 1969,
									"src": "821:38:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1959,
										"nodeType": "StructuredDocumentation",
										"src": "865:427:13",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 1968,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1961,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1968,
												"src": "1326:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1968,
												"src": "1349:21:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1968,
												"src": "1380:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1964,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1380:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:87:13"
									},
									"returnParameters": {
										"id": 1967,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1420:0:13"
									},
									"scope": 1969,
									"src": "1297:124:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1970,
							"src": "163:1260:13"
						}
					],
					"src": "45:1379:13"
				},
				"id": 13
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							1988
						]
					},
					"id": 1989,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1971,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:14"
						},
						{
							"id": 1972,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1973,
								"nodeType": "StructuredDocumentation",
								"src": "91:194:14",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 1988,
							"linearizedBaseContracts": [
								1988
							],
							"name": "IPoolInitializer",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1974,
										"nodeType": "StructuredDocumentation",
										"src": "318:648:14",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 1987,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1976,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1987,
												"src": "1024:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1978,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1987,
												"src": "1048:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1048:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1980,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1987,
												"src": "1072:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1979,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1072:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1982,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1987,
												"src": "1092:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1981,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1092:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:104:14"
									},
									"returnParameters": {
										"id": 1986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1987,
												"src": "1145:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1145:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:14:14"
									},
									"scope": 1988,
									"src": "971:188:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1989,
							"src": "285:876:14"
						}
					],
					"src": "45:1117:14"
				},
				"id": 14
			},
			"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							2080
						]
					},
					"id": 2081,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1990,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1991,
								"nodeType": "StructuredDocumentation",
								"src": "71:96:15",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 2080,
							"linearizedBaseContracts": [
								2080
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1994,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 2080,
									"src": "193:114:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1992,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "193:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 1993,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "241:66:15",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 2001,
									"members": [
										{
											"constant": false,
											"id": 1996,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 2001,
											"src": "387:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1995,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "387:7:15",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1998,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 2001,
											"src": "411:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1997,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "411:7:15",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2000,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 2001,
											"src": "435:10:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1999,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "435:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 2080,
									"src": "362:90:15",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2031,
										"nodeType": "Block",
										"src": "917:141:15",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2013,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2004,
														"src": "931:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2014,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2006,
														"src": "940:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "931:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2024,
												"nodeType": "IfStatement",
												"src": "927:56:15",
												"trueBody": {
													"expression": {
														"id": 2022,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2016,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2004,
																	"src": "949:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2017,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2006,
																	"src": "957:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2018,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "948:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2019,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2006,
																	"src": "968:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2020,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2004,
																	"src": "976:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2021,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "967:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "948:35:15",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2023,
													"nodeType": "ExpressionStatement",
													"src": "948:35:15"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2026,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2004,
															"src": "1017:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2027,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2006,
															"src": "1033:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2028,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2008,
															"src": "1046:3:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 2025,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2001,
														"src": "1000:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$2001_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 2029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1000:51:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 2012,
												"id": 2030,
												"nodeType": "Return",
												"src": "993:58:15"
											}
										]
									},
									"documentation": {
										"id": 2002,
										"nodeType": "StructuredDocumentation",
										"src": "458:321:15",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 2032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2004,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "813:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2003,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2006,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "837:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "837:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "861:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2007,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "861:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "803:74:15"
									},
									"returnParameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2011,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "901:14:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2010,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2001,
													"src": "901:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2001_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "900:16:15"
									},
									"scope": 2080,
									"src": "784:274:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2078,
										"nodeType": "Block",
										"src": "1403:414:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2043,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2037,
																	"src": "1421:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2044,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1996,
																"src": "1421:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 2045,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2037,
																	"src": "1434:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2046,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1998,
																"src": "1434:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1421:23:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2042,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1413:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2048,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1413:32:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2049,
												"nodeType": "ExpressionStatement",
												"src": "1413:32:15"
											},
											{
												"expression": {
													"id": 2076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2050,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2040,
														"src": "1455:4:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 2058,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1581:7:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 2059,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2035,
																						"src": "1614:7:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 2063,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2037,
																											"src": "1668:3:15",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2064,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1996,
																										"src": "1668:10:15",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2065,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2037,
																											"src": "1680:3:15",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2066,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1998,
																										"src": "1680:10:15",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2067,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2037,
																											"src": "1692:3:15",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2068,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2000,
																										"src": "1692:7:15",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 2061,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1657:3:15",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 2062,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1657:10:15",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 2069,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1657:43:15",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 2060,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1647:9:15",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 2070,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1647:54:15",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 2071,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1994,
																						"src": "1727:19:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 2056,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1539:3:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 2057,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1539:16:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 2072,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1539:229:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 2055,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1508:9:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 2073,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1508:278:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2054,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1483:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2053,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1483:7:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2074,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1483:317:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2052,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1462:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2051,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1462:7:15",
																"typeDescriptions": {}
															}
														},
														"id": 2075,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1462:348:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1455:355:15",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2077,
												"nodeType": "ExpressionStatement",
												"src": "1455:355:15"
											}
										]
									},
									"documentation": {
										"id": 2033,
										"nodeType": "StructuredDocumentation",
										"src": "1064:236:15",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 2079,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 2079,
												"src": "1329:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1329:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 2079,
												"src": "1346:18:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2001_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2036,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2001,
													"src": "1346:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2001_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:37:15"
									},
									"returnParameters": {
										"id": 2041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 2079,
												"src": "1389:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2039,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1389:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1388:14:15"
									},
									"scope": 2080,
									"src": "1305:512:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2081,
							"src": "167:1652:15"
						}
					],
					"src": "45:1775:15"
				},
				"id": 15
			},
			"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20": [
							947
						],
						"TransferHelper": [
							2251
						]
					},
					"id": 2252,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2082,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:16"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2083,
							"nodeType": "ImportDirective",
							"scope": 2252,
							"sourceUnit": 948,
							"src": "71:56:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 2251,
							"linearizedBaseContracts": [
								2251
							],
							"name": "TransferHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2131,
										"nodeType": "Block",
										"src": "690:229:16",
										"statements": [
											{
												"assignments": [
													2096,
													2098
												],
												"declarations": [
													{
														"constant": false,
														"id": 2096,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2131,
														"src": "701:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2095,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "701:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2098,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2131,
														"src": "715:17:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2097,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "715:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2111,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2103,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 947,
																			"src": "782:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$947_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 2104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 928,
																		"src": "782:19:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transferFrom(address,address,uint256) returns (bool)"
																		}
																	},
																	"id": 2105,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "782:28:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2106,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2088,
																	"src": "812:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2107,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2090,
																	"src": "818:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2108,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2092,
																	"src": "822:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2101,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "759:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2102,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "759:22:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2109,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "759:69:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2099,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2086,
															"src": "748:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2100,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "748:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "748:81:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "700:129:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2113,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2096,
																"src": "847:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2125,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2117,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2114,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2098,
																					"src": "859:4:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "859:11:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2116,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "874:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "859:16:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2120,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2098,
																					"src": "890:4:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2122,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "897:4:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2121,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "897:4:16",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2123,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "896:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2118,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "879:3:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2119,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "879:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2124,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "879:24:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "859:44:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2126,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "858:46:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "847:57:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535446",
															"id": 2128,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "906:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															},
															"value": "STF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															}
														],
														"id": 2112,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "839:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "839:73:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2130,
												"nodeType": "ExpressionStatement",
												"src": "839:73:16"
											}
										]
									},
									"documentation": {
										"id": 2084,
										"nodeType": "StructuredDocumentation",
										"src": "158:398:16",
										"text": "@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"
									},
									"id": 2132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2086,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "596:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2085,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2088,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "619:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "641:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "641:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2092,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2132,
												"src": "661:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "586:94:16"
									},
									"returnParameters": {
										"id": 2094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "690:0:16"
									},
									"scope": 2251,
									"src": "561:358:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2177,
										"nodeType": "Block",
										"src": "1314:206:16",
										"statements": [
											{
												"assignments": [
													2143,
													2145
												],
												"declarations": [
													{
														"constant": false,
														"id": 2143,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2177,
														"src": "1325:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2142,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1325:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2145,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2177,
														"src": "1339:17:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2144,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1339:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2157,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2150,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 947,
																			"src": "1394:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$947_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 2151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 896,
																		"src": "1394:15:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 2152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1394:24:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2153,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2137,
																	"src": "1420:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2154,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2139,
																	"src": "1424:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2148,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1371:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2149,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1371:22:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2155,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1371:59:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2146,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2135,
															"src": "1360:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2147,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1360:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1360:71:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1324:107:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2159,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2143,
																"src": "1449:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2171,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2160,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2145,
																					"src": "1461:4:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2161,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1461:11:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2162,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1476:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1461:16:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2166,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2145,
																					"src": "1492:4:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2168,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1499:4:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2167,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1499:4:16",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2169,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1498:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2164,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1481:3:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2165,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1481:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1481:24:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1461:44:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2172,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1460:46:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1449:57:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5354",
															"id": 2174,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1508:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															},
															"value": "ST"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															}
														],
														"id": 2158,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1441:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1441:72:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2176,
												"nodeType": "ExpressionStatement",
												"src": "1441:72:16"
											}
										]
									},
									"documentation": {
										"id": 2133,
										"nodeType": "StructuredDocumentation",
										"src": "925:281:16",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 2178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1242:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2137,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1265:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2139,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1285:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1232:72:16"
									},
									"returnParameters": {
										"id": 2141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1314:0:16"
									},
									"scope": 2251,
									"src": "1211:309:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2223,
										"nodeType": "Block",
										"src": "1975:205:16",
										"statements": [
											{
												"assignments": [
													2189,
													2191
												],
												"declarations": [
													{
														"constant": false,
														"id": 2189,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2223,
														"src": "1986:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2188,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1986:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2191,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2223,
														"src": "2000:17:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2190,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2000:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2203,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2196,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 947,
																			"src": "2055:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$947_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 2197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 916,
																		"src": "2055:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.approve(address,uint256) returns (bool)"
																		}
																	},
																	"id": 2198,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2055:23:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2199,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2183,
																	"src": "2080:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2200,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2185,
																	"src": "2084:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2194,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2032:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2195,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2032:22:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2201,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2032:58:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2192,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2181,
															"src": "2021:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2193,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "2021:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2021:70:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1985:106:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2205,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2189,
																"src": "2109:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2217,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2209,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2206,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2191,
																					"src": "2121:4:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2207,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2121:11:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2208,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2136:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2121:16:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2212,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2191,
																					"src": "2152:4:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2214,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2159:4:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2213,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "2159:4:16",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2215,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2158:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2210,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2141:3:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2211,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "2141:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2216,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2141:24:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2121:44:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2218,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:46:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2109:57:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5341",
															"id": 2220,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2168:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															},
															"value": "SA"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															}
														],
														"id": 2204,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2101:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2101:72:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2222,
												"nodeType": "ExpressionStatement",
												"src": "2101:72:16"
											}
										]
									},
									"documentation": {
										"id": 2179,
										"nodeType": "StructuredDocumentation",
										"src": "1526:342:16",
										"text": "@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"
									},
									"id": 2224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2181,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2224,
												"src": "1903:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1903:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2224,
												"src": "1926:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1926:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2224,
												"src": "1946:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1946:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1893:72:16"
									},
									"returnParameters": {
										"id": 2187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1975:0:16"
									},
									"scope": 2251,
									"src": "1873:307:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2249,
										"nodeType": "Block",
										"src": "2431:104:16",
										"statements": [
											{
												"assignments": [
													2233,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2233,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2249,
														"src": "2442:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2232,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2442:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2243,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2240,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2492:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2239,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "2482:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 2238,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2486:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 2241,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2482:12:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2234,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2227,
																"src": "2460:2:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2460:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2237,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2236,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "2475:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2460:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:35:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2441:54:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2245,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2233,
															"src": "2513:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535445",
															"id": 2246,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2522:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															},
															"value": "STE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															}
														],
														"id": 2244,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2505:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2248,
												"nodeType": "ExpressionStatement",
												"src": "2505:23:16"
											}
										]
									},
									"documentation": {
										"id": 2225,
										"nodeType": "StructuredDocumentation",
										"src": "2186:179:16",
										"text": "@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"
									},
									"id": 2250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2227,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2250,
												"src": "2395:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2250,
												"src": "2407:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:27:16"
									},
									"returnParameters": {
										"id": 2231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2431:0:16"
									},
									"scope": 2251,
									"src": "2370:165:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2252,
							"src": "129:2408:16"
						}
					],
					"src": "45:2493:16"
				},
				"id": 16
			},
			"contracts/polygon/cattus.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/cattus.sol",
					"exportedSymbols": {
						"Context": [
							1162
						],
						"ERC20": [
							869
						],
						"IERC165": [
							11
						],
						"IERC20": [
							947
						],
						"IERC721": [
							1063
						],
						"IERC721Enumerable": [
							1094
						],
						"IERC721Metadata": [
							1121
						],
						"IERC721Permit": [
							1732
						],
						"IERC721Receiver": [
							1139
						],
						"INonfungiblePositionManager": [
							1927
						],
						"IPeripheryImmutableState": [
							1943
						],
						"IPeripheryPayments": [
							1969
						],
						"IPoolInitializer": [
							1988
						],
						"PoolAddress": [
							2080
						],
						"SafeMath": [
							366
						],
						"TickMath": [
							1697
						],
						"TransferHelper": [
							2251
						],
						"cattus": [
							2473
						],
						"iNFTPositionManager": [
							2534
						],
						"iQuickswapSwapper": [
							2499
						]
					},
					"id": 2474,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2253,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:17"
						},
						{
							"id": 2254,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "56:19:17"
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol",
							"id": 2255,
							"nodeType": "ImportDirective",
							"scope": 2474,
							"sourceUnit": 1928,
							"src": "77:84:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
							"file": "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol",
							"id": 2256,
							"nodeType": "ImportDirective",
							"scope": 2474,
							"sourceUnit": 2252,
							"src": "162:70:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"id": 2257,
							"nodeType": "ImportDirective",
							"scope": 2474,
							"sourceUnit": 1698,
							"src": "233:59:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 2258,
							"nodeType": "ImportDirective",
							"scope": 2474,
							"sourceUnit": 870,
							"src": "294:55:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 2259,
							"nodeType": "ImportDirective",
							"scope": 2474,
							"sourceUnit": 1140,
							"src": "350:66:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/quickswapV3.sol",
							"file": "./quickswapV3.sol",
							"id": 2260,
							"nodeType": "ImportDirective",
							"scope": 2474,
							"sourceUnit": 2535,
							"src": "418:27:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2261,
										"name": "ERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 869,
										"src": "469:5:17",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$869",
											"typeString": "contract ERC20"
										}
									},
									"id": 2262,
									"nodeType": "InheritanceSpecifier",
									"src": "469:5:17"
								}
							],
							"contractDependencies": [
								869,
								947,
								1162
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2473,
							"linearizedBaseContracts": [
								2473,
								869,
								947,
								1162
							],
							"name": "cattus",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2265,
									"mutability": "constant",
									"name": "USDC",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "481:66:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2263,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "481:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307832373931426361316632646534363631454438384133304339394137613934343941613834313734",
										"id": 2264,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "505:42:17",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2268,
									"mutability": "constant",
									"name": "DAI",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "551:65:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2266,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "551:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307838663343663761643233436433436144624439373335414666393538303233323339633641303633",
										"id": 2267,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "574:42:17",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2271,
									"mutability": "constant",
									"name": "axlUSDC",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "620:69:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2269,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "620:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307837353065344334393834613965306631323937386541363734324263316335443234386634306564",
										"id": 2270,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "647:42:17",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0x750e4C4984a9e0f12978eA6742Bc1c5D248f40ed"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2274,
									"mutability": "constant",
									"name": "BOB",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "693:65:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2272,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "693:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307842304231393561454641333635304136393038663135436461433744393246386135373931423042",
										"id": 2273,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "716:42:17",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2277,
									"mutability": "constant",
									"name": "QUICKSWAP_ROUTER",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "762:78:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2275,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "762:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307861354530383239436143456438664644443444653363343336393663353746374437413637386666",
										"id": 2276,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "798:42:17",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2280,
									"mutability": "constant",
									"name": "NF_POSITION_MANAGER",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "1062:81:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2278,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1062:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307838654638384534633743666262614331433136336637656464643442353738373932323031646536",
										"id": 2279,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1101:42:17",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0x8eF88E4c7CfbbaC1C163f7eddd4B578792201de6"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2283,
									"mutability": "constant",
									"name": "QUICKSWAP_V3_SWAPPER",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "1147:82:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2281,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1147:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307866356235303962423039303961363942316332303745343935663638376135393643313638453132",
										"id": 2282,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1187:42:17",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0xf5b509bB0909a69B1c207E495f687a596C168E12"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "f2e62772",
									"id": 2285,
									"mutability": "mutable",
									"name": "admin_address",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "1316:28:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2284,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1316:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "089fe6aa",
									"id": 2288,
									"mutability": "constant",
									"name": "poolFee",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "1349:37:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint24",
										"typeString": "uint24"
									},
									"typeName": {
										"id": 2286,
										"name": "uint24",
										"nodeType": "ElementaryTypeName",
										"src": "1349:6:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint24",
											"typeString": "uint24"
										}
									},
									"value": {
										"hexValue": "33303030",
										"id": 2287,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1382:4:17",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3000_by_1",
											"typeString": "int_const 3000"
										},
										"value": "3000"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "158ef93e",
									"id": 2290,
									"mutability": "mutable",
									"name": "initialized",
									"nodeType": "VariableDeclaration",
									"scope": 2473,
									"src": "1391:23:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 2289,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1391:4:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 2306,
										"nodeType": "Block",
										"src": "1459:68:17",
										"statements": [
											{
												"expression": {
													"id": 2300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2297,
														"name": "admin_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2285,
														"src": "1467:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2298,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1483:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 2299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1483:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1467:26:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2301,
												"nodeType": "ExpressionStatement",
												"src": "1467:26:17"
											},
											{
												"expression": {
													"id": 2304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2302,
														"name": "initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2290,
														"src": "1501:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 2303,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1515:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1501:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2305,
												"nodeType": "ExpressionStatement",
												"src": "1501:19:17"
											}
										]
									},
									"id": 2307,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "476f6c64",
													"id": 2293,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1444:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_6f0d47b12e2c2f7083eb5622541f9c3930e56fc3e46e89e132673f05a079baff",
														"typeString": "literal_string \"Gold\""
													},
													"value": "Gold"
												},
												{
													"hexValue": "474c44",
													"id": 2294,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1452:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_f549cfa71a021ddf7dd7510221f2f14a897d67c2ddb8a226325f7c5bfd11fcff",
														"typeString": "literal_string \"GLD\""
													},
													"value": "GLD"
												}
											],
											"id": 2295,
											"modifierName": {
												"id": 2292,
												"name": "ERC20",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 869,
												"src": "1438:5:17",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_ERC20_$869_$",
													"typeString": "type(contract ERC20)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1438:20:17"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:17"
									},
									"returnParameters": {
										"id": 2296,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1459:0:17"
									},
									"scope": 2473,
									"src": "1424:103:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2471,
										"nodeType": "Block",
										"src": "1586:1817:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2313,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1602:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2314,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1602:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2315,
																"name": "admin_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2285,
																"src": "1616:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1602:27:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d7573742062652063616c6c656420627920636f6e74726163742061646d696e",
															"id": 2317,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1631:34:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990",
																"typeString": "literal_string \"Must be called by contract admin\""
															},
															"value": "Must be called by contract admin"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2104890935d0cba0431b917d3ded24287cfccba897edb2034d4c9a3f2975c990",
																"typeString": "literal_string \"Must be called by contract admin\""
															}
														],
														"id": 2312,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1594:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1594:72:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2319,
												"nodeType": "ExpressionStatement",
												"src": "1594:72:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2321,
																"name": "initialized",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2290,
																"src": "1682:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 2322,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1697:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "1682:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f6e74726163742068617320616c7265616479206265656e20696e697469616c697a6564",
															"id": 2324,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1704:39:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8",
																"typeString": "literal_string \"Contract has already been initialized\""
															},
															"value": "Contract has already been initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_10592b7a072807ff2d3e8751ff63aca3501ca79e44802761add6e43824a0e4d8",
																"typeString": "literal_string \"Contract has already been initialized\""
															}
														],
														"id": 2320,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1674:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1674:70:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2326,
												"nodeType": "ExpressionStatement",
												"src": "1674:70:17"
											},
											{
												"expression": {
													"id": 2329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2327,
														"name": "initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2290,
														"src": "1752:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 2328,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1766:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1752:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2330,
												"nodeType": "ExpressionStatement",
												"src": "1752:18:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2334,
															"name": "USDC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2265,
															"src": "1810:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2335,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1816:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1816:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 2339,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1836:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_cattus_$2473",
																		"typeString": "contract cattus"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_cattus_$2473",
																		"typeString": "contract cattus"
																	}
																],
																"id": 2338,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1828:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2337,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1828:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2340,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1828:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2341,
															"name": "_initialAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2309,
															"src": "1843:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2331,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2251,
															"src": "1778:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2251_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 2333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2132,
														"src": "1778:31:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256)"
														}
													},
													"id": 2342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1778:80:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2343,
												"nodeType": "ExpressionStatement",
												"src": "1778:80:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2347,
															"name": "USDC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2265,
															"src": "1893:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2348,
															"name": "QUICKSWAP_V3_SWAPPER",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2283,
															"src": "1899:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2349,
															"name": "_initialAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2309,
															"src": "1921:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2344,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2251,
															"src": "1866:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2251_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 2346,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2224,
														"src": "1866:26:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1866:70:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2351,
												"nodeType": "ExpressionStatement",
												"src": "1866:70:17"
											},
											{
												"assignments": [
													2353
												],
												"declarations": [
													{
														"constant": false,
														"id": 2353,
														"mutability": "mutable",
														"name": "fraction",
														"nodeType": "VariableDeclaration",
														"scope": 2471,
														"src": "1944:16:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2352,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1944:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2357,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2354,
														"name": "_initialAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2309,
														"src": "1963:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "33",
														"id": 2355,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1978:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "1963:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1944:35:17"
											},
											{
												"assignments": [
													2361
												],
												"declarations": [
													{
														"constant": false,
														"id": 2361,
														"mutability": "mutable",
														"name": "params",
														"nodeType": "VariableDeclaration",
														"scope": 2471,
														"src": "1988:54:17",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
															"typeString": "struct iQuickswapSwapper.ExactInputSingleParams"
														},
														"typeName": {
															"id": 2360,
															"name": "iQuickswapSwapper.ExactInputSingleParams",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 2491,
															"src": "1988:40:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_storage_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2362,
												"nodeType": "VariableDeclarationStatement",
												"src": "1988:54:17"
											},
											{
												"expression": {
													"id": 2380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2363,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2361,
														"src": "2050:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
															"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2366,
																"name": "USDC",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2265,
																"src": "2127:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 2367,
																"name": "DAI",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2268,
																"src": "2159:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"arguments": [
																	{
																		"id": 2370,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2199:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_cattus_$2473",
																			"typeString": "contract cattus"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_cattus_$2473",
																			"typeString": "contract cattus"
																		}
																	],
																	"id": 2369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2191:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2368,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2191:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2371,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2191:13:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 2372,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2232:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 2373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2232:15:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2376,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2374,
																	"name": "fraction",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2353,
																	"src": "2275:8:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2284:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "2275:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "31",
																"id": 2377,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2321:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															{
																"hexValue": "30",
																"id": 2378,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"expression": {
																"id": 2364,
																"name": "iQuickswapSwapper",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2499,
																"src": "2059:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_iQuickswapSwapper_$2499_$",
																	"typeString": "type(contract iQuickswapSwapper)"
																}
															},
															"id": 2365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "ExactInputSingleParams",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2491,
															"src": "2059:40:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_ExactInputSingleParams_$2491_storage_ptr_$",
																"typeString": "type(struct iQuickswapSwapper.ExactInputSingleParams storage pointer)"
															}
														},
														"id": 2379,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [
															"tokenIn",
															"tokenOut",
															"recipient",
															"deadline",
															"amountIn",
															"amountOutMinimum",
															"limitSqrtPrice"
														],
														"nodeType": "FunctionCall",
														"src": "2059:311:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
															"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
														}
													},
													"src": "2050:320:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
														"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
													}
												},
												"id": 2381,
												"nodeType": "ExpressionStatement",
												"src": "2050:320:17"
											},
											{
												"assignments": [
													2383
												],
												"declarations": [
													{
														"constant": false,
														"id": 2383,
														"mutability": "mutable",
														"name": "amount_dai",
														"nodeType": "VariableDeclaration",
														"scope": 2471,
														"src": "2378:18:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2382,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2378:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2390,
												"initialValue": {
													"arguments": [
														{
															"id": 2388,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2361,
															"src": "2456:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2385,
																	"name": "QUICKSWAP_V3_SWAPPER",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2283,
																	"src": "2417:20:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2384,
																"name": "iQuickswapSwapper",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2499,
																"src": "2399:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_iQuickswapSwapper_$2499_$",
																	"typeString": "type(contract iQuickswapSwapper)"
																}
															},
															"id": 2386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2399:39:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_iQuickswapSwapper_$2499",
																"typeString": "contract iQuickswapSwapper"
															}
														},
														"id": 2387,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exactInputSingle",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2498,
														"src": "2399:56:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_ExactInputSingleParams_$2491_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct iQuickswapSwapper.ExactInputSingleParams memory) payable external returns (uint256)"
														}
													},
													"id": 2389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2399:64:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2378:85:17"
											},
											{
												"expression": {
													"id": 2395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2391,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2361,
															"src": "2471:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														},
														"id": 2393,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenOut",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2480,
														"src": "2471:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2394,
														"name": "axlUSDC",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2271,
														"src": "2489:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2471:25:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2396,
												"nodeType": "ExpressionStatement",
												"src": "2471:25:17"
											},
											{
												"assignments": [
													2398
												],
												"declarations": [
													{
														"constant": false,
														"id": 2398,
														"mutability": "mutable",
														"name": "amount_axlUsdc",
														"nodeType": "VariableDeclaration",
														"scope": 2471,
														"src": "2504:22:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2397,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2504:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2405,
												"initialValue": {
													"arguments": [
														{
															"id": 2403,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2361,
															"src": "2586:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2400,
																	"name": "QUICKSWAP_V3_SWAPPER",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2283,
																	"src": "2547:20:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2399,
																"name": "iQuickswapSwapper",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2499,
																"src": "2529:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_iQuickswapSwapper_$2499_$",
																	"typeString": "type(contract iQuickswapSwapper)"
																}
															},
															"id": 2401,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2529:39:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_iQuickswapSwapper_$2499",
																"typeString": "contract iQuickswapSwapper"
															}
														},
														"id": 2402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exactInputSingle",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2498,
														"src": "2529:56:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_ExactInputSingleParams_$2491_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct iQuickswapSwapper.ExactInputSingleParams memory) payable external returns (uint256)"
														}
													},
													"id": 2404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2529:64:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2504:89:17"
											},
											{
												"expression": {
													"id": 2410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2406,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2361,
															"src": "2601:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														},
														"id": 2408,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "tokenOut",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2480,
														"src": "2601:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2409,
														"name": "BOB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2274,
														"src": "2619:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2601:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2411,
												"nodeType": "ExpressionStatement",
												"src": "2601:21:17"
											},
											{
												"assignments": [
													2413
												],
												"declarations": [
													{
														"constant": false,
														"id": 2413,
														"mutability": "mutable",
														"name": "amount_bob",
														"nodeType": "VariableDeclaration",
														"scope": 2471,
														"src": "2630:18:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2412,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2630:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2420,
												"initialValue": {
													"arguments": [
														{
															"id": 2418,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2361,
															"src": "2708:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_memory_ptr",
																"typeString": "struct iQuickswapSwapper.ExactInputSingleParams memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2415,
																	"name": "QUICKSWAP_V3_SWAPPER",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2283,
																	"src": "2669:20:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2414,
																"name": "iQuickswapSwapper",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2499,
																"src": "2651:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_iQuickswapSwapper_$2499_$",
																	"typeString": "type(contract iQuickswapSwapper)"
																}
															},
															"id": 2416,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2651:39:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_iQuickswapSwapper_$2499",
																"typeString": "contract iQuickswapSwapper"
															}
														},
														"id": 2417,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exactInputSingle",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2498,
														"src": "2651:56:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_ExactInputSingleParams_$2491_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct iQuickswapSwapper.ExactInputSingleParams memory) payable external returns (uint256)"
														}
													},
													"id": 2419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2651:64:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2630:85:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2424,
															"name": "USDC",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2265,
															"src": "2751:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2425,
															"name": "NF_POSITION_MANAGER",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2280,
															"src": "2757:19:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2426,
															"name": "fraction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2353,
															"src": "2778:8:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2421,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2251,
															"src": "2724:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2251_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 2423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2224,
														"src": "2724:26:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2724:63:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2428,
												"nodeType": "ExpressionStatement",
												"src": "2724:63:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2432,
															"name": "DAI",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2268,
															"src": "2822:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2433,
															"name": "NF_POSITION_MANAGER",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2280,
															"src": "2827:19:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2434,
															"name": "amount_dai",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2383,
															"src": "2848:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2429,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2251,
															"src": "2795:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2251_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 2431,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2224,
														"src": "2795:26:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2795:64:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2436,
												"nodeType": "ExpressionStatement",
												"src": "2795:64:17"
											},
											{
												"assignments": [
													2440
												],
												"declarations": [
													{
														"constant": false,
														"id": 2440,
														"mutability": "mutable",
														"name": "mint_params",
														"nodeType": "VariableDeclaration",
														"scope": 2471,
														"src": "2868:49:17",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MintParams_$2520_memory_ptr",
															"typeString": "struct iNFTPositionManager.MintParams"
														},
														"typeName": {
															"id": 2439,
															"name": "iNFTPositionManager.MintParams",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 2520,
															"src": "2868:30:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$2520_storage_ptr",
																"typeString": "struct iNFTPositionManager.MintParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2441,
												"nodeType": "VariableDeclarationStatement",
												"src": "2868:49:17"
											},
											{
												"expression": {
													"id": 2462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2442,
														"name": "mint_params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2440,
														"src": "2925:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MintParams_$2520_memory_ptr",
															"typeString": "struct iNFTPositionManager.MintParams memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2445,
																"name": "DAI",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2268,
																"src": "2994:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 2446,
																"name": "USDC",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2265,
																"src": "3021:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"hexValue": "323636333232",
																"id": 2447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3052:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_266322_by_1",
																	"typeString": "int_const 266322"
																},
																"value": "266322"
															},
															{
																"hexValue": "323836333232",
																"id": 2448,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3085:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_286322_by_1",
																	"typeString": "int_const 286322"
																},
																"value": "286322"
															},
															{
																"id": 2449,
																"name": "amount_dai",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2383,
																"src": "3123:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2452,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2450,
																	"name": "fraction",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2353,
																	"src": "3165:8:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2451,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3174:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "3165:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "31",
																"id": 2453,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3203:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															{
																"hexValue": "31",
																"id": 2454,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3232:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															{
																"arguments": [
																	{
																		"id": 2457,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "3269:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_cattus_$2473",
																			"typeString": "contract cattus"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_cattus_$2473",
																			"typeString": "contract cattus"
																		}
																	],
																	"id": 2456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3261:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2455,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3261:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2458,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3261:13:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 2459,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3300:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 2460,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3300:15:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_rational_266322_by_1",
																	"typeString": "int_const 266322"
																},
																{
																	"typeIdentifier": "t_rational_286322_by_1",
																	"typeString": "int_const 286322"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 2443,
																"name": "iNFTPositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2534,
																"src": "2939:19:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_iNFTPositionManager_$2534_$",
																	"typeString": "type(contract iNFTPositionManager)"
																}
															},
															"id": 2444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "MintParams",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2520,
															"src": "2939:30:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_MintParams_$2520_storage_ptr_$",
																"typeString": "type(struct iNFTPositionManager.MintParams storage pointer)"
															}
														},
														"id": 2461,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [
															"token0",
															"token1",
															"tickLower",
															"tickUpper",
															"amount0Desired",
															"amount1Desired",
															"amount0Min",
															"amount1Min",
															"recipient",
															"deadline"
														],
														"nodeType": "FunctionCall",
														"src": "2939:389:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MintParams_$2520_memory_ptr",
															"typeString": "struct iNFTPositionManager.MintParams memory"
														}
													},
													"src": "2925:403:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$2520_memory_ptr",
														"typeString": "struct iNFTPositionManager.MintParams memory"
													}
												},
												"id": 2463,
												"nodeType": "ExpressionStatement",
												"src": "2925:403:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2468,
															"name": "mint_params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2440,
															"src": "3382:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$2520_memory_ptr",
																"typeString": "struct iNFTPositionManager.MintParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_MintParams_$2520_memory_ptr",
																"typeString": "struct iNFTPositionManager.MintParams memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2465,
																	"name": "NF_POSITION_MANAGER",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2280,
																	"src": "3356:19:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2464,
																"name": "iNFTPositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2534,
																"src": "3336:19:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_iNFTPositionManager_$2534_$",
																	"typeString": "type(contract iNFTPositionManager)"
																}
															},
															"id": 2466,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3336:40:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_iNFTPositionManager_$2534",
																"typeString": "contract iNFTPositionManager"
															}
														},
														"id": 2467,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2533,
														"src": "3336:45:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_MintParams_$2520_memory_ptr_$returns$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "function (struct iNFTPositionManager.MintParams memory) payable external returns (uint256,uint128,uint256,uint256)"
														}
													},
													"id": 2469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3336:58:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint128,uint256,uint256)"
													}
												},
												"id": 2470,
												"nodeType": "ExpressionStatement",
												"src": "3336:58:17"
											}
										]
									},
									"functionSelector": "fe4b84df",
									"id": 2472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2309,
												"mutability": "mutable",
												"name": "_initialAmount",
												"nodeType": "VariableDeclaration",
												"scope": 2472,
												"src": "1553:22:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1553:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1552:24:17"
									},
									"returnParameters": {
										"id": 2311,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1586:0:17"
									},
									"scope": 2473,
									"src": "1533:1870:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2474,
							"src": "450:4734:17"
						}
					],
					"src": "32:5153:17"
				},
				"id": 17
			},
			"contracts/polygon/quickswapV3.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/quickswapV3.sol",
					"exportedSymbols": {
						"iNFTPositionManager": [
							2534
						],
						"iQuickswapSwapper": [
							2499
						]
					},
					"id": 2535,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2475,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:18"
						},
						{
							"id": 2476,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "58:19:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2499,
							"linearizedBaseContracts": [
								2499
							],
							"name": "iQuickswapSwapper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "iQuickswapSwapper.ExactInputSingleParams",
									"id": 2491,
									"members": [
										{
											"constant": false,
											"id": 2478,
											"mutability": "mutable",
											"name": "tokenIn",
											"nodeType": "VariableDeclaration",
											"scope": 2491,
											"src": "159:15:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2477,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "159:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2480,
											"mutability": "mutable",
											"name": "tokenOut",
											"nodeType": "VariableDeclaration",
											"scope": 2491,
											"src": "185:16:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2479,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "185:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2482,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2491,
											"src": "212:17:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2481,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "212:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2484,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2491,
											"src": "240:16:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2483,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "240:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2486,
											"mutability": "mutable",
											"name": "amountIn",
											"nodeType": "VariableDeclaration",
											"scope": 2491,
											"src": "267:16:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2485,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "267:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2488,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nodeType": "VariableDeclaration",
											"scope": 2491,
											"src": "294:24:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2487,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "294:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2490,
											"mutability": "mutable",
											"name": "limitSqrtPrice",
											"nodeType": "VariableDeclaration",
											"scope": 2491,
											"src": "329:22:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 2489,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "329:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nodeType": "StructDefinition",
									"scope": 2499,
									"src": "118:241:18",
									"visibility": "public"
								},
								{
									"functionSelector": "bc651188",
									"id": 2498,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2493,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2498,
												"src": "391:38:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_calldata_ptr",
													"typeString": "struct iQuickswapSwapper.ExactInputSingleParams"
												},
												"typeName": {
													"id": 2492,
													"name": "ExactInputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2491,
													"src": "391:22:18",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$2491_storage_ptr",
														"typeString": "struct iQuickswapSwapper.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "390:40:18"
									},
									"returnParameters": {
										"id": 2497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 2498,
												"src": "457:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "457:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "456:19:18"
									},
									"scope": 2499,
									"src": "365:111:18",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2535,
							"src": "83:396:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2534,
							"linearizedBaseContracts": [
								2534
							],
							"name": "iNFTPositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "iNFTPositionManager.MintParams",
									"id": 2520,
									"members": [
										{
											"constant": false,
											"id": 2501,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "549:14:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2500,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "549:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2503,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "574:14:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2502,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "574:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2505,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "599:15:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2504,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "599:5:18",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2507,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "625:15:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2506,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "625:5:18",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2509,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "651:22:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2508,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "651:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2511,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "684:22:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2510,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "684:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2513,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "717:18:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2512,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "717:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2515,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "746:18:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2514,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "746:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2517,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "775:17:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2516,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "775:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2519,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2520,
											"src": "803:16:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2518,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "803:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 2534,
									"src": "520:307:18",
									"visibility": "public"
								},
								{
									"functionSelector": "9cc1a283",
									"id": 2533,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2522,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2533,
												"src": "847:26:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$2520_calldata_ptr",
													"typeString": "struct iNFTPositionManager.MintParams"
												},
												"typeName": {
													"id": 2521,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2520,
													"src": "847:10:18",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$2520_storage_ptr",
														"typeString": "struct iNFTPositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "846:28:18"
									},
									"returnParameters": {
										"id": 2532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2525,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2533,
												"src": "942:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2527,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2533,
												"src": "972:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2526,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2529,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2533,
												"src": "1004:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2531,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2533,
												"src": "1034:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1034:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "927:133:18"
									},
									"scope": 2534,
									"src": "833:228:18",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2535,
							"src": "483:581:18"
						}
					],
					"src": "33:1031:18"
				},
				"id": 18
			}
		}
	}
}